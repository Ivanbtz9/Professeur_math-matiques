%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: activite-intro.dvi
%%CreationDate: Sat Oct 09 10:45:39 2021
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMR12 CMR10 CMSY5 CMBX10 CMSY10 CMMI10 CMR7
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips.exe -o activite-intro.ps activite-intro.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.10.09:1245
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A7E36B833D1AD45BDFECA66E5573877FA45E206F5075D9565C2970DE92
E3B0AFD624E645623364A01628270D6EF68D8AF7559DA18F8BB6445A99DE978B
0D3531E555BA20D6BE46D1108321D81305BB0F2EE77D82D65EBEB0A8A40738BA
045685A3E3E038F5356E49BE6F71D64F94A3EC9B0CF12C1432C59FE15A9431B7
AA65F2DB4CF6B4751FBE36B7F48373E5CA4AD9EC52D2FA1B11DFB9296ACF762F
934AC3FA817DD7D785EDCAFE3EF4797D1185C4DF0E7726477DEA149A5F788214
50E85053A42AAE00CB793241192FD9C14C3ECCCBBB6E0860C6D2D8515ECFE7BD
B02A0B978A38266F256AB89F0000513CC72CD15778445624BEA6B66222ECE227
9EA6F9EC50856EB80AA999BB77DA9375AB63A30FEBCDC361E23E2391F33D0867
19F4B7219AF812D46D7975C089E07505EC40109C4473970143F4593BBFDECBE3
3FA05A7777A6C10BDAA470879ED53A8E9038CCCDC8A774582257EBCDEC11E21E
A0EC3379835FA3591052855F13361B3E4587014DC6009BFD8675426946BEA1F2
277A90E5791BC12E1B2F4CF326A1D2EB03E89B3A0350A8CA251DB73376579BED
F2DBDEF494CAF1D19A43733BE27132304E9D8E9E19CFC045DFD0936ABF643227
0ED86D5A51DC625E43D8E6F9EC78ADB5EBF206304394C8B9D1BD4E37C7BD018A
ACE0E43461FC854398FF03EAF32ED129C4EEC4A7D55FCC13A912E5C332906374
1888EF7E30BFBDA5E7E19AA0587DD19AA2283107CAF1EABC2558849F2E7874C1
A1AF149CDD66C8CE3E6CDA94224DBB6FA809D17858ADFEC26D8B8CFD8390259B
5613CCC11F095F33D0370C2786A791BD3B0EB8B0CD579961DB190A9FD351DD7B
8B951C555D8A0354B1CA7E1EA7AE58ACDDF8C8871E83A2E32EF529FF9A23BC4A
F3AD15B07AB402443A0AFA84EC0A122328F28D60649B935EF513F1729EFBD8DE
C0A093576476D8AB905055CE020BCFE7398CC6DD8251971A24CB7851CC00E364
7027BD4C16B166A241211E54879B9D5E909C5BCCED074DF509345B9D60C9EB44
98C1F65161107E11E3DB7792EDAE6EF6930973FBAE2712FC911F6F43DCCC9C49
0404C6391811E7E1D3D417372E72DFC4CC735162B4FFE081A5D571FA26BE1555
F3EB269446AEFE4F7203DF04A073A2E0DCAC13B99231DD25F8A2FF91AEC1E964
3545D179188092F6312DD9D7D39D66F20AA4283B5EBBBE5F77949F1A4DB79B65
61EEAAA26E7B341E200B521D047E9344E6CD92CAAEAD10C4242AA9599A92AE60
8E036743337CBCC7C8B795CEC9317B702644480AF0E59BDD89CC2B2FD288351B
E82788D597FADFF5B8976839D2CDFE8DBC4DE26C7778B5BB6E841885EF4112EF
0D327C2DF843973767F13030D902D729A39C17F5517A211056C2CB3F0F2D2295
E9D252BF47179D259766489F100BEDED28B4DA1C29E43D82FA7908845132EB41
B392F87C354194C48849CC56ED7830BC4BC62BFD6E480460CD71B483C01DFB3C
F929BA1C43B4237D97577291F35C92718D9ACD922057500DE76D8991B0557352
2EE2A71888B31FA26358669716AE50896BB4ADD7F28900B9B522BBC0D6AE75BC
E9C9A224D04D20B1A4C2962A9480452387A280B09F3DB4231A2380285CFB0D72
6A3FF11383BDFA54BCDAA62C48FB98375A0A43E0E10210093352C05E92829618
E1E540AC5E5760907152EA5A9D998BC9215E4F125622B851374C6187781FAD69
1FAAFA4443C38207AF9F7F3A4741B4714D66E18F2AD2C02D688DFE1E23C7F76E
52AB2771BF2E2B573D0DD39932CB64E7FDFC9643691AAFDF053EF1B028825C55
764E9B2AD46A7232510D3B8E47E192B5D91428038626674341B967D7A4110B1A
A78B1F4B4250ED7510001A5279059EFE70FA8C7FBD81D51708DB2124E48458DF
63F28A59122B575D2649003BD828F6ADEAD242EA7CA343906B69B2460536E107
C767406824FD65394E393880E79DF3D8A15C4B4E64056E696619662B539AA82C
DC87C0CF809EDB876F4B2FEE41D70ABC0DA22C4947F9290A8EAD6ACDEDDB4549
4470638F8E24C83A21652048913B8213DFF310E676581568CE8637A306193D9D
C2EA5935656FE6BFF61ABE5462C7328C5AA7C13C12CEF9140BDCDF4A92CE8B57
622812039DA2FF8A307F3630CBBB6B4B32EAAC7BCA5763FDCAC8FC92D92FED3F
9D6F40978896B83DC355FF9D7B8A36A68E323B55CE5C4C6A5EEE1C742D674DA9
039014CCFD2A760F58769381C012F1F4E02D302E97C46C08EEF600D95028D6A1
4571A52B04ADC032BE88AE3781F1124B54EBABAA88371AE61D03CB48285C74FB
942A8DA1DB8E9BB6FBE6D6547AD1EB5E0CB1D4AE934556EA12312CF7A3D585EA
D718F58BF7718EDC6528D983FA26C47F8AF37656A0A19E01DEA27EE2548956D9
0C443418440BF67456463026AC91215DC3618332C45039591329B7751100AE56
EF14E119CDD8A3CFF9C78AFD366DE8269B6AA751689B24AC6DB93BDD2F672F34
E302D4789B3A3340BFACEB034C8E4BE29FB13651C11678B675F95B64F97063CA
CE2EDD9E311DCC4F4E83
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9111F4948A3E665E3
0DE92169B2A2137C001654C5F4FDA968F5E3AB43146106BA16C4208830672D20
AD334D8E65E7AE7229A1B6E296CE4A00764819D16F9317C0902584632E52DB04
82F530E39073A39B6E293B03E67022B783BCF794EC9C4699F31BB3F33E1165A2
C5C5C07DC384CA6E6C00E6E627626BBDC9E1EA3FD887574A6EAA0137CF94C298
A3AA95544A54DF7CEB89322AF07C0042C31C80071A766A406C06A47F17525481
EE8FF17551582D95660DFB3DA4F1C6843FCF07A617B27695B1434A161CF502ED
18A1A9A56E71BED51AF62E71AFE04077941893371060EA7B5209F0B2A45CB0DD
0439784710620DB31506ADE702CB2E8C19C43C9696E61B6A0051D61B824ED9AF
2C2879705DCB7B2C761EDCC07A144C303076B78E223EC9D0ACDC1B1F8AB9C8E3
2B920B8933C5B82AE36986E166BF880C0E71D0D76875B8BBC13307F60A7DB8D4
F7900A4A36D323397021349B8BDE5BB6B4CCF8AD82884129A50C7AC632178E8B
049ACFC295F52DDC9BE459A2CD9D55D11A6E12DB06F78900041EB8ED75E460F8
975D93F6DE3891ACD41841DAE28101F9DA265BB2FF786892F86CDECD2AD4E20B
4AB1416CED9DC7AA943198A7BACEB041B6F4D22C055679D875B0F8F34EADAB99
9BD6BE0C4019EDA17D9AB5FCB4D1DC3CE491F9820B23C6CB112AE00085BCDF01
F55ADDEAB4049EE3E9CDA8F565187211484FB6A7C9426B0BBE658F4597F8D740
249AE43A22B043705F21430385DC5D25E8C3F238D3D5B26515EE1C06A7F6941B
70C62BF51FCE779164742524DAFD7C1E1615A865B2A5A61905CE4F80656D5B9C
8FF74E003BE2C59CF9BC1E30CCA29F34E741E675AB364A3747FA626B8A1507A5
91CC33BC96C85D8F53A88C6B11FF1F79C9B21DA22B987D910F3650ECB92B473D
999D61FA23F60759FECFDFAADFF9C50431E5FD7334E761C4E88E71D1A4CDDF98
5E92CA4517CDADF8A906A4C12692B6F8444888228151452821157365739AB136
EF65461E6BCF7594DFEF3447791024030137338CE8E1EFF5523A0D7986887289
822567DF6A239C3BA06FB5D29B84E0CD0A910DF68FC99B1FE69940F790A4925F
6574A7444C9EC03F6A16B5A9E9EDE7F2639D9C5D1FD73EA1D9502DC1D2F4C7ED
94CA892CE7220BD40C78F920294F716BD92B19D582B21CAE830C1415CA704D2A
6287125F958F8CCC13BC3979A266F1A598C036424D0C9829DD819085A0849F14
EB0E7D203DF0A678CAB16C289E834C7673633714B94D04E2815E00809F3E4628
DF184C017FFCA47112325C0B1AC7C52E96DD099D962DB8804F42E558A925849E
A05B259D75034A233CBE9A071B52AD397C5E65F1DB563626C6FF528259DA86C7
E8C244D21FA0CC8DE4948147CB00E04EE066AD753C5A70D31B2C72028BCDBBCC
2C81B6CC03A3F313EC72CD26F48E075C9E8C0B8A65472335F5B18A0FC977FD04
ADB361D9A24D4E1F9902C12624993EB2872BB516B8B784FF04B138119BB6D5A2
6091976A20F034600415777BCBF32020ACFC0B0290C7C8FE968E7BFB39167D4B
38803DD247B5A6C6947A58CD0338119899203C32BFBCDE90A5B99376477085BC
7E763819422598380CE1212B09D9C27181497511A5D2D9697F672E54BFCA9CB3
514566948E8727CF2035
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 5 /diamondmath put
dup 33 /arrowright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
A853F0B32C3E5AB84D5618B20A2368E6CCF24E6635AC36F5912FDE664856D62E
28396E049FB828C803F08478AD134076FC54DCBD62FD91C88AD7CE0DFB8B4EE3
402B214CA01AF48514A8B3821A16F8A4ED22E558AAD15F1A9AA7B142AD376564
5F34AECC218C38DE3195C81438536B89B859B2B7955A640F0414A4EBE4DD2E4A
CA345B28CA7E9946A41CA9300E25A2A49A75F808338D33EB6D5A1DBA0B49C4CD
31197ADE858A529B7D8BD26BE3C1DB0F86376FF4EC204CC6F72AF5E9F1D894BE
30DCCAC6EFCE44E16F07582997CDF0FEA84C23ACE6B191CE3BF6D3BD617BECD2
6F005A058903CE38C1C546FC8CD9737DF261CC63FDCAF4F2B78528B81470DB8D
F4BCA1AE6741F4CAA971161347B127466E99CC51492F00DCC555BE64E7DF3B43
FCB4C9DFDE25407F704E3F6908DF6D29E6A2C1CD7F739D8A880094DBF3AFC78D
B5139A2169D66E6A3058CC35EF49585A4B3B73677BAF3392BBDBC166CFD63CED
DE36F7617D36742E641E5C5D57BEBD5615476C14E4E1BE0B8F1D1ECBFB6BD6E2
43738A384AF87DB497ECDF5FA93C471410321441B0AA23697841306B09BB5F81
B1F226631A309CA1DD1C2589EA58D9866AED086786D05D4E5B3DF15F29D32F1B
C3AC6198D7918180867858986A9C5E491E471A1BA62DAE5E3CF0DD8CB91E9E94
56A8975E5AAEBB76C85DFE4D2985CA28080DA658
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /acute put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 109 /m put
dup 111 /o put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE518B2CF2EDE51F81
38244BC64548AC3433A80B86D6A0CA26D77F403C06D65B7394BF1FC7D06D37A5
E70ACD844E3367DE4DB71312CBB85ADD21D5A1F99BB8427F252D90ABB66D7154
EA5AF4A165DF6415A0880AE784071E6B3E2101F0B663DE14DB1ABF8B7CE0E6D9
D24F9CDD9F80028D37C9CB4067A28D41E879AEFECDA71F649EB3C250BFF809D8
1E427E3BF24E85C75F080D93E0314883988B3A4A2B72A1B4A3D2189AB6ECFFBB
C58151AF05AE335200711ED945E18B4BBCE24A8A162BD9BB26137253BA8B5819
41E759A7CA7CBA129BAAD438E87189F2F6AE7C86F4EA099DEB23705A500332A7
4F141D8778EAF3910486B2EA25AAD16B60DD804D0E5BAB0FEBB77BC95EDED08D
B8941E040D99E8F44E70FF842306ACCF65C0AC9673859DB9C3A724238CB8CE62
255BAF0145692EE3B52643A0DE3E667AD03EEF6C753F57E34AECAB0CFEC7B07A
150D7151E57BB3A026D50C7A88DF5F480147D87DFEFE463F76122EEB5128796E
46CB0AF4B537987C2ED552B37D83F393222659DB735F2A293159AD84AF082B95
6F1454471FC36D805485D619D58FC53FBD6E3F72660ABA559B91ECDEFB267268
86A75650C3919962B0139409A29F5E3FA70B901CD5D2C49144778CFFF1D5B63E
099C92AABDAA73D54689812279C95FB7A4F7E840DD53DD3197A4E6D3099446FA
C0032FD40411E8F3300A8A8934B5216B01D916D41DDB32513DC4ACFCEFE43D6B
22FEF13D3567B047C6B35C477ACF2E172701FDB0FFFBE01DD58D7E54398EF4AF
DA5A404E194BCC39BEADEE5C76D7CD1E602793B950256F25871A9760C80B1EB4
D1E1179C390BC240DA061C9D539B20F4FCFB72DD0C1E860DEA2988E749819787
F04BA7A9CC3EDBF9CDE46895FE31EF0F8DEB63E295E8826BF920C8FEAE3B2080
8C98DC43DB22C6537028798198E2D3B0453ED725B774686310F635AE6153D9E1
8A0514882D4CCFE9D2D2465513E42E548F64A50ED78AEC9D62E0F9CF61EBFC9E
EF7E90CF0F8A4B01F9F104FDDC660327BC1C2CC6028E5F304B32A46CB8E92C56
78BA7BCA00EA900B237CCD5AF00EE2F085B06BFE3A60452F1941ECFA4B41004A
B230A276087FFAA689D9C697602424CC86C82456FB8BADFE275C7B24275AAE27
F07800A56620BBF75F6A59807B6A3E546CA5DE98937770A2258EDAF9CC8FA09F
0886EB93711F2A49C15D5E5B473345AF316C64F9D27F4FBCCAD57D7D0D0B1A0F
BA8E217CDBFAD1144AE2CB3B276FC7A03B593C2123C513B4202A3010FE88793C
FCFCA9DAE4E27C9A6A4EA27E3521C498D6081506636F786A20316B992FDF4317
1DC76D8A836C098EF2593BDC25BDD46EF192F5D04E826FABD5786F929BFAF65B
9F828023CFB13133DC65D9A7C4AB7FE9FCA7276F30506AE63335C45C7158D893
12F84726F3677654FBFFA4E3A260EF324A259293DB485A3997A170DAE50451FC
90F481BA49B9B7B721D7440302D3F58AB76D4FE3BB3BC7932CE9A59A36514C22
762F59C6853342FD9AAC09E00DE3ADBFC1FEE939D24196218BE28D184F6FF151
26CBD0888C9EEDBD850B53655760FF882E061CA00527ADE73E8C72692DC12B53
503EF1433CACE72E04427C573F3B13590848DD8EFA3A7DC720323942B77D1283
637801042D29F9FA78CDB32A00E09BDB77025C0A978B41D763734D2D03134962
D8628032161D54A462A9BEB8BE1F805EE67C88DAE02A462377E3C34C5CF5E8B3
980359B594C42EFE63471DE6457A91624203BC9932A4E49872C2CEF664ECFD1D
04331C07AE954D0E9CA4FB1B34CC67D4756856651BB766773D93984440983E29
97DE91D0D3F4DE56356F86ADF7D4FD2453874D3D4E5ECD9B40E9D00C5A16EB98
0791CF2426AD70CF8FF6D1B7A7404D8335F0519F8A1CA1B2BD4BFBFFBB598323
C551E88F1AE53B00A20CE15063C794B0DAA79BE8E129E7F5C5AD1B7495C1BC9C
C00EF177EC0C2D3AAD49BD2A0BF511A722FDCCD19473302F25F737D807E2CB59
BD01DF33BD1851C532625092B435C76F68B6C4336583F1736BA41D0AF9AEB98C
A289DBECCA3D62CF8656289C07A3EFEFD6F5424F19E26B80374205EB4BAD84BF
66FBE5CEC1281F9674E4273F7A28A16A343214089692C8B5C2BD542B3D451577
D7CC62FDEA43428C6F79C332342E15F75B08A6D6AE646132032C4DA87E55DF77
AEA448765D626DEE1534F86641F2DE527126363C9A3AEDC52E192282E96A5ABB
D557EBEA3230AD2897BB77B65B032EF345D1FAEB3B913BF6150429F349943E45
D8237138BD515A8A388DBB38F80F74B6BE3032BB8348B0604AB9C613144DCF2D
5C304D87E074CAA094009F227047829702200504F9DAB24D8508BF3106ABE726
E33FE40D5CCE1F0B506596CB6561CD460DC1080040F5D2C1998B51D49CE92174
2A12D19FD55E853FF6635A9BA0CE29159E1D4AE37C910AC1A65B60D1AAEB81BE
D02D30E99F0D8F7F5711DBA10D9F5FCC245B0F54F4088BE3130839F3F7A080F2
8CA8F662C9850F72473F24F37CDEE0D880D2427D670305EAF5B1579E871FDE42
5A0AA572498016AFEB4B652DF6A4537FC252179816E49B5E23C2570CAF32B321
6B17BD5C411178CD0DEBA5624C1D5EA94DF1F0DBB3869B744CCCFB29C5DA070F
181F8DA345574ECB3F92360878D62CF4712683C493691CA69CA1A46C02C5BC7E
68BB5FBC64336B912DAF9A0DD8587BA20E0CCADFC9489CF6BF32D2A3D305B3EB
EE402AC2178EB9ACEF3CEA12A6E3CA57178D14CC1284A2105B07299CD8F714FD
63830DDFCBE8CAAF41BA1D9D9D165050E19EE0884A5349ADDC899783E9DB738A
EDDC57E5DA2EDF35E89AFE23C3882BB3538E15B9CBCF13738E35732216736F12
E3E76D416DE43182306B976F7493DD611F3CE69BCAD8410DC9787A8C558FF589
9AFAA9B60FAF8B43F940932FEB1B113270F9EE9889AF2DEDFE0A536C2810AA84
3C0B8BE409368684A137D20FE6C5949E50BF2533ACA643785CBCA1DC271578AC
E49FE2D27097B091DC0C957F3D4A05DADFDE29B53B0B1EA301EE8BF7F102D69F
47EE35F889A7107E949A6BB7FD8728CF47A183D6C68DD3D62F25E88429CE295F
AEB120C5A23E03EBEAA6BC4BDC580CBC6413CFB4634CDEB6AC1B40436C89AE61
E8487163AB47C8747043426D05AF2E8D662A759B0EE8C3FE9B98E5E093311F33
68A7F968C41FB98834D499749B363F4B77BB6F51BF8B7C18BCC2B8EAC4FD60F5
3907E6E1CA2FEE6359841860CBA2B09A8E8D76BD5BE8A8B71E51372A66ED672F
15DE10EF039E5D382B11FA870CD404D59321F2ABBDA0AFF42BA11EA6CDC9B503
148B2536107EB91BC3232E709CB65997EBD308E2F091A48D7D19DDC9027DF732
3A4840C0F68B6BC0A2C135D8FC8182CB17959478EA41B3250D5532CC0E411CDA
75C4C5C786F0B59BB1261F05937A71AA076A160D1B6A768E724DE3ED4DF8C22B
8B42C4612DA8EBAFCA56C3FE407D8C68FB551A30E105BC58E02D6EEC1FFB067E
BC330875B194826E45F05DC3604D7B6D95549E580C5B3457EE07B65520AAC8F0
731A063E9AB3C954AB85FA20974BA2D2BA593ACB1F3FE5D75A91B83660E6B568
6834E50F69AEEB15CFFCD325E1CC3F42708E68D68EBE8D477BB38E26AB7D540E
04B954E1E8670FF7B6FAF5EB3362FBC2E47652F02EE5E5CED4CD83FCCC0D3C3F
DEB3A79288F4484E792A5F3978D13289847B65D114CAFFB65BA2A7EFFC4D719F
725037B233AF1D4B072A27574F8BA7D9BD2108F4BD67B16CA46A592142C520C6
CB4EF3772773AA738CD70882A5FF1186ABF60DC264A57DAC8630F2CC13C57A64
B05DB111D10CF7D62C65E0C4DBD46432C235BA247D66CFC572A1E2E0A84B7E64
37F2AFFA12312B39B4923A72E79B45FF37C2948DCBFDE0989E4CC3BF7B295FB8
E3517C1BAC16BF5E7C09AB1829969904C019184AA7C673AA0E69CA82D6947CF9
1A70EBB65A617935230A933999B6F63D31357B40BDFBC45EADB89354A3E59537
47FD262A73D0C4BDBE13614DAEEB86A1A67CD7578CB6CF4ED156A92344D94E75
561006416B2C10D31B799DFDB83C563BD90F1FC584BE8811F82AD4A40E9BB259
A44874FB7952847C5E7064D7CB11998ECD8212932A647018BFC84C954D011831
6B655462C274C1277B7D8DE5756F46136D908D1DDDC6D7AD93D73F9122295C99
3F3B1C2F0F18816323009CCFD9E22FD35D3EB545AB638C651AD6DE7F6A9FA7FA
7C65074B03E7F474F7FC9CE65A606244C2AA4B1134043903E3E2BED57956C32F
F5F132FB45D458D195880A13A9668917641E24C039A19D573BB077085030DEF1
603551811BC893135ED140C60720FB9CD3A62B87A90E234F5A3E195363B16460
CAE12610DF133BB863EAF32A594F9D1DE0C258C644F224340E7003AC7638CD18
771CEF93D64FE10D4F105399A219336DFC1CBF729BD72A35A95F031AAA9EFFFE
11471853D9FAE837EF1DE18D6B11B3FDEF73CAF8C7806A5D2A68A0D7DE857747
FEE61994256CEB6A34FD8413203E9522E0FE2503B158E83C1B560B281F07BAA0
90665BE81BFB6E5157FED9E9D2A53148BAD4D1C2570F62E25594550011319D98
C8E6A43EC4A98FCE9EA1D40E58A5AE29B9A41D7849CC5E92620D141058FF2484
ED6952F2170520DB92A4ECB3DF07AB0950154BF5605777D688CD4642FFBC3A2F
93D99DFBC7E7DBD5205921274055A6A629E04206B6BFFCE4B01FDE41838061C0
0A5C026FF6D8BA50DBAFF339D2EE4F4C91CABEB36EAE07759C033F3D1E0D8CCE
EB8F3D2EB63785D92FE852D5A30BABB68198E13DAF28113E866F36060545B2F0
627F757DBF31D8551334865009B1549897C06E13CCEF02A32E1DB973AE34B6D9
D97F57BF5895F00DD09D2F3FACA16BEF928D09519CBCD066C6E77EEA0113D7EF
0EE2A1D9EF6D4C10FF948F55DFFD2188A64C275E575EF8E7B7C07FF4BB510D3B
73EC4BB0DB5E211E0B6C567BC8368EE0FDA9EF8B2DC17F859F86F57D31B263C7
C6B54365539ACF3BD0F0726BA5371B8A7EFCD1FCEEE9665495B5991C6E65374F
683E3212321A539264C661923ED75334466F796374361C4C73DAEF606861671D
6AC1D7D12248B1AE221750CC61A80CA5B7A160DBFD6249294EA237003913BEAF
56CF906B01DD37C11A12A6E9281D633C39E9D06FA26B629BF8D81360B277DC97
BE58137ABEFE26973657EA8FC869A8E8ED485CC61E4CB4FF2AB9C8B3EDBB9A16
1D08560BE531D51D9B21198D2AD9A6F9A2D5901F180C2B1BDD8F0C3298CDEAB8
FD48D7CA4C08EA055866C46165A02B640E10322A32BD5E8E60284D22951BAC7D
5AB68724096598C1E7AB8F15C5D3A8A19D46B3FF7CD0B2E10043435B0B8A5C78
E24B57C9789694560D539DE2792D0C62CFB5EE124281476FB3D2F4DDA7D39264
5B63068DA2CA1AB6B90C4F640A6BC542EFA6D61D9795DF4AF11071451A49EFD1
979D1C65FB042F4745E510D40CC6A9992CD27F97DFF71AB04570828128A14E42
3ADAA0B17FE67D76B7D87968B7034C5512B206406EF43C524FAAABC95274DB1F
B74CED69857424FB776635D3D017EE9469E0B39A13D4FA1C7A47C0B32176FE65
B757DBA882D49785429A7A25EDFBB80F3EBD078D35C431876A78DD30CE109664
ACC35FE76823B0108A69E50969C6C4735098B5CDCA5A55270487DC00BA43657D
34333094A740453723BEB9CCFA6276847C72F8B41BF8BE1E4F8F9EDCEEDA002E
3C903BFA7A97D9FECD6FF24EABCFF27ED2E0C6C879F15FDA1A7F47177FE50C5E
4BBF2DF598F5E2B64FE6F68235B11DC2B8F1F8109F4CF8E839E5FC7CEE780F89
47F96825BF5C84B70FC2585ABFAA39175207B44695968F4B9D91439122302233
60E22078460EF51784DA23C2D293A8663651EFEABB1BB57DD24D0178183D3358
B9075757EBEBFFDAE7ADDF920A9094739E8C031AED4ED0D75FA2FD30B1696E5B
752A93578C5891D08AE62BA0255B4E925444FB836AFA95CEB010D8BF8C2C33C2
EE91CBAFA1174FD3D44207B1C03FE8C89F693A6638AC1BEBA256A7FFDA1CA3F0
E94EC5F18016425555624CB1CC331CC6460959E3EAF137503C8DA81D2A609BE2
004C3E0CEC28C365AE23301A2500861B04127DCFE95DC660F26CAE9D7454CFD2
6F427ECD86519D3E3CB6EEC808464B36413E8DC2C675FAC9014B752A0DBF3173
97C371FD336A9AF6D6957C4F208FB7ACA34E2F0C1C1757E41A502770ABCE8A60
78DF9FC513B7229A52DF3D3FCA06035F5347DD84E6A9FF4434A0596DFADACCC0
54E3DBA65BE8E6840CED4838975D2C43DDAE13EC3124A250233F4F41D8D19A38
D49DAF4BB5EFE3154B9227AB5D9DB40E01E63BE277F51AA4BD4FB9BF57DF4BCF
3FE13702CB068B0B7B5F0C3B1CB067BE38D0F4DD0B7D162BCD9FAB3CFC678508
6F9F076852BBB970CEE0EBC2520501E8C4F3FD6686B7806CE8F865EBAFB41B4C
F925B0CBC1230ED844CD0434BA4F4A3B79D8734C4D708F78BF5BC6F5A64578FA
202BD689CCFFF3022CA7C9CD80CAB14E1F8CD3D196DC9E0B26A9D257480C9C66
6C67DE3B7EE356437711C0577BDC3670D0BC184CD0587018C711A8CA831C56F1
1BC4A590B99F85C79BE169EB3E9469840FF4D0849C0217295A413D50F15E7199
27F5C48DF75C1675D8A7A220898040788262D06206891DE306B5370DBD2F4D67
3E9FD7274AFC02312C1A131BA231BE17CD7BF81969D7B225BC72085879DAD844
D519FB9E88A99DE9A6F57A95CAEA4B78BB477F50B521B85963F5054BFEEB7EC4
0E427DA33C211EBB8F976367BB5EF623F1DC6C82984F68EF0ACD174E72D18547
41C4A56FEDB1E458CBA88493A0F4B1F2E244374BF93043255A990F52206BE34C
D72C5D19C79F83A7FACAB62914A6F6F0A60193293701F38309F1B82BD49D2EB1
5C5F3943B18E96B50FF384300AF8141A3D3D9057C7728C27816F08F1BC91CC47
0497A9D0F1E8FC29AB29C6BD4AC43B92C3AF2B5717B148E47E4005C7158D23AF
4E6131497BFE9EFD0DC87BB8E5682658AC6F8AE0958018913B6F76E7F7BA4490
9EEBAC58147AE452A2EDE0FD7B11AE40A4E6FB2AE026EABCB1291E84FFD3D055
794132EEAAE10962ED8C1731C709DDA8457EE8ECE02CBEA20B8087D89C256AD8
E05D11156CB1CFB663E16C3E707184836D4E2ECAFDCBBE1B52F18F84C7F069B8
5DB18D239447E69AE72D3E4D54AA3B124129A4903CF771774E0892F9CF37E798
6C35452E99990A10F48FD0807955736D443A8D6A37F5B1CDB0C441B7B6C014AD
2D19310A7939C0B2288DC050896B4DBF1956B70DB5BE197031E689A8B060E1D1
61308FE48D8A05D31FE374AAFF429DC57860A76CE70B7151000E3064B80A3681
35D84DB61EB1D74EB21AD437C3F0FBFDD0FA750996630F615DD92A73EB2EDAE8
228F1C69338B1F51C9FE1A942D62BBA25F423E34BAA23762066A4BBEE67775DD
EB1095B18EC13894DEB6D201BD133C2BA82D9EB5324E0498CAEC803FE10590CB
9FE247465ABB7DD817A43B8B44B3667E582FA8B3995BE2F03300A9007E3DA5EC
5C00BE507137C64C7BDBB772F5F2E467404DE99DD3C9D07EB94060658F26BA69
6DA14E3A1B45E8AE7561E9C9AC43DA91C0995C769D41A52D0DF5B9F33031FB72
D997BAEB534848A04473940ED2BAC30D9658D1A5ADBD9C76772377BECF9518B2
D9A15C764AAE85030E223AFBA594960FDE8E9DE72CB9BAFBE5D2533E3ECC42B6
38F8CFFD772BCB929FADB57F6E73B1FC8601801CD529C6BE126D72484D6D6972
B41783173FB0F9021CEA2D0952C3A60091C88F6611A6C3B82448468C4F2F37D7
A7718277F5A2332D9A7C14472392966AC1F208EA3F25C09A03952E136C8E7617
D09B5D618A438571AED72F02E1B2DF9ACE67076045F2D6EB7B5D3D10C74864EA
C70F8E3CC6F9A8F5F5F15A102432FD3CADE143859B10562E9ABCD18F12CBE04D
A03D5DD4CC83509981375B7653BD7F1CBD678C322BD6AAD5A32828CCC18E0723
B375E12119AB6CEC4119FC9D95C894E08FDD7254109C058AA764EC858A04F60D
1FBC4643469E79E7E9716F6ACF47A03D836567AEFC134F19E9AB318FDD432DAA
1CC6FBEDAE49733F0CB6910A4072C4741B2071142FBA4E35671CC67ABBB13381
B88AFAA5473F9D57AA3376D5A810C2E9DB0C8C995F436C47B2443B069BE2AB36
0A79E213527B0B365961300BCF3152B26D3BD18E755E0350B204284016D8D607
4ECA33348388900C7FB94B14F63C5B07AA70807C821A1AE3B10A75E5C8773D0E
148F575D1C2E40839EAEA17EAB7BE60CA3A36D46DFE22EA750BAEC2AD8DC82E3
C04D4012F6DACC9043DE1996A80A113211ED0BB7F96809D0746F9852EB9D72EB
73E2B3B337822C64459B2F5B48F355C7ADD72E347FB30684589202E54698CA86
767D28811BC38EA617E15E7A051D5895EA34AFD002BFA40E9D426704C9777358
871DB729F435E5ABEFB429E49F49CC0F1EBA644EBEA7A44F168A78E3E693DFF1
5213A9E2DD7410BB9E4EE04EDDC2B109CDE87378B7E6D4064E18B42A51EDA464
4DE57F3442A9EA51A27520E344F74A722C05644840865A4218078D6EC4C3EFE2
844730843DDF7572220D165A8F4079F9B386E048F8E1F9D2381C3A11750B8EC5
31A57FF21F7D4F5C94A5EB14CB7513E05A9895495066209ABD9898857ABDB70C
7251D0A8E0081BD886F82B1985161E2B232E87C320273A32F6DD409D270A3C16
0D5D7FDC8BD419CC3C67E65CC5F7A2E2E881D1E66B875B3B4AA47D2D2E5AF4DD
8F5BFC4251A9235673F2EBAC0CAEDA64C650DDA888267B471199D6293023DBCD
CF3785CF41D7F1DB660F0AFBE34D5665947FC72A3530A5772F5DAA2B52989375
7F191CAB62A93189093A73470B27A13C795300CDCF2DF5E02769CDE79902B2A2
E6C594770619C4F550C05FB7F69F69922B2B22BA7E4373DC1B719B888E9EBB22
B852C9ADB2E9FD62F7879D063B8B8044F8FE4BD168DE5F5DE8761D49274993EF
346A3FF1A6B3CAA7994DA7BF833BCD819E362C26436433AAD855F75B229EFBAF
D7D72D1C3222A6F8269D2F4B9B3EC6298025CCF4F952767CE6E3B855600313FA
D301F4BFD1C8ED5B4D1D2ACCC357CC32A78196B0FC4778C804C17B5BCBF1FD1D
6AF350FA894CE96218A3086308373C1098BBE7D3E2E21C57EEA4C65E463AC396
A7091869A78AB99E4612B8F6D6FADF9D10AC954B9FE730A874E4FE9076800E97
3CB84FD2A549E82C76E47E5B329CCB6AE2E40973CE0D0151A5F84947E1956E27
E464C47BA8482CB01CBF542C885E15E9AFB44762E5DDF858157B94D128623954
0DCA4AB90D595FBC8F9C9D686DEA9BEEA75466C29752775F975B820FCC6DD0D5
D00DA8F35CBF7A5CF10D554130A9E451F1682ED7717E34DCC7CF6132CBE3F6E1
88B1EEE569E5765AB145C40D772380D4871B8F73D54F66A88F5A6753BB9B85D0
CAED08F086D915830BCB39F5CD6326CE2F1EF355AA6E29E70F7D5BD9D65B79C3
8154BF1A7B7342B04810FAEABB8A97F33DBFA268B677FFF97475C26A671CFDA2
D65FD1E319B5B524A01C7628D046FBDE5AB10D2B227474198CAC6F7549CD60A6
76FD98FC1F840B2938CA030D61617F0585A0FD023AD8D8BD400A5BA36C3D5A1F
7CB22FECC277FB1EFF126AD5772E19A45E8480DB2CC963BD64A9591D345D109D
F9F7266E7212C5A0B5CAA6FF8F14FE1A4ABB406A256E5877ABC573FEA61E9F34
22558053051492ADB51EC95DF84E87B7E8E9FE0CCE139237DC21E3EAA59A0421
217B7FF40F2AFC8E57471D34BF6D15BC52E7FD23280F9C2F1A035325F7741C6E
894073F72D5937C9AEF164C9A7E167298D21F57A0DBBB187EEA4D87BC8CA2DD8
63C43B4AAC3A60584710F582882BBBDF330D18C02610EB63DFD55E4319D961BA
DAD75295B86660BB0C8000F9555D1BB3C8F030205CE70187151BE64F898D0A0B
1ADA66CE51270843C9B6C848CA33F272C43F6A7E5B87A6DBECD061030DF9854A
F80041603CE71AD9521251E51C64D15B7A1A3B57AE9872A5AF85BA6D2F145BE8
BC000F2245450801BA3552BCD5FDA90E695DE7D4BF48CA3F68720C13236A6151
4585B4FDFABE120B82B65CAE2F970A73ED39C07B862F610F962EC3634329B572
10DEF22CE41D655B4E90BDEBE599611EC1FB63CAF87F109D3025472AD4C9FAA8
09B872D361D93F8185376FB5BDE625A6BD92FC570309303AEE525D0BE1DFD8E2
4493539A7F14EA80FB688BC2E904C6B8DCDC27D61EFDC873D0F8BC9142
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY5
%!PS-AdobeFont-1.0: CMSY5 003.002
%%Title: CMSY5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY5 known{/CMSY5 findfont dup/UniqueID known{dup
/UniqueID get 5096646 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY5 def
/FontBBox {21 -944 1448 791 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY5.) readonly def
/FullName (CMSY5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 28 /lessmuch put
dup 29 /greatermuch put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D77D0DAC26A1FA54
D2471EE9BE33D2E87853491D634A3F05B7672519E09291AC2D08D95BFB80CABC
FA89042E94FED8DC9929ECEFAF741D273687B2127F5B80ED7D16F146894841D5
1A80D8085E27114AC35CD5E578760D8982CF4D8587FD3385FE50E21A253A37E2
AB628DF3500FD2C21BCCBC8C0B6AD3AE21DE63AE6586DB06B3FB1966625EBF52
90FEBA873F819AB480FF994D80C01DE1E2F28C665E74FACFF98B2972CCCAD279
96F2EFF1113CDA922985E095249765989A4C6A92A76340DCFA07AFF34AC5E177
09B739A72D0D1EAE1A6164F3AA0DF1651EFED335B68C8465E1A61025235D4A5A
C3661B9C0456C35C770242149B3B98A29784BF71030C7DBB2C13958E5CC263AE
FEAEB9FBA84E06D772E94A494B60E32AB8FF862E57175DB17F6162DFFED60EF2
D46FB78237E778C7321ED79FAC137945A46B2D90B778DA46308899577BC7844E
3E09303AB2DD1F64D58756DAD62ADE22C62DE6C9BDA77CB12B1FCE3374CFA442
E0CABC7C9AE699CD955077A7268FA0FD3FF5EEDE605990F0DF0078799F5CED44
6ABDB2E7D9214BECB8B2CBCF328F7F5B8F346B55C9BA5C785A252DA59602B6DF
186D23D5D90556EB52D7C0B44E4A9A189C180FA213E12E9838F0B2902779E289
3E2B7DF45A01F36D88C9CB814AE5D41064030D37393DDD7D5974C1A27EBEC064
B0403898996140AB14E6EF1B48D555A1C4DE29AD0C5D284988B92917442D2C61
3B15E55CD91837B0496FEBB51486CEA7DFD9787AEB484BE887111903124340C0
EB034A75292E59CC038E75E1DDB0027407492EEF92D70E0303BD7B2703E131FE
BA91B289003B7E5BF85D2E5E130CB37949AEE51EA57FD424402B0BEEDEDEB5C3
E23643F3100312F94C157C98939EA2312B11DE0A683D4018FFBA2864626C9449
0D656EB0C79246A7F5ACDF442A55C9188D8F3FA64A9B6BFACD8F81D7546E0CD4
3C5CC653CE9514306439AA2BD2FF2B965EA69A30331E8D65056D919476867463
97DAFADD16BF9366E95C7C4276093B639541F7AFC9AF745260685D84DD3095D4
1B925540372ABFB68CEF211D65756FE0E99733B5DB40D5A42016E8715208D4B0
7A120EEB34147BD179FAFA94D0880121D1C6B27F94965ECC1A93D1B73AC1B3B7
191B7B3CD4F2E0E52A3893255C4B3F1A70A0ED36DAD262538E02E8A227F6D6A1
8A047A91ED6409F1E0D9B40698C817918AA47B95A082E3394AC42DE93BF9CB28
68E63F3363FDCDB014E89990C50210750E8442D9555B0A796B243AB03190B2BD
57C39F233318B6474F1B3CCE31C21BEF68FF5E3F866789041910B1B11ACEB75F
146BB1A162AEFB268700C2DFBD9752BCF6F136ACAE815C0AA4147AA2CE61D282
1BA716B693E2F713D0653B17C9381DA86E1CFCDD1B1FB9A72ABDA1AB2BCAD30E
A4EAB601BE3F8EB95B32DCF5DD114683AA64E14F9A958D16CC6DAC7DC3ED651D
603959B0265FD36F8DA41F3173A708D88C73EEA1533CE48C2AB26B4DB7CFA662
A8A463CC178C31D342EF907B3B44751859F2BD510F1CA93D61AD39E8E5D7785D
D465C47F3EDFAC22DC2B5DD93B2F752EB5482E138A0A1E5CD62747E0F524E29C
A56E58A6BA543CB3AE051F4D90891B65712B63DB197E60275EAF5975007D09B7
95F916615F97C50D8FDCFB67F1B677DC5139E6F46ABA079AC552F27F507CAE8E
E5C04D31ECDD6CF5E8A447846375C1748651245EB9C780D87FFF162AEBCC9E0B
155B318CBF420DF0CFBAA5669C2DBC81B55B5042514B05B7B82FCC827E21462B
BC8F8FA96E2CC4441E07E0901EA72495013400453E49B7D243FEF528E4078AB6
49277EE77C81B9167D2EE1961AE265A8C01F7562ECDC47D9FEC391097474EF8E
54A5A7FE6C98A81ED29D42A3D54326219F638C92AF8A087607CA2A2A80CB1183
8571CD40199FBDB9D70AD83979C739F533359FB2DF0AC4AE3A0E9DFE735ADE9D
6E29B3F6DB9A5B11418E9C860EFDBCB0E49BB900BBCC85860100F1FFA5AC07B5
14F37C5AE5E1A35168BC48BA7012A297C7771789302AF44765A6DBCFDD418172
62DF3A4785385CC9D055A9B4FFF373041D9F5E9DA83BC1C5F3265E49BA624B82
F15BC17B135D8723324865A9CCDD2EF3A0F64C17914F9B238C946FBCABD92B30
AF90191996ABF2E4972AA9D0EF7B64AD0126D07714D4059CE032905BDF877D7C
3440C374D7B5D0073E13ECDF3DEF2938EAC1908CC60D0E5EF5F52AE8A1B0BD34
8A454CDA66E7340783A7152CCD74EAAD4112C7D70F3C867E140988BB610CCA20
F1BF5E3DA8097509CAB419E01CA47D449C50EB8FC6DBB75AE2C5312BBCC5CA91
86B221536517CAA6870429B65069FE3CBF3FFFB5631B57597E5C0C3E39199FF6
4DC35B155A759CBFAA96409BAFC7EDFF03D2671F0396641446605843CA4AA36A
15070DE52DDBFF487C5398CF7604DE843F32CAB26A96F8A9DCD03F3DCAA57E47
6F0D36CDA34B96B7F4986275D79A1BC1954D2BC0BE1509709E40FF23B84F8D65
3DE1D1D8A2AD94AE3DE202D62993EC4BC5AF66CE512EFFE7CF39028BCEC1667D
8782111D9D503BFA45E4960E6197D8CB5697B1662BD2D991532074AF5491DDC3
2EC52B4E5AF9B2DAA5D5E4CB644BED25DACC3F445E4C7D58A1E9737F4EC04A79
238E3578311D88EE6D067725C580A146FF150871FAB2B366B5AFE5CE3B386EF2
EFB540348505A1749BB34586851FB2FEDA92ECC395B618911E1D00B427251B05
15B9E42AC1F0F239827B938EAB8CD20FF9705F4D7FB5F5F911CED9EE8FDABE8B
3C3442DC3B716C3686E1B0573EAE3905C3964ACB336FA3C38B17F229EA10F036
ADDE7FA5CFC01FAAD33F75A125F52AD395C7DBD3AB6F2321D7B5B55F0ED237CC
61FA8278FFF9956C64B8ACBE357D4603CC4599BFA198AEC01E4F4AE047754C16
E155C8FD09C996D9B5EECDB243FA48B0CED1F0882103729EAECDDB9523D6BC22
0AA1545814579043F0DDA2D7F015E56C399EA3C644A15BA6B144361449609C40
A4986E00918A7B44BB06E7090F73FFBE4EE3E051121939EAB0349EE84715DE36
FB187C50AFD74C44C25BE4B7037466CD60F211FFD7044245159505196B0E181C
0177F14D0B486CDFB767708C171FE513AAFA2B60665CA55B1E5F9E0304B63666
3BF44EC4F5B7DA58891081F78B37BE8453E86AF3557B97D8B4969CCDE2DFD255
91FB4D9CD41E5F931751BDF7FC8C700C633470064C0BB00FE5745918A69CE430
D86FE46DEC014C019C06621B2EC6C3F196A8A5E1E613AD8B28A9D0B981C11A29
4AD11CD3A46D089F8EF7D8298971A5F9F6F139CA794AB4BF0AAB2D4D428A8E4D
B80EC134CC7CD74D3F08E7BC8AC5B1846E1E5DBFA97AE4DB885286C7D06B4CF8
948E889ED85E8703CB97D7AE19E1201EEA205157BEEFAA3E17B8BDDFD01BDB17
691010A662280C279942158F68BD351B235EA4EBE24D54C0055A19A3F230F353
77202A1D7BE371010624CB741D4BA2E690B33FE582D666E9788A3E3348A0E100
2843E0B2FDEE05DF75F4D49DFE2B69BE79E97DA1B3638289395444F1CF6CDAB5
5E6EEBB6F907807B913290C25D8AA546B121EA90DD113588011DBF01B7F88AA9
B9CA9731532478D3BA57786817C1D31D8C51C307D7F500F1B58C2CEC9594E5C4
E5E7239D90C8B5B4A81F95C048272A2C05EF0613463E4094E922F7326815EF3E
6E82D5A36840A76B1BB25185CD66B05FF2D140E0F22CFF73EB3F57732E935BA6
8C64BB6809E1B45089273527834789637621793414B6853A1C301612920E3F91
458D043CC1B6CDA271864FD4CCE585FDF025FAD217F975FC36FAF8B79A6551DE
AC3863E25DE972E2A4AD997E77A2C05A1A14152BCFDEAF40072A0AD952A3944B
AB12D66ED3C408DD104B8638D67417D2A95A87E226A03C28181047CF5BE58409
7D07D2529BF867BB61ACFD68F817BCA73815F787162614EB926563EE2F8629FA
6BEBC05465458A03C2A8673A3CFF7552855E082A7B5C2D4101A1B96449071485
279C1EC56610507DF786427B4E4D949BDC9127C2802451F3B21D60D5827E5B7D
0A683F4402725547EEBE27C38839876A3B1B7FE0D7107D6E2292631D1B9EFC79
87D05342972EEE2C413568BA971AF56A2D4D89C7C0D0120AD504D444655CFF3C
957D5EF19169401CAAA2C4C144FF87AC7DD3451A63CE796B8F6C600F913F55A5
A74B928AD676ED097740BDA578DA299F42CB7B7334BD2281E403129866031EEA
1219E7F9BBA230D049EEF401CEB412BF7FB58FB2F9B7D1E47F0D774956B803E2
872A7A5A38E5B7EC4A225C73522EFCE6E98E3EDA3BB402BC5BBBA209074BD2A8
C856290D01A092160E8FB0D9EF324776AD39D7016C63A500D0839E670009F4C0
20F033554B6B7CCAB7BF60494431E4F2755E4CD966ADC7A078D434FA59E5E49B
9903F4E722ED169CC3D0FADE874E3141CD47C69BAFA3183BEA4F37B388F4F48B
7D143D4B79CC5E701EEB350447D9600D39A7C03A25B5B8B6A5A7284A8DB4969C
CDE2C99C39EC07BD8559A45CB5AF23B849C1826713828F43DF265068950DDADF
3B584B90748657609A89008187BDE4286F95694D01760260274A23A41FA66A78
773902ADDAD18F98F045FF7D20AD20EB685C145D44237EDA272619EA9AB71497
DC8BBE9EEED31EA77C9410FE650C65A6CA71F0E72E7D83BBCC0A59DCEDA6399D
64A8F4865811A637838445D84D97204CA7A918DD476471A598D7536276C0F0D1
F0A88D8BCCA56409342C1FF678CFF90FC7B287C36CE682E1B200B54B2CCB12DB
D1DC9BB4E1CDE2B9B6BD4B80DC226E10FCF20A9E7878A16EDFF37FB874E4868B
A9F1C452EAA7126E81763A2DE2B502132046322BE26140F04FEB0E7167920679
FE8618E1AC5C03360AD3D8B5E913E1CF0C1BE9E446DFB050C3978165838278DD
23D17DFDC85DC7B168F173D0945D110976084CB27B6F8AB2D22410DB05BD345D
E4E38CC7EDCBAE36CCBAC590DA5C12D969D51B847A1460F4FAEE7D648818D26F
20FFE485D842C2088258F4F0B1FDCA46A7110645C25E3A31C4E6986C220985A5
DECCA30BAA3A4B5CE0152B8A9D68B1FD67F21050A87BDAE6B665036B9C73953A
11B16AA3285456220D09A03DCD8402C06A2BB18717B1AEA7594F748817176E12
87E685FE70E28C0382EAE8948A6E9FC2F46E2B70DAB208611DFD5A5D97D39CCA
8F9AD9A171DF53CAA6E3E5AE87257561BE15E3BB21779397A30AD4B22A1A1EBA
4B7235F59EEEC1FAB7294D521EC1E36723A4D7BA007DA4239C05F0E6DE546D5C
7A58CCD00F6AC96C20B7182CCCE3E5937D7A64F7CCD52A107BB8092D5F95A8A0
589B2DC542511DC89A0EEEF23E711C7444BDF95F64CF486F158CA162138A36DF
5400A5D03AE62A945373E95840F6D6C7BCCC4FE65382584A4DB36D23FBA6562E
1F3AFCDEF27AED61245EF880426B14B3DB5D9731039FB98F2F51094CD7D5EC78
1F8B03F07064CED40D139BD04C868B1E51A994731EDBA98E7D678A07F7AF6E56
92586848C58ABFEF378F5C1B4C3E20BA860BC7310B9AC48F2143B5495F9B3A35
85C9AD5AFEB23DF6376EE78BCCE054C8FAA925965E38EEA6F68CE1B5329D9DD4
DAB3F3342C6E6D9E0C70E63989DE8DD2D3C4C671233888ABF56C58F69D29A742
B5AF39EBF1092C2C4A906B872310DE0E83372B1C7F6E295D8DFFEFF960DC0F4D
83D7878BD8918B9BDFA17889D52AAF362B6162C07810672E23F66F8CF3BDBD6F
0E016C4FBC8CBAA796057A6B9BDE3233909694110279F81259A5E628FBDF6159
CA0CD6997EBD34C3038A02FA4B422A98AAF4297B998685D7080EAEBC22E27900
8B0178A75E5E52363A2E56507B3E44A6F9A9DD81886317A07B4823558D3690C9
8C722915FEFFED7F6CFF4E94DA744562835E29C97333CFE50D49A5EDB886F4D5
279DD9CD35C15656F9329CA06A0CE1BD5986784A910EC3DC7AB1A068C8ED4829
DDBC83091AAF21092234F614A6CA2C4A854B5049B5622BEBBA68AFC0AF9C6686
74555347CD055BB13B5CD7B5B6954A5794AFCFAF9AAA3682C7333564660E7C1A
8FB3DACF1ABACC3D68C26D07060C7D5B9AE9C9377A771C3BCD317F0ECE3CED11
C0438A29708D99A1F3C02E67AA1D7BB57AA7D8C64A2028349BDDD4BF6DB3139E
C1BB6D7D906699484EE2A5D83296BEE09644B62EB10658E06E4176C1E5E7BC4F
36F3454F2DE69F0C5B51FD5874F67287294399923B19A40CBCA4B580BCDA347A
9AFB7AE64C8E9070D5586086E6F42EDB8C0E9729649CDAF7C0337BE5E670DB9B
D5C038262B65603C1CB1BD00D4ECE2BDAE5B77A8A129DDD79DC7D080AA89B7D7
439A03568C2C826EF23C2ED7160B2F8F14C05F444E364DDE247748541CE7E265
1414B5A15E7152C6E9056B0CD43421D4AA5EBF1EC2CC70516F920F08B0CDC38C
DF480EEAF04D7F12638C9CF8DC4F827DB07256F4432345FCDA86CFCB637D04D8
931A81D2DC47674AB435738871A65422D3FD46DFAE9049F27DF0DE33A0E3207F
A6832153135BBE5A283CDFF46ABC74C78B3320EAB1E881E59E07C3134F3830B0
8216AAD3995D3F8F6CC988C73B2B7A5B79E81C6E8377FFBDAB29B4CB6317B118
84A437E14B0B213BE7ED610E9469405AB950965B2CFBD4CF0B3415BC9638771D
C2D8265D4FF0018FCD3851E645A82C179FB4995A337C0A854999E0D91EE8C98A
A9EB781A0DEAFAE1D666D2F5813BB2E79C232E5C96C686D414921DCF8EAD4C7D
06F79EF5078C77556346283940EAEE347B06F756A800FEB7656DC02597A674DB
6F8BAC8751BA046D7040B5BA0AC766522FF9657F71C7C89DC93E92000A00120F
301DE3ADB5D7D62B57E0824B9BBED388A5CF1B39B034AE2E44BE27CC0F5F0223
2A219166697692167403DC2083384A698551FBE48BEC89629820596FD569543E
75174901415C56DCBCA012694D671655AA84A8D8307B34066F1AC149C8B4BE3F
578F57A39B93DC454580C44B12D6D1BC653CCEACE809E5F3F7406B9F4A868D68
ED4C5C23D7B2497668D718621A94AF4938A16FDACFC6E3B216BB615324375050
24A7466E820435B11E93E91F673D609932BE884AA1CDB9D433A40D189A668498
A1B708DA358F56A1F2CE297C61D9AC19ABF79539914749E5DEE0FD0DC998F4D8
1A4CD93D0A06E68CC764308BCE69D4D53FB2F0AB742D7E9618321EE87EB1DEBF
14561A916C8D58B9C6AFE80D586F5FCAC3C6489038178E77B515108E48C7AF9A
AC9C3F93598A28CD03864C6A65659E8E6C782F50ECFBE2C27678ABF0978877FF
C685386DF9D9D8F51EB5AA618D2B3F63FC6A0D6107469DA479D540447D785235
2FBD6C4054C30D02DF3D2732031297F53AFC937F6CEEE01B2EF34D59FD0EBD21
854C5CAD32C59F6D8F843795472ABE1F73107C0F5A5B9274CFF2346E7627355D
5E7B3B3451C89DF5572F4E9BDCAF526425B34D71875B5109EE341F55C551DA50
31E2EC3BCB7A79CA3F737D3CC23200160C76E29B9A5740BCFA0355AFE7930076
1F621C801268E18B83A108068B8DB4ACF7079069AD73E37ACB779490900CB770
326BA14A6CB1E7FF537AB11F432809968CC441F418AD1A36075D948D487C55B3
C6FC12080681BC9685764E9348B28A29E6FA025EBE0C175AAA6CD60CE6E244F0
057DC1813A5B7896365ABF46DEB87E009D6F40978896B872511AD403F6BF9ED3
2441FC75CBF6CADA6A6B7EC63256E171C25804C384F88ABE95D7011732325272
278754CD48B4956AFF8512D795679E9C9A0F9CC68C6C3135387F3F97094D63EA
1E87EA4F5AA5E4A0C898CB89522DF1CFFEEFD6DE3A2FD816398A08E4D6C40A82
3273E8F5E41A104221C9323CDC0D03B79E4C0CD14763A6BBB90D85756EBB96B5
021481EA4E845488B79680CC29187152CB34A36947D272F9FB99153B8890ED6A
FC2B9920385876CE72318686ED9E447F8E185579B5224D3BB7D31681D7535442
7E16368E1BF921039A74A213CF090BC879F9374DFF4E327DA2F81404E6376EE4
6E7E218A3868A1F35192B6A29EBC2AAB1BDE3CBF626B54567266EA2F4411EAF0
7AAB49611D7EB95B846CC8D970ED51C10F44C8415FAFC12C5777A316FCA2D935
0B12E3843B5F41C5F13E36F9D84B8B59EFBC3BA66933054518026CA3C35805BA
4101E5B579B813FE6242237EE2121C14F18B0989692608EC4094EDE6BE1ED46B
8D01E900038C99EC5B876551B29EB203C79D6F54258E53C776A2DD3C866B31C8
FB0DBF21F756568409DEACCEA0996386F8CC6F8EB165C10060344872DBFC2CA1
6A38DC8DD50867B4A0CACDB27EE6EEA1F2894566C5D1008BDE70A04CAF6AEA92
179F4CDE7D7193E52937AA97FA7748483553EB188D8FF52A7CFE136C7117D8DD
B5C0B005BF0DD7D1D51865DB51B1F23C3B33DC6BBED4E65399519694F0372C25
507A312D1DCF20A42873D1F7AA77389AA2C53F09D69F4156D9CF88DCA4DD6E73
99CE178FFC4A38A527EE40BE9CDE2560B3F3CC57D8483477F7ECE7EC47336BB6
D6935916581287CA52C91C9583E7E57BEDC1BF1C865B182D725AEEE5E84DBB02
6E40EDAA86B2BEFC8706819361D6D49427A2536580C42A2DF376AFDEAEF103CB
1D43978B1B06300B0ACCC6C29DA3196C010AB61A3D64118F1CB6D42429D42953
0250DAB2D27AE40DDA6EA0945FE9B5BC54353B8AB0E493758D07C506F130459A
AE0DA42C5E4A23DD3A8BCFB3525D5B8C4F8A23076DB23D9C492FCAB70E0913ED
A5498ECA70ED4D1E7369876C69D773A58E5758585F5D7290EFAF998BC36F3BC6
0E43
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 13 /fl put
dup 18 /grave put
dup 19 /acute put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 70 /F put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 83 /S put
dup 85 /U put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F362471AA58488620156F3474FA59CA080EA96FE995D2B3DEEADF3
3141D157481C66507725ACA5953CBBE1ACEE7E3F02C72C6552D15EB3D612730E
61A06A43575568DC3CF3844BABF04CA767E299575EF2ECAAC7649193843D694E
6CA59318C01132C361A3E43BE637B70B9966664E12EF4707F6B100BC37778D1C
F1806B1DE081D2C9B995BF1EE3842EFFBB8416161FE31633A6EDA118E563BDC1
C42F403BE8A009FC756406669E34C6A08668808E0C31A589D0720BE32F3181F9
8039645643E15D25917F38DFFD8BD08A420854DE15AF291ED675A634C151193D
29AA6E04E84A598350AF17E71973854842AFEC3EB1B58E4D4433309BF5ED9D86
32C4BD136C89169D45718A88BABE25072D8E552AA4CA3F840ECB11519B06EB44
13026DD6800CBAA90F3BF0022E66A54BE1059BD5D224B674AD319FF9987350C3
D9BCA7F584B4D9E304CF614565FBC76518B70B7A86FFA7A4E0AB3F6104C8F05A
2A12D463FDB1CE3CF726D64933BE3E7B9289E87FBBEFB6FEBA1EAE1D738C9D02
AA08AB09078B55DE2A262944551CC1BA7C3BA71DA7AF6F3FF85D2CE6329165A3
7B2A341167A07B6BA482AA6199B185491196BBDE507FFB9C97E5D683FC1DCADA
8C9F60827E89F02AB5E218F72101344849F8075AB02AED3FCC2FFC3515225457
3E0F83566D9C912ACDB47A6C659D9A8024608504C70F3F1F295ABE8388451FBC
75C49BE7F2AB7363B15C69C51C30FFEDCECDFAA8283B5F0C69751EAE6BFFD914
C68D9DB374FD89AE583C5305D7D01D417F2E665D749649B582C0632F7DBA99BE
51DF9379A94F73CE98034638C9F1157C210484E556C550911D4D3A68BFC49F59
A80AC602C23DB580023B78E053700AAF7D62A0D029488EB32C807010AA71D318
8F50329011E9764072044D3EF2EBC1CD9220A88021B70DB89EC4B9C642582DB2
7E6C1A558847F2988E6A31D07C0EFBD835CD0C526CDF34968DE89CC246148C78
733E56DC109D35E6B2D7C5684A2E043F274E7F9DDC8E3DFFF7511A3261532247
A8570D8494BA2C884669AE0C0DB079050609754CBBBC246B3EE8995458FC6EAE
7BCBA2D6716860F864B3771C82D5DF6BC50B20EDB37953452F6653DC4E88F2CF
6E93E9E9E4263866CD683D9E2833DDF7F0F8E5B487EDC7DC71FBD13DCFD40AED
353FFC3EDF99E1AA94C01E0060E278E891E0626BD0C4CAE557ED6632C2B2243C
5D4132793CDF8DB0E79D211FE03D1D44856CF0AC9007CC1A4916452575C7B3F2
EFFD729590483A1A2E56BE6DD8D4D500D11DA855BC554A749ACFB3F74DEAF149
79CA99648AC7971810F7ED6284AE128906F7C735DB24AB4F9677F888E53B9FE0
17DD74E64EEDEF0CA24784210109B7F7A51392F23A11FFCA44694CA831A59B8D
5C1CB16DECF1A77371212539DF2121531964D6CC7FA26EF0C059098F15567B02
903DD16BB55ED060D8E28133B061C7F183C99736EBEC6A82C3B240CC99E5EE75
4CF7055327144B153EA731B1D0D1CC715499A0D035EB3A33126F102FCDB182E8
384BC8E1BDAB923070FCBAF62735379ACF33095D35B5340B8181C55566DE6C97
97AB09B4B35F14D30C9ED6B4B911356B6F1841436C27CC46EEF80FDFAE4E67BE
9E53366A0E4CC2975D791D3DE3DEF2F52928CF847F0A15C9A5E1CDCD82815636
73B5410FC8BD48112A7E9678AA4BE52A7CAD9144F3A4050182EDF66FBAE37139
2DD0E59980FA8BE2BE136F1133DCE0C6B2F44FF369069917F3BB200B8F1EECD7
EAD7D490CBF46A09BAE5AF2334D5F766F52626B6321C715DF843E7DE0BBF8EF4
7E09F7E172C97AB5684F34C8493D65E6834192E0853AEB5B7643FC865E74410B
1AA9A74CDEE023FEA051AEFEE5DCB52CF065EE27CEDB19EF34DF70AA3A421603
ECBF751D94090944B97AB1D2FC5867D2438A07647427475D16E471EB63AFCB9D
61F6DC2D9CBD688E8BBC14DCBCBBC046DE426D15F2FA4EE3F50166F440AC9B18
E8CA380275D93F8F6670E11E5B221716F314292EE155D8A4D4B9C26C903940F7
55381ACF661CD65D71686FC47DC77742A8C01147568D683C37B015D1CC59289D
727F9BDBFCFBAE77FDE377CE12A2104BCB313E5C886A06CC227BC94A217669C3
0B543B17610CA99D0C857479C96D153E22DDB70B6E1222938192E1030E33779D
3C541DC2C630A10B4C253A41BC480E095019A6A81A600BED6DFB90EE789B58C5
0911EACB32840FA0E588A276E12E9BBBCF6E53CA7345C7004C20C957B8079860
C0D7A737D29B756CE30C538E52218AE8461F466E207611D5E08AC53589A13F6D
BEAFAFE2066E29E0C3B9D9EB20C9A5DEFD250AE27F376CE8F4217C2A536AA59B
67453432B16F984C8AA400B1F5E873B7A1557EC40C59A28680DF2162F4DBA867
BA24B083E54D93B6F0B4F97C163D5DCB8504A3FCB361F723FE0A036E0CE72442
85D52FBFDD0243D5204A956DF88051589E8871441EDA83014D7534D312257E0D
41C5AF485B976875DFDE39BA36F898C3C0A0E56DCC537CE9B0EA23F177F11CD0
2925F57132DFC5E85722C5F0C8E2BDF53A110EC6A527CAE69D1C8E2CE1F25109
4DB7F44DE7029566695B046FE3B8973915FFC62348646F785B00164137C7E976
79ACEA830AB442474E362B6385CC9AA8C7C3F9009ADF8A4869C7C04FC459497C
D86F0FFD825CE82CF04769B7C04FDEB2AA31AF46279B26B3A047FF1E03B285AF
C3D8A7389CF2AD739F629030BC38FA7D863A89A89E85C14E14096636DA27AB6A
A16C67C57C97C5F75FBA92ABD47A5E71EC269F32734A597216411C3F48E6B5E1
3A2C0F34A122D1E1E37D65B19DECBD09D239CBD6A4DBEED9A7D3F757DCE64A8E
58DCC8C0D44E6111CEE2EF45CDF9352A88E98158207EAF44EB9BEB5FF854E57D
F46680F4004C27DB20FEF95B0BE467B5B7F436B4534DEDB506CCA5E70934685E
DD48CEF0E1820B441DC7C1DD81664CA4732C6471F8C0078A809559D9401D5D83
015BED56819D5A7A772FF9E613AC9B6F85598574DE20AEC54BED5AC2E916B39A
198973BAF2877327643D015A442350EA6A6ACF7AA99779E58E6E985DA0FE077D
74D8C7DCD2F7AEA93771D7490C29FF12165AE2311B49C510BEBFC949489F1EC8
34590C49B957170DFE24C8D01AAA18595B5A7BFE2B471E5C2CBFF77E9D2D07CF
916EEE9F44E49FBFAC8CF6DA6DA2DAACCF7812ABF4782729FF385AFCAAB7EE88
D9277828E530D4193559F33E01386B50630EBB41A81A21F8A1EBFD01F0F37EE6
450E260A19C6A6C967281DEA2EFB11AB5EB4E26E2551A2B53E6EC9DBAFF952E9
BAC60D30710B30BB0441D1ACFE4B66D99B4B66235536DEA9C63489176E1920C1
E6185C5A69197C7C3BD3655AC0E35DD65779019E678CC83A3CC8AA5BEED939C3
8031B89F0E415DAB5B8C2256DD39452567D72BA87086EA10A597E1E2D1E8012A
EF3A28A0A3E34206E7FB8659E5ECE5F23D716A9FD894EC3EEA95A09C7B64F4D3
8E3A68C5F86E983363ADA099008A1124DE871B3CD1B8ABAA022A429DAE1176C7
724CEEA7545F1CBC8C3383D175DA8F9B2EC5245E95B76F3695B0BE5AE5551F60
C711A40FE7FE5007821CC822EDC0A316766CE77C933B12B65E7565AC5AF0297E
05C746325DFD34412EFEAF9DAB766F1748C46CCF86209C044494271AA6FF9EE7
A2C4661040E3E00F45773DC20480C8D6BB75756FFD8F5C712248C2D0F7579057
1F65D0A19420F3404A4E7A71B5E91973A237E14829CD36A7F613F84F27871827
DA43096FE61B2B763133D2BF8FDC26D77EA9B7E0B89677237BC6601800B017AC
775DA3825E9C7A4F3DDDD7A729EEE8BAFC1B459F82BE8016DF587B9504F2AF26
CD6FF085C1F34921558A3DE8A431DA1FAE1447375F69CD853E780BB5B8A0C692
8613AE765260D3BC5A1FAC0433CCA21878BD3234FA5F21A16339D36F947D393A
4AF68E349BEE4281D92E8866256C7D37ABDF891C207D4894F230A44FE8DE9978
28871812FA17AB468B073CC77027D8A3C0A06A48BCCDF5D6D6770402B4FF6E42
2BCAE414F6A7AAF7B0B472230CDA008F37FBD8764AB9F9084FA32F9CF94CB99D
F28ED4989CE280AA4D7A7C64300745093CD65AD4D2641B9E673F20AFE5D8DAE8
1DA768889CB155EBDD138D15418F82F33961F8641311A5BD0DA6213A4449ED44
5D1CE0726AF1C61DD1E9F974D3C791E92A1F09B4539EEA89967EB4138D03FFBE
8BE62C5CADB2DF9DBA1B10FD88E772BFB7DFA8CD622F9B0C79E4635A10CFB39E
E250AD0FEC9C67289AC41AFF7700001FC8F602244BB8D3C47F3B2DDE52244E92
74D6DB8C406F320EE84950A6A549E6BEE147D4F691A1AF23619E8C31CD86871B
8015310B7C324F5F97B9FED98B893F00BC12652EA8BEC34F7595D779297CED36
D5BE42062C8130FC404ED89E064BF763D2EF7BF3DC3E37CAD85EBBC41891A2B4
0365497F37FE91B2E624482DCAF706636A4DB342F74747F7086EFD9EA40F9EA8
A7323F271A66EE551CD2EDF1F8B4F7062D1A861EC06A44584F3EA22F06AED716
70AE5960AF5A5C7D2D20B9436DEFE04B9AA5F5653A18C26020C6CF51423D4917
453C0E04CA840ABF122E85E3762CB0A1C1CE2C0188CBA9E6958855D9DF296552
B97E9D40165CD255BAEB28E79684D0B54B01E9526B332572CF2D0C098102E770
5F3A8728496FF5A8FCCC5DB0CA93EF82D169BBBE13E59012095038DAB9C815AE
0438FC706637267123AFFE11EECDE66B9A989FE84A0B64CD032C63BDAE2C7C65
8B16F094EBC02465EBF93AE59D9B1BB33B57CC1EFA078BE118B5F90226A93C81
C348AA644021F025C305A40BACCDA6B5A62010D14402EBEDFFA69211AA665BA2
296755BC52988E2FEE669B6F075F9EEB404D5E7A52208D724D4103A54ED18428
880FAACE83340A80CC098E6F1A2A610E311A798F19E8C536BEF594CE9F636C58
4A76E20BFC50F1B05A029B0A8D9D061F54D3E24BFCF0E8D179BF718201F73160
07B88512757872917213BF39864CC600E33893873AB26E49E79647F60455DA5B
DD5916ADC6AC40BCCECDBB4861FA922DB61B8077BC6C9743A13B5A79F9CDDAB4
9AB079734CD90244ECCFF8B29CD3D6CD52D4F40CDAE74157293F7ECB1F05BCD9
E873051C73F3B20176C72FD910A1B9DA237470E275619AA5974A854A1B4015A3
0AC662A26913A292F04D7E54405063F3F02B4C45604E028A659D134645DA8D43
0E2943B9666224238DCEB27EFF468305983422F67ED4CB6E0D0E81DAF9AACA24
AE628B0DADA162D415E8144A8F85F689C555C0B716064AEA8CF5E4FBCB9EDD3A
5C4D53A6FAD859C5BDF7ADB8658C35D8171F11FEF18740BF8B55A00AC42BF455
ECD3C5DEDACACFDEA81D825710D8E81692ED83BE9C6FEDA5EF8B6778634BBD1C
940E4A13493DE0BE8167637DB7EE6953DF9A10CF67955E0B12229EEAABB13351
9D35599D6A880B444822C3222E11103AFC9EE6758D11DEC131B58D042C58C093
0673E32AC448771731C1150A964500BF26ADE822DB842143A5F7740FFA6D8FBD
D77455AD57589782EDE31B975520FF797EA60FFD843368A40C23317C6A1CEF9D
6EFD5BE54320B1831CAA3EC8C289CEDE66D3DE168551B2F10BADEE5DE8DFE487
7F920432775159951B02DF8D1DDEC73BFC4C263AC9D8570257B726B710D43F05
9E0B711614D9B92BF96A91B21764A03D9B3F62E46DEC421BD63E003E22FA73EB
42EA19871D7FA3DEAFBF349D5FDD18D2D967EB9B7F6B3874E2177DFCC6E5EBE0
B323F0E11BFC646861C9B629127A1F10A97AC47DB0F3BEE219FBE1D29BB4B0E6
F1E45AA30FD5842C8CEC78897F757E3C2057973E8A8E721B649379BC756B7C24
09BC88B4431DAF938136D8F84AA6C643DBCE16CE086A71D7230DDA6713485CC4
AAAA3B46503097A05877FF793AFF18B7471269A218A1CB03FCB94516887B3125
9FFF28A911D18B7C235A74E28160D4C0C8503CB20FCC3036B7194FD9F3E4EAF4
19DE767153E6EDAAF7FD13F53FA1ADA1474B591CE6946F95FF68EB8D43F56B2D
89BBA92A5C535429B5AB662A2CFA1A5B181B007BC60472ADA98E6E3138883501
896F9E824AF45A2D4BDCA28B0FEBBBF6582493B76EEDA2C3074B865DA0AF732F
EEDAB80EC064941239CAA84AF8428560845EA3CEE9415443346777957943A7DB
1B547AD3840FF9C261EBEC85376B0CC00379CFB247F6A721A989122EC0C4D0DC
D86CDDB16EBBE1C53593ED8A50769E61787E6B19E3D95BB1761B9FCF0EA27F96
654B820DA492A17FF30A873DE307081278D94D510A255027D81C4CA14A2B7B89
1E14AF3E039BC7E82E4F4C7EBC26BCB8AF6E024395D795E597666B56EBB7BEFE
E2C91DDB785B5719ED67AA9C20D62BBB0EE1D10540C42D7E9F1DE2DEAC614DB8
16FBE41A15B4B3C5CF12A558F9EF338504612DE2ADA4EF1C9F5AF67197EA44DE
2323556676768B7E57C76FBDE560359553E03D1C33C500D6C3CCF0DD99F4F69E
28C3F7A4B95A73E11B6DC5A49A4BAB5FE275C960F5B0657CC730AD5C4D64C626
DB47B83A1468208BFE465377FFC5EF3B94EB887DB772C9DEE035400EB24F6854
ADCB3CFC8B07C4C2C276D68318E7E37B820B125FD0E5FC569E59BAAFA810AD9F
F539261170F6ECA8A927CCC7375340FBBCB894EE3CA3CA6DC6A1E52688BC3F73
230176E30CEF37524CC97C45612663FFB6340D4A203AEA5B87375F5F590223D8
D832DCF15BB877FDB4483BC913183B2BE2ADBC787000F0C31EB3EEE0E2F0D7D3
48490BC1DC00D9EC6AD870E33DFCAE8EDCC535F3A1C0DD2C66E6634E02F7E01C
4AF65B426D4BF79D3A4D898C50333A9B54824E78691F0C7DFE266507D9AF7116
EAD40FAE94ECB7FF822B47C48466CEC5D30E94F12983138DB044C0FEC7398F3C
5A483FFC507C6DFDA8A59D73849C17EE19516D752211934B4531BA154CE680FB
0CAD53BA7F20DA2ED25174229C32A44EB95EF35F8C37CB25A62D45301102C400
474BEBCA534E7C65B9B87E83F912BE85D2539E3C82B178BB1650C453323E5AE9
1D81213A616AE77DC78B5AD6E29ABC26EE6AD05B94DD2E33F5F121432AF6D560
F7125CD04092795F2EFE5D4789F67EDA654DA65DCD9A6EE2D1C443412D47E786
369275BA288AA3CB77871D395050AC2B2BE3E5AEFCD42852C448127F2F6749C4
9B16ED55913E576E748C283D8C18A16DBE0315B4B16AD92564EE787705AE3DDB
6FFE30FC31127C7768B5F375B1435A7AD9B06024D068FD2A01B203C924F7319A
B813E2A1EA7C2B567EB73F7F6B20C546D15454FE591EC5F2B4EB0AB08D51E5B0
CA64434D67DA146348C78C9A3AE6B4C6475572C3B760CF858A54FD492ECEAB4C
85C3EC892E046A4D26697535F2EFDC63BA745E6A1872272661C50E5EB9D54A08
2ADCFB3CB9C444BD7EDE541C0A673EC87C4BD166C28316E2312AB0318183AF34
76CEEB5F8FD36DED59853050424157B11207ED8D29715AB09240169B3C69D928
7DA7C1E95D20CBE3B802385010A5D75C9BF212CD8F549FA10CEC288B3FEBC6E0
78999961BC38B38B2E9E4330903C9B6D74E0259BEE993270DB8E1C640C954466
C7032C6FD37ACDA4FDF147A545A1BA079B1BB1832EDD00497DF84195D5C37D6C
57D96C68BD8A907226DFB96DF71B7EA24E7C05A9838DFD3653EB69A665C4B122
34A7AB81BAE55023C5F9B9198AF79B31DD7526A29E869DF8CBD03D533F023150
7B54DE52BFBB7DEF754FD8689978E0363F84318E093AFA213E9150CE9EEBF475
94CFA3435F418D9CAF9C6C7C6FA3E714F7C2A423A64B9055F3B215AECF83C7F5
654BB37F1C034E80FDF12B85109E4892DB0F325F8A3F5C08EBA27FFB2116BD02
F7DAEE9D1C906D8D5956276A54C512F7BAC77DB01A0C6F052944593FDB30A4EE
E83FB5179D68068E4380E3E003735F3F241718A87289B5BFF71C91E4D0360FA0
47EEF8B70E7C4F080FB2F52D50783DB1F6540DD60DC9AD030651BB6B19FFCAF6
627099C02AB9CA316B433E99D46AFDEEC3C0CA1B8672174C48A99B4469918A31
E9A0C6791369421B085BACDB1500FD31DE3DEB7F5871FFA23307572C91AD78A5
F668FCDB2776B56CE4F01CFA8DE2DF011AA8FE5DE2F65CD5752A4604AF9685AA
B8AEE19D51EC9D2CB31CC2227DFB1710A76126386EBAC45D383D0907BEAAD0DF
F8932DECA589D04C27C5BFFF7B0F486195337E6A0468C274B2897059A447F2E7
673E422EE1882A2F85B1E4633FD159C855C4CCE1456D49FC1AAA26D1360B4ABD
8627FD2A6B373784C9DD524ACCE71D348586059F9D2AC16D8C62D147B01CCCA2
E02DEB44E78E29E374F9766750B78FA69A5E03ADB88F3C323B835309D835F08C
9A387B3478F5D729C8646ACD0C6B34A0BA3D75FB556BFD878746BBFD3733E2D5
A40909C2FA2F4B8171AD9A02BA3D5948B0FA4E629805B07465CCAB4E4BA6EEEE
E7B4FA88BADD1B9D07289A58D1E9FC40062A67C371D573D586C7D4F821F8D1AD
5B3A6D73E283F1674835398CAC5BF06EB95BA744153650C4904E3846F50325FE
CB5A80717FE08EF90CC1E66F2130949D8CD90613281DD78A098FFCB1BC6F248C
BB45AB4076BF3EC8D7961641616B2B06563ADFB2AE708E26D9DE115C3A4D6F3B
F5AACDDFC46B397756CCC3388F75879F3D5CCF27DEC38F368D705840A48621FE
64CCD002665DC6DB544F108C859A72BAD586375AA24C4E7157772AB5E9F86EBA
C0FCB79A18C478F42F6AA5DC32D9A42A43C5966F738A20D2803CE2BB17130403
8754F9FF6E8C2679CCDC922FFF5ADA48F86CF8BA8FBF15308893B40ED9E3354D
5452404778E6DC91A120A383C9F26A8572042AC7E19ECF7EDE76A781B104977A
6FCD2A9A88C36B1035765DE44BA60F5A865DADE560336362E979BD4FBDA23C13
3FBB4663DE44D9F096EEA212C867E8166A39B9E34A7903EAA2659852CB110CDD
AD25560FB887F75D2E7623618BAA17F1C2F58201C9C6E2C66B0CC479997211CB
B51B490848838ED6108C9C232B146118B93453909B0C1D1C60080592A6498981
F2808336671CFD1A8C8661A440300E97145D5B5F571C168977A6EFAFE02C9429
426D285A7CAEF5DF90CD7D6606226683C0DCFAB6986EB86C96FE1BBA55DF6EF5
336728BB0505AE2853A951BB4ECDA998E7BC316BEE1B1AC5DB9CF797AECB3173
1EAAAA90DFD635C00781F766621E568AE3BC143E54A2CCE25EC8ECE33AC69C2D
CDAC7D679181FD66FE706F81A5B6169B8FBA92B796EC49D6B964C5B79080C012
EEB14AFDB9353C895C35F36FC57AECB54E2326446B6F35B04D38E8F8A0984EAE
3271BEB8CACAC5465B0158C3C4607C7F6E0C74044107F20C227890A01DAE4536
741252C4FC94B11920C95CA6D6CF9E14C5628F1B9D159FC1DDBFC340C47BF83B
480129C429F42F02650BC6612A579B77A5A8DCB0CDA40DAE2F5B67573891636A
BD45E8BBBE62F856146844E1745E51022BDA336CF8D9AF4C081301AA5C8FA192
428BAB67B73A859ADBA6603704A1061788E85F02F1F6B3304744FF1FCF085B25
4332CD847B7AF13363436081F78DE48EE5F4EB0C123618C4600F5AFF421FED6F
C939DB6B8CD9125BBCF62D582E4A9CBD00532CA5ABDEC8A147B0064ED40E60D6
A4764BA08D7B2A540CE84AF1852925E66A2748396643E4E988B5E79287B29407
B0435B821109155C79E7E2B5B96798A26B2C8AD824012DF0B59A64BDA3920D97
8F6278E76CB17C63CDD315F380083720D9B5CEB6E0A5B24D1B7ACAB38B12F559
EB8D17C1BFAB34BAC33E8140139F91E04A66952DE00F4523D9A1F3D2FF90D3A3
067B4162487354D5A8DC415E97AF82DC239B6DA71B6F9067D0778C680B1D35D3
2541839A781D59AD8EFA57FE08816AE6E1FDA909DE83A2FCA2DB95610470E4F9
938A9290351BB8DB2B2C08E8D23284A188FFD4FAAFF9011AECA9BE60A0E8E4DC
F9F3A80BAE253FAD16F76F15B7BE9026AE6026604A1D1A25CF73222C5610D6A7
D51921DF1DB852D86A4391AF1B53B7C7BCE7964A7027E6582713ECF7D1A49BE7
AD6DD52446DA4DFCC90B206FD45C25C94275C55E807545F4A4FA6F2B4D188D45
BA368A62A189AB2ADA8A47B48A26ED0B0E4FFABC0CCAA5761B3D01D3260D830E
2323DF68D33553F5DC3B02C2965898D64B62B791D381607491FDC0CA8F4E83AD
67E174C11C5DFAA5A233ECBB0E503B5E160FCA4E52695C36A8069F418BB94CDA
BA36019F85EC1BAA8056DECEABC06A2CC334F34F586EA6641EB289C730196D73
2ABFA2E8EA1D48018A4D4D878BFDB90228AD3D6A1E211914BB9B390AA53DD969
4A803A92C425F5F9F12D49A5433369F9B1ABFA72ED70C9A21C9062848B3075B8
0759F2525C7304FEA63E36DF9ECF22E67740577DC6904123D389B1C9EDF65C08
60417BB340CC3D1AB622E4C85588CD50E53854245EE555201CFC42CF6FE55801
B91521B55C813EE5D8F05933701F101FB0B6D0D6E39BFB743ABA1CE58EA61842
EF56F134AB25DC0BAB1D6D259D2594C9C039C73976BE2511857089D2F529B806
F5DFC93E58B33A98C06612783C87083F73AEEF785FCD9E1519A6189A8903F697
2C82584C5449ABAEE0CB039C352D163CFA3AD00093C86EC66172EB0A0D2C91B3
2773F5199FDC8F9FD793BAD1E1F3F8703A6C38E41369927E4925532684A48FD7
880FF04F1EAC37720DA78015A600FF4284DA3FA460ACB71D6F3327615C900AEF
75969118C64D7EDF5FFD01D2C600E94FAD42E94D63DB861020C9B24BA2612513
F749010B479D2E4FCFF92002D98848A533DA7614BFA97C230544E058F923A193
7B327365F064A3CE6690C89720B1F32EC6495796C75BB0794642526E6D746F09
B32BB3457D0B879DDABACD2DB8FBC273E714057EE074789AFE07857C0BA8AE6E
9463450245F7ABF59C27818D479A6C9B8E1D7E143070FE1FAF3B430BB15A3A16
8EC692C8BB6C38058FAAEA1E56E41FF7CBB38D5C4A0CB6B370D8848110C9D78E
7F3128B21CE55D6C8724346DE31D84B68CB1A8B0C1B8DCF10CB178A6A3D8A20F
62B13E691F71CB035C1B4AD3D19348D5983E04DAB9CD8A5CBBAE9DC2CCFE96C2
A2FDAA32514CEE66A3193E0D914D9D5717463A97A79E46C6D326A504C949889B
40C34061F55CB143AC9A505C27E552A4396A763A4026F93AB92F522C7698F0AE
B78B1D6ADAE3C8838FCB3BFDD766E6CC6E09DCDE33A2D24907848B5A2D87AC16
8E4109A1BDA689B9317287C17E4695DBFEF362B33CCA709C79DC919D6572E163
B9EFB18F9BDA7339C2E14299E03C8B7EDAE90201385E1336243578C47BF8F0ED
FC4A13224EFEEC4597F2F5A9E33895922B16FE0591C201604DBE7CB197BC1D33
685472E65E5165CAC389619B5FB4F416635F74030D58437AA6F8D53FEB020AF8
92F900B41CED1EC2FCE58BBF3C8B39A92592BBDC9016A77C9D0CC6D9629D51E3
CE8190576F16E19B79F0AAA9C8C21F6E914E192846BDA7AF275E7BCE135118F1
446D44649B0C795E98E520AFB81733CBB8749497A05F305F0857CDD9F85492BC
9C5E70FECF62374B96C168B88187A953A6CAEB1F802AFE89CE357DCCA3A1E079
7BD6C5E66BE15CB945CF7F7E000046B49C9E02E6A2A63DA8D953B3D675F72CC2
7BFFF3AEF03687615B88B9651600E866049F9871391CFB0FD72D35B77C890909
7119232B9825C6EB092FF7B7B94151BAB03B8498919E0C8720370DCB269AA907
838F4DB326D304C865ABE8F79491ACE82F7D46AABF5A915AECD017065738B0D8
8334C3C25FAD2E7F3D771F90C7027CFCDF44028A899C4C3CA2C335EF62A2ED35
C4D5053A37B331DD8136D9C181B127D68BBA83BBD98E4B312A095C1500BB849C
DAD9A25F7752930CBDFEE2D9F96943867ECF04B91FD41A6349BB36B3911014D0
553145E591C98A0FB75A84FE45FF33B503B3AABDFE4C442F7E6EF61DD8FAEF2A
56C57451880137C2C93F5A39B564A30D3F4E600DBEE47DE21300E0861117C1A3
D87A182FE61A56097260C030BED87C960965EE492703357501EF775908D7CC17
7FA4C801C105B9A73E21CB114B83A13061A8FF61F2E56C5C807CDE11706DB607
B16AF12DDA060A6F0A5AC28E8690CF6C93AF29348D89FB55D7A61BA25FB0A284
4B49FB3FC1250E8B69355AABCBC348FCE2EAE7F5FAB0A882E50B13AAC94B3AE3
FB8BFB7F6B6B74AD146D5CAC22BD3A467279307B1E2C4219239CA54694C7D773
373C3843AC96114E2132F081C54761B0E8BCBD8DFA93551083C699A2D52C7163
9C3EBAFA4B9003F770D76F1393E669FBB912198BB25F7BEF84C62ADC9579DA82
2A7BE6FF8EFEFE1A813CD42FA0E6F3B1BEAEF7D675314FA3C8E7595FF85CB78B
0D649A81CE01AE2FD334EF0CA0CBEB07135E89FDB8B9DE1CFA4EF376137975B1
61BDBC768871AB45E918DCD167477109067E9A4B56A722793F25F905D2172972
A482541A3A554E1EF047B7EABD6671E2BF9BD75D141F5546D00A3E3C367A4B39
B7E4026A4846AFF3FC0940589BE418D859B25B45E15862E5541BB72064148198
424E73AFA0B340115DA8D3E95C52B1A5B73915AE3A502E41C69F46E4715763FE
75236E025603F6EE2B9B32D4B2C215226581C8A500BBF0534DE0B377C0A6BB46
8B3ED1266EF1B9E6113A1C31A1B466F2FC3F514595370F024451104E3F32B2ED
63930E364FACAD21DD749AE5252DD79ABB31B40AFE971EF3466952965EE5E5CC
406B1FB9C0A1C4605700DD9A9946BAEAD3E1D0B435C1211FCD91386550A73DA0
A13919B5835A1A21EB9E3E4086A626FBBAE480F46155CD2BFAA5AC4873F7CB81
EF9A3E3ACEE70BB8E0718BC74FC88242FC2ACB308E1AC64CB7676BA490471279
CC95BD45F00D9A7D800109B7F5D249BE021B073C0A95D3CF2C8575BDF4475CF2
30D277818D9E3CF28FED56C573C5D182B2D4D75F85620061EB815E7A0AB906BC
A061B896B6D58F3AD61AE23248ACCE293BAA82B6D1F46EF3E64F9B7BBD63E1D9
35CEE29B34759CDD7EDBFBD78440E019A37E38293FC8B6447B19F5DD40FAF333
EDA6396C508B2D1DDC1BD2DA96123AEECE18F481C850D2C5DBB02FDE5BDE1519
D58D77A547B92FEC5BD1CF84B73728C3E5D668029DC18FEF6DEECA5A1D95D3F0
D2F9040035F5B818698FCA12768173496FC71AFD2C72008423ACCB750361E669
199EC767AA56446E834BC2BFC6F2053C0B8259738554310C68CDDC9432E42721
674E23F5A82125FB69AE2F6148DB20457208DBDDE5B6588FA3C31236A26071B7
BA94EC1B905D3017558C9AA5F405C68FE681B61EA6B964ECDDDE658C4825A13F
B46ACAE51F1B2DC4B6DE28D2A14E71E7DEA656E98E18B570A138DEE9F9BE89A5
3DA95A6E81AF01CFD7B3D3115ED9A78F06B6DC1452701BF67F5504D317421B0B
246FBB0A37CF1C2F86C24953E19B52D5CF99A47FFD53D79BE1403B5EB5945203
365C0D7272E1526320D4C481714C71665B8BC328566A8AC9BD35A32011EC1694
96E6DF37688C88EAFC2E5D06B152222EDE89A2CFF8126A6013DBD504BA84B4DB
3228602F5834F1567900F1E3D5518C8C5A5F43053F2C7E438D375069681D2166
F9CEC788F2DFA12DD55791014F1A752D10E177A5ED2FCC188D06C1BED1A1B8DD
2441878F5507B3EC96206F0C8A76555B693A5A1D72BBACCD9DA2A82EF63558C5
ADD31A260A9FA8968FE198C543D5F3DAEBAB9C43F9171624551933B06977B613
47AC51D5279D30F101770987A48EDC083B1AB4F58A594C013F9FFA2A6114B8F4
CC8F500250FD9AF24BA77536487F0B57DACCB43FB07A3FE4023086C3BCEE09D4
48C319E255161905BE0B9517E9F7D2EBCF767F3D9300949C581C25542AA015AE
8AF7EA9C371B697DBB1F56318F9C73C7E625C278DC52BFCD6B2DC32F63AC1B17
11ABD06C534245884520D229050876965A61315F41950157513192A89AD684F2
1192904FD8880CD71C260F85E9DB362F8AE8DC64AABEA102202C21333D2AA579
D52EFAD8F452AA43E722AFC4B70AA9927B9DE6EE971C693595DFDFE123E705C6
0FE4D63D2C75F2EF75F6F8FD16EF9E3D35DCF33EA28AC5B57AAFCA4C8ABC62D6
C33ED314797C8BF5ED436DDE3874576BDE3BDF796443B6812FA8B9A6B45EEE1D
F04651223B29AA0AC2EA49EB0C82A385C3BBA1C14824DA03F9B15B97F3749CE1
C67CC17FF97B8A8D954A6981B254529E3A5CC67C6F1FE184298C97D329540E6B
E700252688F6D6E5C4AB20A05F6B092DA95685771DFFB75031DD34FAB5A4CBC9
1FD548D55BFD87FA09F5AB5AA0468323052D12A505954EB98F7ABE029A234C77
4A192D894C85A01720D97F911E82531CFF8B509C0B96360D72846BF492AD92B2
E7BB0AB150A02D40B490CD9D2C1026C16F7E89EEE40C1933FDFA2757A526DA8D
E7AB147CC66D7F66C4F15F8618BDD7808E88B2F7D1CD7072FC73478017175E08
BD5C2D08400DADD25C9D29DA96C33606118B96876A2C0B6A5CF742286B631F3C
74C17E3EF4C2BE7E6B35F48299F14014685DDD3EB92BF9713AB406C8B7F7344A
22838C9E1FD03E70A0D4864DA26A885CD74E7F0C1D6F2FBEB673177542107651
76A4B3D6DCA11F0434B66678268DEABA27ECC6048B9310ADD48A033215EBE3D6
93CDFA3C8824B358E0BE78AD154FBE92A9F58B4D92990DC13226D8540F6A4102
A5624E1C73E8B927499642B7ACAFFA94288D779203EB0B3F88050177EB335B7F
4C332CC3499D69F12FE094B6D79125E5802CB7C0E28EC2014C2EB1457DAE6999
A825DD1EAF4A378E52FB9E4F95A0E65E353F783B8BAA8E8C93C0F73EF47E2C1A
E211B234AD5409C7D237DBC32EDB02FF62860F3D1A91EF32C265E75261457097
75F73B0A2092C3495A32D0B35ACA4B59DF6EEF37CFBB954F977A5C3F2FC0E64C
378820CA27F5E7C56D6BE52F0BD67191DC3F7C8D997A1146AE9502596EFD5298
C6E834429C41489B062D5C8C8A417E8F5F967BDFEFF7B465E63F9FA989D8322E
E5E639AC3F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /acute put
dup 39 /quoteright put
dup 45 /hyphen put
dup 46 /period put
dup 51 /three put
dup 65 /A put
dup 67 /C put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD50D9C98DD94332DB4C7155F8A52013F9ECB7CCE3CFB3E667C57B022A0A753
A45E41A9D8229D5198031ABA3DAAC142AEA5FAB6694A6433629E15AE45A67FDA
34DE10D995ABCAF45FBB3B6B73E80D05F4C51F8C29D4B0F67C8A86432A6C5E86
F0126AB25A5CA2875B48C61CB8112A4CF9AA08F8B0157396CF63CBECDB8867CC
AC10F060630C9BFBAD84B1FF01C814878F0C177F552BDC9BB181B14581C6E968
DAAAB2896FCFB745795C4D2C87CC15BAA041EF80C5BDC12EC1F5786BB41A5A21
073EE0A49723BBCE7DA340F1C454FA5D74812C7425D1EE1E393BBA647136A38E
1DA4A94728957578C7D38CB7BA46AB7D9B9499B894F2E9E40245BE1D7DC6F824
BC9477CBC0F708F0CE573D3F01E65DAAE1DF4E6B295D72ADFC1B2DC969ADC4A7
29B58F3133DBEA5CD1A74475F36D7ABCC03EE7E2A10D1FE691EEBC3E6885BB72
A570030B0854D6E51FB67798552D9960FE820FFD982A9179E5056B3C085580A0
082D1D73E79869B92E19E91E073C92BA72B9139627CB442A5D61F8B2439FB040
ECCC3D81C807A309B9CD8B07C29FF5498B581DC2C86EEA03115CBA55BEEEBCF1
2C9BDB48EB560EB224ADB1CFAF7047ECDDA29D088F6F06857B463504D7FA4036
77F369394DDF21973B565A8312183452E2651E93793EFA20D2FC5D6DAEC1A42A
C47D9BBAED9B3FF9D420F2FB1F89AE8F618BFA5574C4C6455A7CD8460B262DA0
2190D02FB419CDEAA892A45251CC25A2C091CED991E5379260841EC42503D31F
961CA0778E3B5FF1C981284B94AB5F2A0A5156B81553E900A66155C984A8F1CE
39F934D12E8494462093D6A4248D09477EFC9C673E3AE1E327EEC7FB8DCB92B7
52B326B001446B817D0BDB0F41A9F054F1CE129C2F7E11377E8E83180A35A9B3
1EC7C2C99EDCC492DFBE19EFE448DC0891C6BF02878972CBC583E54EF3D31EAB
0D5BA7F4D070D35AAC52F6698A47B931E537C91041831529C11853D3066F1EA1
FB298D0620BBF32EA2ACA41A9D0FCA764FA7C0EAA1D1A6473901BB4E3D94F73A
67E153A10A0E799CDDD47F858272D5DA9FDCC7C1763177CA45BF49619A9E8A10
3B03CF3628E4DC489BE8C89516BE207A4CC21F6A2BA64A7EF2A17961CE5848BE
7F943F8A944DCF5643C0C4C7069A6DA51A956B2215BE4298884D5B37EDC8DEF2
EA6CE92159D3B3FA7195A1CFB967431E1A20A1DFD0B1B2CE6F63BB10707B776B
DC6F83F7F5197040832EA9EC56F8CBF34F229256C34902D7543434E93083E7A6
2E350556ABF7A7A3C38F4D1EFEB4FEB2DE66CD9796A5AE59F90B50A11C0C5390
E46F8E157A51D8081C0D26028FCFD6B2C3CC0DEA212CFC20832839FBF8E719FC
1A7FCF0C17E90944815EF50CA00DF0C8A3B17A32C6922FC78801407E69B895E0
F996867E65A4A7F1E5CA2648BE832D76E1FF96A7231DD236E3F7830FA1C2A766
2262D797BB4E4E49A242751FA43CA948E33DDE82598CE1C576AC8542F4E0CB40
1CCF1F4DFD1362B4479AE47AD871FEC9F0420AF586DF092C69C335B406B56EF7
60B7140640926B97C5531C7672E675ED82CFB1FB141F21647A8D8B1D3A6D1BDD
AF34441D5107B36A2E6A0201442BB86B4D204C6901FC96F90222A7AE5EEFC846
E29BD338FD86B7A44FABBF4D8382B2B6DDCFEBFB68775A3EB357606C657DE581
0849EE72CA4E19A46F1A7B1D60B33393ADDFA626E59E564A3781A92CF95EC736
7B6D3FB3C77DFB32D6F03106821C4E7603ED5774893C3D37C189BBDB9DA6350B
FA93DFEC2738717D17918D0FA6423C351802FD4A88B53DDDC8AC6B3713A39605
B5808DFF4552B167EC484603F48F163673E858E2A2A5614C0D898EA1E43F4658
51AB1827153CCB05EC69E81ED9A503359A9A2666F841B65F7B566563CB99CDB2
49EF0962325D39E7D3205F45F051616ADCEF7A4B7F484A55FFA51D227D0E58C8
8E8B89C12CD3CE63093638FEBF1811CFDF88C59C79986204AB07DF3F9B5CFC82
29C902B63A263DCBF93FD259A6AEDCE9B6C099956ED3EFC672E26F79D69D24AD
078508B9F3881F469D6C08960F20EBAE82B04E8A6166E01887AA948B8FE5B0ED
DCD4F362E6EBB8C193E024B89953C330B5368C099B59A711E1FF2EBC5FFF81DE
B69A923EFC6D0AC389D076CCE593E82061BEEC10E9B3A1A93DE7E8170980CF39
23DD0F3F651F3D108C6D32C49FB8AFA4F768466D11AAEAE5F59DA92B3203E422
F614AC77B7300223EC3BFA9B92B5A82F386CC6E27F6763ABE5A3364EFC5EF64D
3582C17C0B4DA0688A802E22D26448565E262B3F7EA721227E824ECD09D48CF9
94168AB3360C3027D3AC1044C4AF49BD0B312F7827754C486E10B87894ADC737
D1BD88B03C64F637E03801C9DA83060B53E7EF27FE8FFF02921CC369C6024219
D51B8530067846587B4FB5B0BE74526565BB8B9607BA5467B7A00171414186A9
CD396F45214515C4D2F52509E422CD79CF482427A510B4C87552EEED06F6DC47
8B67836EF2F0BD6D8B06DFE022C2C2F06C84E829917ADFC3CF10DAF90CB6F37A
EB52A7A7CEB1485789B2E7F31E60A1EC4ED2D49DB53EC8EB032E19682C24DF33
C2E700173F8C5123CC696B335CEE56993B5258E5341FE60E7DF38FD48393B89B
ACBEC8902AC40E25B462933C5CBB5D3F382700341D9F2FADBD157019E6B6D114
33E30E25D2A6A77D34C64FA2B5122B6C12B1255357059F0E1A135D13C8BDC0E2
87E44B71919C31A025B0AAF268A013B22CE572912DD3B18665E3DB85237A487A
F01FCD20580D2E1E7E19FB06EB80B0BBD521AB57E087CBFB1E76B0CF7576EAE6
491EB97C4A6C424DE65237FB22C8E5432220781E5CEEE32479472DDDF4A1890D
6CB7E3826C2C1D254C6D3EE21555B474850535A34E8D57DB6526FCB6D801007C
629CC51B5D78B91186AA3269A4B24CEDD01041B5403C8ADE87848F2D34A04F93
BE3C3EC8FCDF0214F332D2766CF608D456CA6B621E5C5F379D48F37C404085B5
EB079B3E952A6BFCEED6A37E9F3D9BCF22C5A0C62C074F3C88CEADB93A5A6B50
E83962C00F25514A78D29516DA51B6299378C1785F4610E0B1F3356F1290CB8A
4DBB83BE68BE406574FF30FB1AFC3C5A723A33CA927E7A69908A4E3B6CA8C073
4A223B455DDFF95979507837A431541A5BAF5013BBDDDAB4A7B29D2C1CE45FD7
E5081A85A41DA9D671E6FC7F5AE94DFD9DA93A19D535F9F3FE515FF9B33EAB41
E62CDC475B323587E02EF884BFC185871C6E618D9372D347DA9EB5D1191DB7AE
4694DFE311AC7E55133D6E6C3B3768118227E13735D3D2398ED9FEF6FF9E9F8D
657B9E8BEFEE28DB4B3C07CFBB6D4C091F45238F3DFF03EA7BCB6F80ED89CC20
41E2DC27B3955D923FB5CE1468B7821C7215C552B3B994EF214FEB3529AFA0CE
103A72B58C802D5EAD0993EB3D764E104B022CF4C6D8C173A68D7E25817E79AB
033180F4E38A40DA924929ED617C4B33A4BF90408355F1CA6D3B3B36E9915EDF
3FCD78DBCFAECB9E6C14521B2C46F3871882359E85F5E7BE48E9C30D59EAE709
9D0426AF70CDE128CC415CFF202B82B3FC21CD8601C6F149AB77E9DDC65DBA1F
EC71202BB0DC77575E4A3A2B8C4A7A190D48DA86FC6A732C9E0E8DD4820E0630
010E30C328930CB8B8F9F99FE5CAD166D73406BE2CC329F74EF7D25567534188
9A0130D8D7BFDD1E94F461ABE52A0FE2134FA0CD52BC755EBEAAE544EE19738C
77F590482DE777A6355B84ABBB5FF1560E6FCE2BD670EF91C1E05F3603D803AC
4052B0590353C0407AAA6E326A14093C719EA7BCF936735A0FA8BF43D810768E
09AD25CB2E8C61E53B9FA61F75D2CCB06E8B215B1A97640795129E0980002445
1E31EFF1D1B5B2D381D31AB8ED60403F04F7702BBDB2DAB608F6274F417FD8BA
590E5B3CA06CE68C7A1BEC4F477B96E4405E0186B98BE38018AEFD0F3D88CAC5
2E6C67FF1AF9B6D9DE17BBDD2C8FF90FE7B9DAD3D889A6CC371F4139F198080E
91627431A79B454ABA2E61E0C89303B7A6E83D1B56113912937430589640A6F1
3A02B6397E02ADCAF0E882FD734E3FB7AB6D3F176B295F4F598A370736CD4195
A4ACDD0C0B3ED06E6A6CCBC9C2E0CC0D7CFC2AE9BBFFD7821E71E5175BBCA95B
F9B66DC9788415FAB15EE136D6AE2CBEEE9A0D2140010DCEDCB95B173DBF245F
7AE8FF9CE68A0E1D6EBBCD847FC824778F871F1EA3047D26A308D54B941C0ADB
59902FEE8A0A25E0FC57DE68A2E178C1388A34041568C7B1EBF72D350D7A5D8F
C2986202E644F741E5CDC7900E0BA143893748A46AB1980D0818E9C187102EB1
E45B50DF3F477AD6403ED99496E1128206A3397CD4D4328954FCC412045995FB
7F5C15BCC8C6D9F5B682CAD465FEFD565B5D14538D0A390BFFA0AC7A4637ED10
88811D3D403C90BB9B7E0989EAE944372BDBCB41FA97B4D093D3005325A62CD9
645FF36C993A9DBC7EC1115D0AADF019AE4ED90966EEB16A553720990C273A66
62CF0ED195127264DCFDF9A3BEAF3D3FC6D61880350F5D49504004A695E7C36F
4C9CF2E602CA960530F288BA51D992A16B1E597F38D8467036E609CCCEC65C6C
621476171262B2F5C9FC223DDB85202DF20581E1FE6C00C5A8FE4A682174B252
3C3BDCEA71CED5458A7228264EBEB38E63FF173AAACDF27BBD560BB638934E71
860DC32ECAB37CF08614E797B2B706E6000FC93ED9ED38C6A693B44396344673
AA805777C196F4A780A71802A5EFEA5C186E0C984AB4A331062E1A615926306A
789AC4E6BF1AD7DDAFD85A6EF91C6AC8C84FCE8730E450F3EF63F3927C4ABB5C
B820A8B6F5A531D0E725CEA96CB61B5CDF2F79F8FA34B90C19BD804CDE6CEDC4
21A984DBC164094F192EFCACD284B6517676EA8B0B1CC47B21C3BF50A16ECDEA
06F2BBC97EF4FBB2CDFC30293C963BFCF89A2EDBD52A6245A84273B8CEB109E1
D5E14B331885E6F3E14BAA7B9E9A21284AA438AD85182E80B9F56F7AA940C0AF
75712445E839D6FA9758A4E50922D70870209A5C32E3EB924BB790378EB41660
5803FD97CDAD4A4857B056FC20ACF3B288F8E18161F0A6EF8739EE19928393E8
1D9ADF591D372CCD44B7FCBCAA9C43726BCB294514F20264A1383C66828BD9F1
61E32ABEC1DF0EC552CA1B34109421AB5D354D610485B08676DA83AE22E3E771
D285B1CCE65F4D4BC6F57EA4EBDA7A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (activite-intro.dvi)
@start /Fa 198[33 33 33 33 33 33 33 33 33 33 48[{}10
58.1154 /CMR7 rf /Fb 138[48 40[57 71 46 74[{}4 83.022
/CMMI10 rf /Fc 222[83 27[42 4[65{}3 83.022 /CMSY10 rf
/Fd 133[42 3[50 53 37 38 39 50 1[48 1[80 3[27 53 1[29
44 53 42 1[46 13[53 6[57 75 49 36 75 75 60 63 73 69 68
72 6[27 38[48 19[{}31 83.022 /CMBX10 rf /Fe 226[57 57
28[{}2 41.511 /CMSY5 rf /Ff 133[37 3[44 46 32 33 33 44
46 42 46 69 23 2[23 46 42 25 37 46 37 46 42 10[62 62
1[46 2[57 65 1[76 52 5[54 2[60 59 62 1[39 1[65 1[23 23
6[42 42 42 1[42 23 28 23 2[32 32 23 19[42 42 4[46 46
12[{}50 83.022 /CMR10 rf /Fg 137[62 65 46 46 46 1[65
59 65 1[33 2[33 65 2[52 65 52 1[59 29[85 1[88 13[59 4[33
39 5[33 19[59 19[{}22 119.552 /CMR12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -313 -561
a
SDict begin H.S end
 -313 -561 a -313 -561 a
SDict begin H.R end
 -313 -561 a -313 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -313
-561 a 0 TeXcolorgray Black 0 TeXcolorgray -305 -246
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -305 -246 a -305 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -305 -246 a -305 -246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -305
-246 a -305 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -305 -246 a -305 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -305 -246
a -305 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -305 -246 a -305 -246 a
SDict begin H.S end
 -305 -246 a -305
-246 a
SDict begin 12 H.A end
 -305 -246 a -305 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -305 -246 a 0 TeXcolorgray
0 TeXcolorgray 123 -311 a Fg(Chapitre)37 b(3)i(-)g(Activit)m(\023)-55
b(e)36 b(d'in)m(tro)s(duction)f(-)k(Asso)s(cier)f(v)m(ecteur)g(et)g
(translation.)p 56 -419 3649 4 v 56 -261 4 160 v 3701
-261 V 56 -259 3649 4 v -305 38 a Ff(On)28 b(consid)n(\022)-39
b(ere)25 b(onze)383 31 y Fe(\034)462 38 y Ff(\015)n(\022)-39
b(ec)n(hes)717 31 y Fe(\035)774 38 y Ff(,)28 b(app)r(el)n(\023)-39
b(es)26 b Fd(v)m(ecteurs)p Ff(.)j(Chacune)e(d'en)n(tre)g(elles)g(repr)n
(\023)-39 b(esen)n(te)26 b(une)i(translation.)557 1635
y

 557 1635 a 557 1635 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 0.0 0.0 moveto

 0.0 0.0 moveto

 317.48286 0.0 lineto

 0.0 19.84267 moveto

 317.48286 19.84267 lineto

 0.0 39.68535 moveto

 317.48286 39.68535 lineto

 0.0 59.52802 moveto

 317.48286 59.52802 lineto

 0.0 79.37071 moveto

 317.48286 79.37071 lineto

 0.0 99.2134 moveto

 317.48286 99.2134 lineto

 0.0 119.05606 moveto

 317.48286 119.05606 lineto

 0.0 138.89876 moveto

 317.48286 138.89876 lineto

 0.0 158.74142 moveto

 317.48286 158.74142 lineto

 0.0 178.57713 moveto

 317.48286 178.57713 lineto

 0.0 0.0 moveto

 0.0 178.5841 lineto

 19.84267 0.0 moveto

 19.84267 178.5841 lineto

 39.68535 0.0 moveto

 39.68535 178.5841 lineto

 59.52802 0.0 moveto

 59.52802 178.5841 lineto

 79.37071 0.0 moveto

 79.37071 178.5841 lineto

 99.2134 0.0 moveto

 99.2134 178.5841 lineto

 119.05606 0.0 moveto

 119.05606 178.5841 lineto

 138.89876 0.0 moveto

 138.89876 178.5841 lineto

 158.74142 0.0 moveto

 158.74142 178.5841 lineto

 178.5841 0.0 moveto

 178.5841 178.5841 lineto

 198.42679 0.0 moveto

 198.42679 178.5841 lineto

 218.26947 0.0 moveto

 218.26947 178.5841 lineto

 238.11215 0.0 moveto

 238.11215 178.5841 lineto

 257.95482 0.0 moveto

 257.95482 178.5841 lineto

 277.79752 0.0 moveto

 277.79752 178.5841 lineto

 297.6402 0.0 moveto

 297.6402 178.5841 lineto

 317.4759 0.0 moveto

 317.4759 178.5841 lineto

 317.48286 178.5841 moveto

 pgfstr

 restore

 save

 0.99628 pgfw

 0 0 1 setrgbcolor

 19.84267 119.05606 moveto

 76.48607 156.81836 lineto

 pgfstr

 save

 [0.83202 0.55467 -0.55467 0.83202 76.48607 156.81834 ] concat

 save 3.46704 0.0 moveto 2.02243 0.28891 -0.57784 0.86674 -2.31136
2.1669 curveto -0.86674 0.57784 -0.86674 -0.57784 -2.31136 -2.1669
curveto -0.57784 -0.86674 2.02243 -0.28891 3.46704 0.0 curveto closepath
pgffill restore

 restore

 restore

 39.68535 138.89876 moveto

 pgfstr

 save

 0 0 1 setrgbcolor

 save

 0 0 1 setrgbcolor

 restore

 save

 [1.0 0.0 0.0 1.0 43.20517 143.91298 ] concat

 pgfs


 557 1635 a
 0 0 1 setrgbcolor
 557 1635 a -36 x Fc(\000)-63
b(!)557 1635 y Fb(u)605 1647 y Fa(1)557 1635 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 0 0 1 setrgbcolor

 138.89876 99.2134 moveto

 101.13646 155.85678 lineto

 pgfstr

 save

 [-0.55467 0.83202 -0.83202 -0.55467 101.13647 155.85678 ] concat

 save 3.46704 0.0 moveto 2.02243 0.28891 -0.57784 0.86674 -2.31136
2.1669 curveto -0.86674 0.57784 -0.86674 -0.57784 -2.31136 -2.1669
curveto -0.57784 -0.86674 2.02243 -0.28891 3.46704 0.0 curveto closepath
pgffill restore

 restore

 restore

 119.05606 128.9774 moveto

 pgfstr

 save

 0 0 1 setrgbcolor

 save

 0 0 1 setrgbcolor

 restore

 save

 [1.0 0.0 0.0 1.0 105.36357 117.51299 ] concat

 pgfs


 557 1635
a
 0 0 1 setrgbcolor
 557 1635 a -36 x Fc(\000)g(!)557 1635 y Fb(u)605 1647
y Fa(2)557 1635 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 0 0 1 setrgbcolor

 158.74142 119.05606 moveto

 195.326 137.34837 lineto

 pgfstr

 save

 [0.89436 0.44717 -0.44717 0.89436 195.32599 137.34837 ] concat

 save 3.46704 0.0 moveto 2.02243 0.28891 -0.57784 0.86674 -2.31136
2.1669 curveto -0.86674 0.57784 -0.86674 -0.57784 -2.31136 -2.1669
curveto -0.57784 -0.86674 2.02243 -0.28891 3.46704 0.0 curveto closepath
pgffill restore

 restore

 restore

 178.5841 128.9774 moveto

 pgfstr

 save

 0 0 1 setrgbcolor

 save

 0 0 1 setrgbcolor

 restore

 save

 [1.0 0.0 0.0 1.0 182.10393 117.51299 ] concat

 pgfs


 557 1635 a
 0 0 1 setrgbcolor
 557 1635 a -36 x Fc(\000)g(!)557
1635 y Fb(u)605 1647 y Fa(3)557 1635 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 0 0 1 setrgbcolor

 297.6402 138.89876 moveto

 221.63298 157.90065 lineto

 pgfstr

 save

 [-0.97014 0.24251 -0.24251 -0.97014 221.633 157.90063 ] concat

 save 3.46704 0.0 moveto 2.02243 0.28891 -0.57784 0.86674 -2.31136
2.1669 curveto -0.86674 0.57784 -0.86674 -0.57784 -2.31136 -2.1669
curveto -0.57784 -0.86674 2.02243 -0.28891 3.46704 0.0 curveto closepath
pgffill restore

 restore

 restore

 257.95482 138.89876 moveto

 pgfstr

 save

 0 0 1 setrgbcolor

 save

 0 0 1 setrgbcolor

 restore

 save

 [1.0 0.0 0.0 1.0 252.86848 127.43433 ] concat

 pgfs


 557 1635 a
 0 0 1 setrgbcolor
 557
1635 a -36 x Fc(\000)g(!)557 1635 y Fb(u)605 1647 y Fa(4)557
1635 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 0 0 1 setrgbcolor

 39.68535 119.05606 moveto

 39.68535 82.83777 lineto

 pgfstr

 save

 [0.0 -1.0 1.0 0.0 39.68535 82.83777 ] concat

 save 3.46704 0.0 moveto 2.02243 0.28891 -0.57784 0.86674 -2.31136
2.1669 curveto -0.86674 0.57784 -0.86674 -0.57784 -2.31136 -2.1669
curveto -0.57784 -0.86674 2.02243 -0.28891 3.46704 0.0 curveto closepath
pgffill restore

 restore

 restore

 39.68535 99.2134 moveto

 pgfstr

 save

 0 0 1 setrgbcolor

 save

 0 0 1 setrgbcolor

 restore

 save

 [1.0 0.0 0.0 1.0 43.20517 87.74898 ] concat

 pgfs


 557 1635 a
 0 0 1 setrgbcolor
 557 1635 a -36 x Fc(\000)g(!)557 1635
y Fb(u)605 1647 y Fa(5)557 1635 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 0 0 1 setrgbcolor

 99.2134 119.05606 moveto

 61.45108 62.41266 lineto

 pgfstr

 save

 [-0.55467 -0.83202 0.83202 -0.55467 61.4511 62.41266 ] concat

 save 3.46704 0.0 moveto 2.02243 0.28891 -0.57784 0.86674 -2.31136
2.1669 curveto -0.86674 0.57784 -0.86674 -0.57784 -2.31136 -2.1669
curveto -0.57784 -0.86674 2.02243 -0.28891 3.46704 0.0 curveto closepath
pgffill restore

 restore

 restore

 79.37071 89.29204 moveto

 pgfstr

 save

 0 0 1 setrgbcolor

 save

 0 0 1 setrgbcolor

 restore

 save

 [1.0 0.0 0.0 1.0 82.89053 77.82762 ] concat

 pgfs


 557 1635 a
 0 0 1 setrgbcolor
 557 1635
a -36 x Fc(\000)g(!)557 1635 y Fb(u)605 1647 y Fa(6)557
1635 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 0 0 1 setrgbcolor

 119.05606 79.37071 moveto

 195.06328 60.36879 lineto

 pgfstr

 save

 [0.97014 -0.24251 0.24251 0.97014 195.06326 60.3688 ] concat

 save 3.46704 0.0 moveto 2.02243 0.28891 -0.57784 0.86674 -2.31136
2.1669 curveto -0.86674 0.57784 -0.86674 -0.57784 -2.31136 -2.1669
curveto -0.57784 -0.86674 2.02243 -0.28891 3.46704 0.0 curveto closepath
pgffill restore

 restore

 restore

 257.95482 99.2134 moveto

 pgfstr

 save

 0 0 1 setrgbcolor

 save

 0 0 1 setrgbcolor

 restore

 save

 [1.0 0.0 0.0 1.0 261.47464 104.22762 ] concat

 pgfs


 557 1635 a
 0 0 1 setrgbcolor
 557 1635 a -36 x Fc(\000)g(!)557 1635
y Fb(u)605 1647 y Fa(8)557 1635 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 0 0 1 setrgbcolor

 218.26947 99.2134 moveto

 294.17314 99.2134 lineto

 pgfstr

 save

 [1.0 0.0 0.0 1.0 294.17314 99.2134 ] concat

 save 3.46704 0.0 moveto 2.02243 0.28891 -0.57784 0.86674 -2.31136
2.1669 curveto -0.86674 0.57784 -0.86674 -0.57784 -2.31136 -2.1669
curveto -0.57784 -0.86674 2.02243 -0.28891 3.46704 0.0 curveto closepath
pgffill restore

 restore

 restore

 158.74142 69.44937 moveto

 pgfstr

 save

 0 0 1 setrgbcolor

 save

 0 0 1 setrgbcolor

 restore

 save

 [1.0 0.0 0.0 1.0 145.04892 57.98494 ] concat

 pgfs


 557 1635 a
 0 0 1 setrgbcolor
 557 1635
a -36 x Fc(\000)g(!)557 1635 y Fb(u)605 1647 y Fa(7)557
1635 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 0 0 1 setrgbcolor

 99.2134 39.68535 moveto

 62.99507 39.68535 lineto

 pgfstr

 save

 [-1.0 0.0 0.0 -1.0 62.99507 39.68535 ] concat

 save 3.46704 0.0 moveto 2.02243 0.28891 -0.57784 0.86674 -2.31136
2.1669 curveto -0.86674 0.57784 -0.86674 -0.57784 -2.31136 -2.1669
curveto -0.57784 -0.86674 2.02243 -0.28891 3.46704 0.0 curveto closepath
pgffill restore

 restore

 restore

 79.37071 39.68535 moveto

 pgfstr

 save

 0 0 1 setrgbcolor

 save

 0 0 1 setrgbcolor

 restore

 save

 [1.0 0.0 0.0 1.0 74.28436 44.69957 ] concat

 pgfs


 557 1635 a
 0 0 1 setrgbcolor
 557 1635 a -36 x Fc(\000)g(!)557 1635
y Fb(u)605 1647 y Fa(9)557 1635 y


 pgfr

 restore

 restore

 158.74142 39.68535 moveto

 pgfstr

 save

 0 0 1 setrgbcolor

 save

 0 0 1 setrgbcolor

 restore

 save

 [1.0 0.0 0.0 1.0 141.07762 28.22093 ] concat

 pgfs


 557 1635 a
 0 0 1 setrgbcolor
 557 1635
a -36 x Fc(\000)-30 b(!)557 1635 y Fb(u)605 1647 y Fa(10)557
1635 y


 pgfr

 restore

 restore

 238.11215 39.68535 moveto

 pgfstr

 save

 0 0 1 setrgbcolor

 save

 0 0 1 setrgbcolor

 restore

 save

 [1.0 0.0 0.0 1.0 220.44835 28.22093 ] concat

 pgfs


 557 1635 a
 0 0 1 setrgbcolor
 557 1635 a -36 x Fc(\000)g(!)557 1635
y Fb(u)605 1647 y Fa(11)557 1635 y


 pgfr

 restore

 restore

 297.6402 39.68535 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 239.26973 28.69345 ] concat

 pgfs


 557 1635 a
 0 setgray
 557 1635
a Ff(\(\022)-42 b(a)28 b(tracer)e(ici\))557 1635 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -305
1919 a Ff(Ci-dessous)19 b(son)n(t)g(repr)n(\023)-39 b(esen)n(t)n(\023)g
(es)16 b(douze)j(sc)n(h)n(\023)-39 b(emas.)18 b(Chacun)h(corresp)r(ond)
f(\022)-42 b(a)19 b(une)h(transformation)e(qui)i(transforme)3271
1912 y Fe(\034)3343 1919 y Ff(Fig)g(1)3539 1912 y Fe(\035)3615
1919 y Ff(en)3718 1912 y Fe(\034)3790 1919 y Ff(Fig)g(2)3986
1912 y Fe(\035)4042 1919 y Ff(.)-305 2118 y(Un)28 b(seul)g(de)g(ces)f
(sc)n(h)n(\023)-39 b(emas)25 b(ne)j(corresp)r(ond)e(pas)h(\022)-42
b(a)27 b(une)h(translation.)e(Lequel)14 b(?)37 b(.)13
b(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f
(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)
h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)495
3074 y

 495 3074 a 495 3074 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 0.2 .pgfsetfillopacityalpha

 19.84267 39.68535 moveto

 79.37071 39.68535 lineto

 59.52802 59.52802 lineto

 19.84267 39.68535 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 49.60667 19.84267 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 38.32935 25.29967 ] concat

 pgfs


 495 3074 a
 0 setgray
 495 3074 a Ff(Fig)27
b(1)495 3074 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 0.8 .pgfsetfillopacityalpha

 59.52802 59.52802 moveto

 119.05606 59.52802 lineto

 99.2134 79.37071 lineto

 59.52802 59.52802 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 138.89876 59.52802 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 127.62143 64.98503 ] concat

 pgfs


 495 3074 a
 0 setgray
 495 3074 a Ff(Fig)g(2)495 3074
y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 -9.92133 -9.92133 moveto

 -9.92133 89.29204 lineto

 168.66277 89.29204 lineto

 168.66277 -9.92133 lineto

 -9.92133 -9.92133 lineto

 pgfstr

 restore

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 -9.92133 -9.92133 moveto

 -9.92133 0.0 moveto

 168.66277 0.0 lineto

 -9.92133 19.84267 moveto

 168.66277 19.84267 lineto

 -9.92133 39.68535 moveto

 168.66277 39.68535 lineto

 -9.92133 59.52802 moveto

 168.66277 59.52802 lineto

 -9.92133 79.37071 moveto

 168.66277 79.37071 lineto

 0.0 -9.92133 moveto

 0.0 89.29204 lineto

 19.84267 -9.92133 moveto

 19.84267 89.29204 lineto

 39.68535 -9.92133 moveto

 39.68535 89.29204 lineto

 59.52802 -9.92133 moveto

 59.52802 89.29204 lineto

 79.37071 -9.92133 moveto

 79.37071 89.29204 lineto

 99.2134 -9.92133 moveto

 99.2134 89.29204 lineto

 119.05606 -9.92133 moveto

 119.05606 89.29204 lineto

 138.89876 -9.92133 moveto

 138.89876 89.29204 lineto

 158.74142 -9.92133 moveto

 158.74142 89.29204 lineto

 168.66277 89.29204 moveto

 pgfstr

 restore

 79.37071 -13.8898 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 54.1941 -24.32819 ] concat

 pgfs


 495 3074 a
 0 setgray
 495 3074 a Fd(Sc)m(h)n(\023)-46 b(ema)32
b(A)495 3074 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 2191 3074 a

 2191 3074 a 2191 3074 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 0.2 .pgfsetfillopacityalpha

 0.0 0.0 moveto

 19.84267 0.0 lineto

 19.84267 19.84267 lineto

 39.68535 59.52802 lineto

 39.68535 79.37071 lineto

 19.84267 79.37071 lineto

 19.84267 59.52802 lineto

 0.0 19.84267 lineto

 0.0 0.0 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 16.86638 49.60667 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -9.20808 47.17134 ] concat

 pgfs


 2191
3074 a
 0 setgray
 2191 3074 a Ff(Fig)c(1)2191 3074 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 0.2 .pgfsetfillopacityalpha

 79.37071 0.0 moveto

 99.2134 0.0 lineto

 99.2134 19.84267 lineto

 119.05606 59.52802 lineto

 119.05606 79.37071 lineto

 99.2134 79.37071 lineto

 99.2134 59.52802 lineto

 79.37071 19.84267 lineto

 79.37071 0.0 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 119.05606 19.84267 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 107.77873 25.29967 ] concat

 pgfs


 2191 3074 a
 0 setgray

2191 3074 a Ff(Fig)g(2)2191 3074 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 -9.92133 -9.92133 moveto

 -9.92133 89.29204 lineto

 148.82008 89.29204 lineto

 148.82008 -9.92133 lineto

 -9.92133 -9.92133 lineto

 pgfstr

 restore

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 -9.92133 -9.92133 moveto

 -9.92133 0.0 moveto

 148.82008 0.0 lineto

 -9.92133 19.84267 moveto

 148.82008 19.84267 lineto

 -9.92133 39.68535 moveto

 148.82008 39.68535 lineto

 -9.92133 59.52802 moveto

 148.82008 59.52802 lineto

 -9.92133 79.37071 moveto

 148.82008 79.37071 lineto

 0.0 -9.92133 moveto

 0.0 89.29204 lineto

 19.84267 -9.92133 moveto

 19.84267 89.29204 lineto

 39.68535 -9.92133 moveto

 39.68535 89.29204 lineto

 59.52802 -9.92133 moveto

 59.52802 89.29204 lineto

 79.37071 -9.92133 moveto

 79.37071 89.29204 lineto

 99.2134 -9.92133 moveto

 99.2134 89.29204 lineto

 119.05606 -9.92133 moveto

 119.05606 89.29204 lineto

 138.89876 -9.92133 moveto

 138.89876 89.29204 lineto

 148.82008 89.29204 moveto

 pgfstr

 restore

 69.44937 -13.8898 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 44.52875 -24.32819 ] concat

 pgfs


 2191 3074 a
 0 setgray
 2191 3074
a Fd(Sc)m(h)n(\023)-46 b(ema)33 b(B)2191 3074 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 495 4513
a

 495 4513 a 495 4513 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 -9.92133 -9.92133 moveto

 -9.92133 0.0 moveto

 168.66277 0.0 lineto

 -9.92133 19.84267 moveto

 168.66277 19.84267 lineto

 -9.92133 39.68535 moveto

 168.66277 39.68535 lineto

 -9.92133 59.52802 moveto

 168.66277 59.52802 lineto

 -9.92133 79.37071 moveto

 168.66277 79.37071 lineto

 -9.92133 99.2134 moveto

 168.66277 99.2134 lineto

 -9.92133 119.05606 moveto

 168.66277 119.05606 lineto

 0.0 -9.92133 moveto

 0.0 128.9774 lineto

 19.84267 -9.92133 moveto

 19.84267 128.9774 lineto

 39.68535 -9.92133 moveto

 39.68535 128.9774 lineto

 59.52802 -9.92133 moveto

 59.52802 128.9774 lineto

 79.37071 -9.92133 moveto

 79.37071 128.9774 lineto

 99.2134 -9.92133 moveto

 99.2134 128.9774 lineto

 119.05606 -9.92133 moveto

 119.05606 128.9774 lineto

 138.89876 -9.92133 moveto

 138.89876 128.9774 lineto

 158.74142 -9.92133 moveto

 158.74142 128.9774 lineto

 168.66277 128.9774 moveto

 pgfstr

 restore

 save

 0.99628 pgfw

 39.68535 19.84267 moveto

 39.68535 79.37071 lineto

 pgfstr

 restore

 save

 0.99628 pgfw

 19.84267 59.52802 moveto

 59.52802 59.52802 lineto

 pgfstr

 restore

 39.68535 59.52802 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 13.61087 49.20033 ] concat

 pgfs


 495 4513 a
 0 setgray
 495 4513 a Ff(Fig)27
b(1)495 4513 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 39.68535 99.2134 moveto

 59.52802 99.2134 moveto

 59.52802 110.17233 50.64429 119.05606 39.68535 119.05606 curveto

 28.72641 119.05606 19.84268 110.17233 19.84268 99.2134 curveto

 19.84268 88.25446 28.72641 79.37073 39.68535 79.37073 curveto

 50.64429 79.37073 59.52802 88.25446 59.52802 99.2134 curveto

 closepath

 39.68535 99.2134 moveto

 pgfstr

 restore

 save

 0.99628 pgfw

 119.05606 0.0 moveto

 119.05606 59.52802 lineto

 pgfstr

 restore

 save

 0.99628 pgfw

 99.2134 39.68535 moveto

 138.89876 39.68535 lineto

 pgfstr

 restore

 save

 0.99628 pgfw

 119.05606 79.37071 moveto

 138.89874 79.37071 moveto

 138.89874 90.32965 130.015 99.21338 119.05606 99.21338 curveto

 108.09712 99.21338 99.2134 90.32965 99.2134 79.37071 curveto

 99.2134 68.41177 108.09712 59.52803 119.05606 59.52803 curveto

 130.015 59.52803 138.89874 68.41177 138.89874 79.37071 curveto

 closepath

 119.05606 79.37071 moveto

 pgfstr

 restore

 119.05606 39.68535 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 92.98158 29.35765 ] concat

 pgfs


 495 4513 a
 0 setgray
 495 4513 a Ff(Fig)g(2)495 4513
y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 -9.92133 -9.92133 moveto

 -9.92133 128.9774 lineto

 168.66277 128.9774 lineto

 168.66277 -9.92133 lineto

 -9.92133 -9.92133 lineto

 pgfstr

 restore

 79.37071 -13.8898 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 54.38782 -24.32819 ] concat

 pgfs


 495 4513 a
 0 setgray
 495 4513 a Fd(Sc)m(h)n(\023)-46 b(ema)32
b(C)495 4513 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 2182 4513 a

 2182 4513 a 2182 4513 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 -9.92133 -9.92133 moveto

 -9.92133 0.0 moveto

 148.82008 0.0 lineto

 -9.92133 19.84267 moveto

 148.82008 19.84267 lineto

 -9.92133 39.68535 moveto

 148.82008 39.68535 lineto

 -9.92133 59.52802 moveto

 148.82008 59.52802 lineto

 -9.92133 79.37071 moveto

 148.82008 79.37071 lineto

 -9.92133 99.2134 moveto

 148.82008 99.2134 lineto

 -9.92133 119.05606 moveto

 148.82008 119.05606 lineto

 0.0 -9.92133 moveto

 0.0 128.9774 lineto

 19.84267 -9.92133 moveto

 19.84267 128.9774 lineto

 39.68535 -9.92133 moveto

 39.68535 128.9774 lineto

 59.52802 -9.92133 moveto

 59.52802 128.9774 lineto

 79.37071 -9.92133 moveto

 79.37071 128.9774 lineto

 99.2134 -9.92133 moveto

 99.2134 128.9774 lineto

 119.05606 -9.92133 moveto

 119.05606 128.9774 lineto

 138.89876 -9.92133 moveto

 138.89876 128.9774 lineto

 148.82008 128.9774 moveto

 pgfstr

 restore

 save

 0.99628 pgfw

 39.68535 0.0 moveto

 39.68535 39.68535 lineto

 19.84267 79.37071 lineto

 pgfstr

 restore

 save

 0.99628 pgfw

 39.68535 39.68535 moveto

 59.52802 79.37071 lineto

 pgfstr

 restore

 39.68535 29.764 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 13.61087 27.32866 ] concat

 pgfs


 2182
4513 a
 0 setgray
 2182 4513 a Ff(Fig)c(1)2182 4513 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 99.2134 39.68535 moveto

 99.2134 79.37071 lineto

 79.37071 119.05606 lineto

 pgfstr

 restore

 save

 0.99628 pgfw

 99.2134 79.37071 moveto

 119.05606 119.05606 lineto

 pgfstr

 restore

 99.2134 69.44937 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 102.73322 67.01402 ] concat

 pgfs


 2182 4513 a
 0 setgray

2182 4513 a Ff(Fig)g(2)2182 4513 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 -9.92133 -9.92133 moveto

 -9.92133 128.9774 lineto

 148.82008 128.9774 lineto

 148.82008 -9.92133 lineto

 -9.92133 -9.92133 lineto

 pgfstr

 restore

 69.44937 -13.8898 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 44.2105 -24.32819 ] concat

 pgfs


 2182 4513 a
 0 setgray
 2182 4513
a Fd(Sc)m(h)n(\023)-46 b(ema)33 b(D)2182 4513 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 412 5786
a

 412 5786 a 412 5786 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 19.84267 79.37071 moveto

 59.52802 99.2134 lineto

 79.37071 79.37071 lineto

 59.52802 39.68535 lineto

 19.84267 79.37071 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 49.60667 69.44937 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 38.32935 67.01402 ] concat

 pgfs


 412 5786 a
 0 setgray
 412 5786 a Ff(Fig)27
b(2)412 5786 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 99.2134 59.52802 moveto

 138.89876 79.37071 lineto

 158.74142 59.52802 lineto

 138.89876 19.84267 lineto

 99.2134 59.52802 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 124.01672 49.60667 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 127.53654 55.06369 ] concat

 pgfs


 412 5786 a
 0 setgray
 412 5786 a Ff(Fig)g(1)412 5786
y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 -9.92133 -9.92133 moveto

 -9.92133 109.13472 lineto

 188.50543 109.13472 lineto

 188.50543 -9.92133 lineto

 -9.92133 -9.92133 lineto

 pgfstr

 restore

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 -9.92133 -9.92133 moveto

 -9.92133 0.0 moveto

 188.50543 0.0 lineto

 -9.92133 19.84267 moveto

 188.50543 19.84267 lineto

 -9.92133 39.68535 moveto

 188.50543 39.68535 lineto

 -9.92133 59.52802 moveto

 188.50543 59.52802 lineto

 -9.92133 79.37071 moveto

 188.50543 79.37071 lineto

 -9.92133 99.2134 moveto

 188.50543 99.2134 lineto

 0.0 -9.92133 moveto

 0.0 109.13472 lineto

 19.84267 -9.92133 moveto

 19.84267 109.13472 lineto

 39.68535 -9.92133 moveto

 39.68535 109.13472 lineto

 59.52802 -9.92133 moveto

 59.52802 109.13472 lineto

 79.37071 -9.92133 moveto

 79.37071 109.13472 lineto

 99.2134 -9.92133 moveto

 99.2134 109.13472 lineto

 119.05606 -9.92133 moveto

 119.05606 109.13472 lineto

 138.89876 -9.92133 moveto

 138.89876 109.13472 lineto

 158.74142 -9.92133 moveto

 158.74142 109.13472 lineto

 178.5841 -9.92133 moveto

 178.5841 109.13472 lineto

 188.50543 109.13472 moveto

 pgfstr

 restore

 89.29204 -13.8898 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 64.68275 -24.32819 ] concat

 pgfs


 412 5786 a
 0 setgray
 412 5786 a Fd(Sc)m(h)n(\023)-46 b(ema)32
b(E)412 5786 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 2348 5786 a

 2348 5786 a 2348 5786 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 0.99628 pgfw

 29.764 49.60667 moveto

 44.64601 49.60667 moveto

 44.64601 57.82588 37.98322 64.48868 29.764 64.48868 curveto

 21.5448 64.48868 14.882 57.82588 14.882 49.60667 curveto

 14.882 41.38747 21.5448 34.72467 29.764 34.72467 curveto

 37.98322 34.72467 44.64601 41.38747 44.64601 49.60667 curveto

 closepath

 29.764 49.60667 moveto

 pgfstr

 restore

 19.84267 39.68535 moveto

 19.84267 59.52802 lineto

 pgfstr

 29.764 19.84267 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 18.48668 25.29967 ] concat

 pgfs


 2348
5786 a
 0 setgray
 2348 5786 a Ff(Fig)27 b(2)2348 5786 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 69.44937 49.60667 moveto

 84.33138 49.60667 moveto

 84.33138 57.82588 77.66858 64.48868 69.44937 64.48868 curveto

 61.23016 64.48868 54.56735 57.82588 54.56735 49.60667 curveto

 54.56735 41.38747 61.23016 34.72467 69.44937 34.72467 curveto

 77.66858 34.72467 84.33138 41.38747 84.33138 49.60667 curveto

 closepath

 69.44937 49.60667 moveto

 pgfstr

 restore

 59.52802 39.68535 moveto

 59.52802 59.52802 lineto

 pgfstr

 69.44937 19.84267 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 58.17203 25.29967 ] concat

 pgfs


 2348 5786
a
 0 setgray
 2348 5786 a Ff(Fig)g(1)2348 5786 y


 pgfr

 restore

 restore

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 -9.92133 -9.92133 moveto

 -9.92133 0.0 moveto

 109.13472 0.0 lineto

 -9.92133 19.84267 moveto

 109.13472 19.84267 lineto

 -9.92133 39.68535 moveto

 109.13472 39.68535 lineto

 -9.92133 59.52802 moveto

 109.13472 59.52802 lineto

 -9.92133 79.37071 moveto

 109.13472 79.37071 lineto

 -9.92133 99.2134 moveto

 109.13472 99.2134 lineto

 0.0 -9.92133 moveto

 0.0 109.13472 lineto

 19.84267 -9.92133 moveto

 19.84267 109.13472 lineto

 39.68535 -9.92133 moveto

 39.68535 109.13472 lineto

 59.52802 -9.92133 moveto

 59.52802 109.13472 lineto

 79.37071 -9.92133 moveto

 79.37071 109.13472 lineto

 99.2134 -9.92133 moveto

 99.2134 109.13472 lineto

 109.13472 109.13472 moveto

 pgfstr

 restore

 save

 0.99628 pgfw

 -9.92133 -9.92133 moveto

 -9.92133 109.13472 lineto

 109.13472 109.13472 lineto

 109.13472 -9.92133 lineto

 -9.92133 -9.92133 lineto

 pgfstr

 restore

 49.60667 -13.8898 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 25.15652 -24.32819 ] concat

 pgfs


 2348 5786 a
 0 setgray
 2348
5786 a Fd(Sc)m(h)n(\023)-46 b(ema)32 b(F)2348 5786 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc



0 TeXcolorgray 1860 6310 a Ff(1)p 0 TeXcolorgray eop
end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -313
-561 a
SDict begin H.S end
 -313 -561 a -313 -561 a
SDict begin H.R end
 -313 -561 a -313 -561
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -313 -561 a 0 TeXcolorgray -305 -450 3600 4 v 0 TeXcolorgray
-168 942 a

 -168 942 a -168 942 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 0.0 39.68535 moveto

 119.05606 39.68535 lineto

 99.2134 19.84267 lineto

 19.84267 19.84267 lineto

 0.0 39.68535 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 0.99628 pgfw

 79.37071 39.68535 moveto

 79.37071 79.37071 lineto

 pgfstr

 restore

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 59.52802 79.37071 moveto

 79.37071 79.37071 lineto

 79.37071 99.2134 lineto

 59.52802 99.2134 lineto

 59.52802 79.37071 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 49.60667 19.84267 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 53.1265 25.29967 ] concat

 pgfs


 -168 942 a
 0 setgray
 -168 942
a Ff(Fig)27 b(1)-168 942 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 178.5841 0.0 moveto

 257.95482 0.0 lineto

 277.79752 19.84267 lineto

 158.74142 19.84267 lineto

 178.5841 0.0 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 0.99628 pgfw

 198.42679 19.84267 moveto

 198.42679 59.52802 lineto

 pgfstr

 restore

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 198.42679 59.52802 moveto

 218.26947 59.52802 lineto

 218.26947 79.37071 lineto

 198.42679 79.37071 lineto

 198.42679 59.52802 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 208.34813 0.0 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 211.86795 5.457 ] concat

 pgfs


 -168 942 a
 0 setgray
 -168 942 a Ff(Fig)g(2)-168
942 y


 pgfr

 restore

 restore

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 -9.92133 -9.92133 moveto

 -9.92133 0.0 moveto

 287.71884 0.0 lineto

 -9.92133 19.84267 moveto

 287.71884 19.84267 lineto

 -9.92133 39.68535 moveto

 287.71884 39.68535 lineto

 -9.92133 59.52802 moveto

 287.71884 59.52802 lineto

 -9.92133 79.37071 moveto

 287.71884 79.37071 lineto

 -9.92133 99.2134 moveto

 287.71884 99.2134 lineto

 0.0 -9.92133 moveto

 0.0 109.13472 lineto

 19.84267 -9.92133 moveto

 19.84267 109.13472 lineto

 39.68535 -9.92133 moveto

 39.68535 109.13472 lineto

 59.52802 -9.92133 moveto

 59.52802 109.13472 lineto

 79.37071 -9.92133 moveto

 79.37071 109.13472 lineto

 99.2134 -9.92133 moveto

 99.2134 109.13472 lineto

 119.05606 -9.92133 moveto

 119.05606 109.13472 lineto

 138.89876 -9.92133 moveto

 138.89876 109.13472 lineto

 158.74142 -9.92133 moveto

 158.74142 109.13472 lineto

 178.5841 -9.92133 moveto

 178.5841 109.13472 lineto

 198.42679 -9.92133 moveto

 198.42679 109.13472 lineto

 218.26947 -9.92133 moveto

 218.26947 109.13472 lineto

 238.11215 -9.92133 moveto

 238.11215 109.13472 lineto

 257.95482 -9.92133 moveto

 257.95482 109.13472 lineto

 277.79752 -9.92133 moveto

 277.79752 109.13472 lineto

 287.71884 109.13472 moveto

 pgfstr

 restore

 save

 0.99628 pgfw

 -9.92133 -9.92133 moveto

 -9.92133 109.13472 lineto

 287.71884 109.13472 lineto

 287.71884 -9.92133 lineto

 -9.92133 -9.92133 lineto

 pgfstr

 restore

 138.89876 -13.8898 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 113.5492 -24.32819 ] concat

 pgfs


 -168 942 a
 0 setgray
 -168 942 a Fd(Sc)m(h)n(\023)-46 b(ema)32
b(G)-168 942 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 2668 942 a

 2668 942 a 2668 942 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 19.84267 79.37071 moveto

 59.52802 99.2134 lineto

 99.2134 79.37071 lineto

 79.37071 39.68535 lineto

 39.68535 39.68535 lineto

 19.84267 79.37071 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 59.52802 59.52802 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 63.04784 64.98503 ] concat

 pgfs


 2668
942 a
 0 setgray
 2668 942 a Ff(Fig)c(1)2668 942 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 19.84267 39.68535 moveto

 59.52802 59.52802 lineto

 99.2134 39.68535 lineto

 79.37071 0.0 lineto

 39.68535 0.0 lineto

 19.84267 39.68535 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 59.52802 19.84267 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 63.04784 25.29967 ] concat

 pgfs


 2668 942 a
 0 setgray
 2668
942 a Ff(Fig)g(2)2668 942 y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 19.84267 79.37071 moveto

 59.52802 99.2134 lineto

 99.2134 79.37071 lineto

 79.37071 39.68535 lineto

 39.68535 39.68535 lineto

 19.84267 79.37071 lineto

 pgfstr

 restore

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 -9.92133 -9.92133 moveto

 -9.92133 0.0 moveto

 148.82008 0.0 lineto

 -9.92133 19.84267 moveto

 148.82008 19.84267 lineto

 -9.92133 39.68535 moveto

 148.82008 39.68535 lineto

 -9.92133 59.52802 moveto

 148.82008 59.52802 lineto

 -9.92133 79.37071 moveto

 148.82008 79.37071 lineto

 -9.92133 99.2134 moveto

 148.82008 99.2134 lineto

 0.0 -9.92133 moveto

 0.0 109.13472 lineto

 19.84267 -9.92133 moveto

 19.84267 109.13472 lineto

 39.68535 -9.92133 moveto

 39.68535 109.13472 lineto

 59.52802 -9.92133 moveto

 59.52802 109.13472 lineto

 79.37071 -9.92133 moveto

 79.37071 109.13472 lineto

 99.2134 -9.92133 moveto

 99.2134 109.13472 lineto

 119.05606 -9.92133 moveto

 119.05606 109.13472 lineto

 138.89876 -9.92133 moveto

 138.89876 109.13472 lineto

 148.82008 109.13472 moveto

 pgfstr

 restore

 save

 0.99628 pgfw

 -9.92133 -9.92133 moveto

 -9.92133 109.13472 lineto

 148.82008 109.13472 lineto

 148.82008 -9.92133 lineto

 -9.92133 -9.92133 lineto

 pgfstr

 restore

 79.37071 -13.8898 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 54.0419 -24.32819 ] concat

 pgfs


 2668 942 a
 0 setgray
 2668 942 a Fd(Sc)m(h)n(\023)-46
b(ema)33 b(H)2668 942 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 328 2546 a

 328 2546 a 328 2546
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 59.52802 39.68535 moveto

 79.37071 59.52802 lineto

 79.37071 99.2134 lineto

 59.52802 39.68535 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 79.37071 59.52802 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 82.89053 64.98503 ] concat

 pgfs


 328 2546 a
 0 setgray
 328 2546 a Ff(Fig)27 b(1)h(=)f(Fig)g(2)328
2546 y


 pgfr

 restore

 restore

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 -9.92133 -9.92133 moveto

 -9.92133 0.0 moveto

 168.66277 0.0 lineto

 -9.92133 19.84267 moveto

 168.66277 19.84267 lineto

 -9.92133 39.68535 moveto

 168.66277 39.68535 lineto

 -9.92133 59.52802 moveto

 168.66277 59.52802 lineto

 -9.92133 79.37071 moveto

 168.66277 79.37071 lineto

 -9.92133 99.2134 moveto

 168.66277 99.2134 lineto

 -9.92133 119.05606 moveto

 168.66277 119.05606 lineto

 -9.92133 138.89876 moveto

 168.66277 138.89876 lineto

 0.0 -9.92133 moveto

 0.0 148.82008 lineto

 19.84267 -9.92133 moveto

 19.84267 148.82008 lineto

 39.68535 -9.92133 moveto

 39.68535 148.82008 lineto

 59.52802 -9.92133 moveto

 59.52802 148.82008 lineto

 79.37071 -9.92133 moveto

 79.37071 148.82008 lineto

 99.2134 -9.92133 moveto

 99.2134 148.82008 lineto

 119.05606 -9.92133 moveto

 119.05606 148.82008 lineto

 138.89876 -9.92133 moveto

 138.89876 148.82008 lineto

 158.74142 -9.92133 moveto

 158.74142 148.82008 lineto

 168.66277 148.82008 moveto

 pgfstr

 restore

 save

 0.99628 pgfw

 -9.92133 -9.92133 moveto

 -9.92133 148.82008 lineto

 168.66277 148.82008 lineto

 168.66277 -9.92133 lineto

 -9.92133 -9.92133 lineto

 pgfstr

 restore

 79.37071 -13.8898 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 56.35269 -24.32819 ] concat

 pgfs


 328 2546 a
 0 setgray
 328 2546 a Fd(Sc)m(h)n(\023)-46 b(ema)32
b(I)328 2546 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 2586 2546 a

 2586 2546 a 2586 2546 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 59.52802 59.52802 moveto

 99.2134 59.52802 lineto

 99.2134 79.37071 lineto

 79.37071 79.37071 lineto

 79.37071 99.2134 lineto

 59.52802 99.2134 lineto

 59.52802 59.52802 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 59.52802 59.52802 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 63.04784 64.98503 ] concat

 pgfs


 2586
2546 a
 0 setgray
 2586 2546 a Ff(Fig)27 b(1)2586 2546 y


 pgfr

 restore

 restore

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 -9.92133 -9.92133 moveto

 -9.92133 0.0 moveto

 168.66277 0.0 lineto

 -9.92133 19.84267 moveto

 168.66277 19.84267 lineto

 -9.92133 39.68535 moveto

 168.66277 39.68535 lineto

 -9.92133 59.52802 moveto

 168.66277 59.52802 lineto

 -9.92133 79.37071 moveto

 168.66277 79.37071 lineto

 -9.92133 99.2134 moveto

 168.66277 99.2134 lineto

 -9.92133 119.05606 moveto

 168.66277 119.05606 lineto

 -9.92133 138.89876 moveto

 168.66277 138.89876 lineto

 0.0 -9.92133 moveto

 0.0 148.82008 lineto

 19.84267 -9.92133 moveto

 19.84267 148.82008 lineto

 39.68535 -9.92133 moveto

 39.68535 148.82008 lineto

 59.52802 -9.92133 moveto

 59.52802 148.82008 lineto

 79.37071 -9.92133 moveto

 79.37071 148.82008 lineto

 99.2134 -9.92133 moveto

 99.2134 148.82008 lineto

 119.05606 -9.92133 moveto

 119.05606 148.82008 lineto

 138.89876 -9.92133 moveto

 138.89876 148.82008 lineto

 158.74142 -9.92133 moveto

 158.74142 148.82008 lineto

 168.66277 148.82008 moveto

 pgfstr

 restore

 save

 0.99628 pgfw

 -9.92133 -9.92133 moveto

 -9.92133 148.82008 lineto

 168.66277 148.82008 lineto

 168.66277 -9.92133 lineto

 -9.92133 -9.92133 lineto

 pgfstr

 restore

 79.37071 -13.8898 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 55.56398 -24.32819 ] concat

 pgfs


 2586 2546
a
 0 setgray
 2586 2546 a Fd(Sc)m(h)n(\023)-46 b(ema)32 b(J)2586
2546 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 73 4150 a

 73 4150 a 73 4150 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 0.0 99.2134 moveto

 19.84267 99.2134 lineto

 59.52802 79.37071 lineto

 79.37071 79.37071 lineto

 79.37071 138.89876 lineto

 59.52802 138.89876 lineto

 19.84267 119.05606 lineto

 0.0 119.05606 lineto

 0.0 99.2134 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 19.84267 128.9774 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 23.36249 134.43442 ] concat

 pgfs


 73 4150 a
 0 setgray
 73 4150
a Ff(Fig)c(1)73 4150 y


 pgfr

 restore

 restore

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 -9.92133 -9.92133 moveto

 -9.92133 0.0 moveto

 228.19081 0.0 lineto

 -9.92133 19.84267 moveto

 228.19081 19.84267 lineto

 -9.92133 39.68535 moveto

 228.19081 39.68535 lineto

 -9.92133 59.52802 moveto

 228.19081 59.52802 lineto

 -9.92133 79.37071 moveto

 228.19081 79.37071 lineto

 -9.92133 99.2134 moveto

 228.19081 99.2134 lineto

 -9.92133 119.05606 moveto

 228.19081 119.05606 lineto

 -9.92133 138.89876 moveto

 228.19081 138.89876 lineto

 0.0 -9.92133 moveto

 0.0 148.82008 lineto

 19.84267 -9.92133 moveto

 19.84267 148.82008 lineto

 39.68535 -9.92133 moveto

 39.68535 148.82008 lineto

 59.52802 -9.92133 moveto

 59.52802 148.82008 lineto

 79.37071 -9.92133 moveto

 79.37071 148.82008 lineto

 99.2134 -9.92133 moveto

 99.2134 148.82008 lineto

 119.05606 -9.92133 moveto

 119.05606 148.82008 lineto

 138.89876 -9.92133 moveto

 138.89876 148.82008 lineto

 158.74142 -9.92133 moveto

 158.74142 148.82008 lineto

 178.5841 -9.92133 moveto

 178.5841 148.82008 lineto

 198.42679 -9.92133 moveto

 198.42679 148.82008 lineto

 218.26947 -9.92133 moveto

 218.26947 148.82008 lineto

 228.19081 148.82008 moveto

 pgfstr

 restore

 save

 0.99628 pgfw

 -9.92133 -9.92133 moveto

 -9.92133 148.82008 lineto

 228.19081 148.82008 lineto

 228.19081 -9.92133 lineto

 -9.92133 -9.92133 lineto

 pgfstr

 restore

 138.89876 39.68535 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 142.41858 45.69586 ] concat

 pgfs


 73 4150 a
 0 setgray
 73 4150 a Ff(Fig)g(2)f(\(\022)-42
b(a)27 b(compl)n(\023)-39 b(eter\))73 4150 y


 pgfr

 restore

 restore

 109.13472 -13.8898 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 83.799 -24.32819 ] concat

 pgfs


 73 4150
a
 0 setgray
 73 4150 a Fd(Sc)m(h)n(\023)-46 b(ema)33 b(K)73 4150
y


 pgfr

 restore

 restore

 save

 0.99628 pgfw

 119.05606 39.68535 moveto

 119.05606 59.52802 lineto

 99.2134 59.52802 lineto

 pgfstr

 restore

 restore

 newpath

 restore

 pgfc


 2420 4150 a

 2420 4150 a 2420 4150 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 0.99628 pgfw

 /pgffc{0.7 setgray}def

 79.37071 59.52802 moveto

 79.37071 99.2134 lineto

 59.52802 119.05606 lineto

 119.05606 119.05606 lineto

 99.2134 99.2134 lineto

 99.2134 59.52802 lineto

 79.37071 59.52802 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 89.29204 99.2134 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 78.01471 104.6704 ] concat

 pgfs


 2420 4150 a
 0 setgray
 2420
4150 a Ff(Fig)28 b(2)2420 4150 y


 pgfr

 restore

 restore

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 -9.92133 -9.92133 moveto

 -9.92133 0.0 moveto

 208.34813 0.0 lineto

 -9.92133 19.84267 moveto

 208.34813 19.84267 lineto

 -9.92133 39.68535 moveto

 208.34813 39.68535 lineto

 -9.92133 59.52802 moveto

 208.34813 59.52802 lineto

 -9.92133 79.37071 moveto

 208.34813 79.37071 lineto

 -9.92133 99.2134 moveto

 208.34813 99.2134 lineto

 -9.92133 119.05606 moveto

 208.34813 119.05606 lineto

 -9.92133 138.89876 moveto

 208.34813 138.89876 lineto

 0.0 -9.92133 moveto

 0.0 148.82008 lineto

 19.84267 -9.92133 moveto

 19.84267 148.82008 lineto

 39.68535 -9.92133 moveto

 39.68535 148.82008 lineto

 59.52802 -9.92133 moveto

 59.52802 148.82008 lineto

 79.37071 -9.92133 moveto

 79.37071 148.82008 lineto

 99.2134 -9.92133 moveto

 99.2134 148.82008 lineto

 119.05606 -9.92133 moveto

 119.05606 148.82008 lineto

 138.89876 -9.92133 moveto

 138.89876 148.82008 lineto

 158.74142 -9.92133 moveto

 158.74142 148.82008 lineto

 178.5841 -9.92133 moveto

 178.5841 148.82008 lineto

 198.42679 -9.92133 moveto

 198.42679 148.82008 lineto

 208.34813 148.82008 moveto

 pgfstr

 restore

 save

 0.99628 pgfw

 -9.92133 -9.92133 moveto

 -9.92133 148.82008 lineto

 208.34813 148.82008 lineto

 208.34813 -9.92133 lineto

 -9.92133 -9.92133 lineto

 pgfstr

 restore

 save

 0.99628 pgfw

 138.89876 59.52802 moveto

 158.74142 59.52802 lineto

 138.89876 39.68535 lineto

 pgfstr

 restore

 158.74142 19.84267 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 116.45493 25.85318 ] concat

 pgfs


 2420 4150 a
 0 setgray
 2420 4150
a Ff(Fig)g(1)f(\(\022)-42 b(a)27 b(compl)n(\023)-39 b(eter\))2420
4150 y


 pgfr

 restore

 restore

 89.29204 -13.8898 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 65.001 -24.32819 ] concat

 pgfs


 2420 4150 a
 0 setgray
 2420 4150 a Fd(Sc)m(h)n(\023)-46 b(ema)33
b(L)2420 4150 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -305 4701 a Fd(Ce)f(que)g(v)m(ous)g(dev)m(ez)g(faire)g
(:)p -305 4731 1048 4 v 28 w Ff(:)-305 4748 y
SDict begin H.S end
 -305 4748
a -305 4748 a
SDict begin 12 H.A end
 -305 4748 a -305 4748 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -305 4748 a 0 TeXcolorgray
81 x Fc(\005)p 0 TeXcolorgray 41 w Ff(asso)r(cier)22
b(\022)-42 b(a)23 b(c)n(haque)g(v)n(ecteur)f(le)i(sc)n(h)n(\023)-39
b(ema)21 b(corresp)r(ondan)n(t)h(\022)-42 b(a)23 b(la)g(translation)f
(asso)r(ci)n(\023)-39 b(ee)21 b(\022)-42 b(a)23 b(ce)g(v)n(ecteur.)g
(Compl)n(\023)-39 b(eter)22 b(le)i(tableau)f(suiv)-5
b(an)n(t)23 b(:)p 91 4940 3662 4 v 91 5139 4 200 v 397
5080 a(V)-7 b(ecteurs)p 1009 5139 V 1090 5044 a Fc(\000)-63
b(!)1090 5080 y Fb(u)1138 5092 y Fa(1)p 1252 5139 V 1333
5044 a Fc(\000)g(!)1333 5080 y Fb(u)1381 5092 y Fa(2)p
1495 5139 V 1576 5044 a Fc(\000)g(!)1576 5080 y Fb(u)1624
5092 y Fa(3)p 1738 5139 V 1819 5044 a Fc(\000)g(!)1819
5080 y Fb(u)1867 5092 y Fa(4)p 1981 5139 V 2062 5044
a Fc(\000)g(!)2062 5080 y Fb(u)2110 5092 y Fa(5)p 2225
5139 V 2305 5044 a Fc(\000)g(!)2305 5080 y Fb(u)2353
5092 y Fa(6)p 2468 5139 V 2548 5044 a Fc(\000)g(!)2548
5080 y Fb(u)2596 5092 y Fa(7)p 2711 5139 V 2791 5044
a Fc(\000)g(!)2791 5080 y Fb(u)2839 5092 y Fa(8)p 2954
5139 V 3035 5044 a Fc(\000)f(!)3035 5080 y Fb(u)3083
5092 y Fa(9)p 3197 5139 V 3278 5044 a Fc(\000)-31 b(!)3278
5080 y Fb(u)3326 5092 y Fa(10)p 3473 5139 V 3554 5044
a Fc(\000)h(!)3554 5080 y Fb(u)3602 5092 y Fa(11)p 3749
5139 V 91 5143 3662 4 v 91 5342 4 200 v 144 5282 a Ff(Sc)n(h)n(\023)-39
b(ema)26 b(corresp)r(ondan)n(t)p 1009 5342 V 1252 5342
V 1495 5342 V 1738 5342 V 1981 5342 V 2225 5342 V 2468
5342 V 2711 5342 V 2954 5342 V 3197 5342 V 3473 5342
V 3749 5342 V 91 5345 3662 4 v -305 5428 a
SDict begin H.S end
 -305 5428
a -305 5428 a
SDict begin 12 H.A end
 -305 5428 a -305 5428 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -305 5428 a 0 TeXcolorgray
85 x Fc(\005)p 0 TeXcolorgray 41 w Ff(tracer)h(les)g(\014gures)g
(incompl)n(\022)-39 b(etes)26 b(ou)h(manquan)n(tes)g(\(sc)n(h)n(\023)
-39 b(emas)26 b Fb(J)8 b Ff(,)28 b Fb(K)33 b Ff(et)28
b Fb(L)p Ff(\))13 b(;)-305 5548 y
SDict begin H.S end
 -305 5548 a -305 5548
a
SDict begin 12 H.A end
 -305 5548 a -305 5548 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -305 5548 a 0 TeXcolorgray
93 x Fc(\005)p 0 TeXcolorgray 41 w Ff(tracer)27 b(le)g(v)n(ecteur)397
5606 y Fc(\000)-30 b(!)397 5641 y Fb(u)445 5653 y Fa(11)543
5641 y Ff(sur)27 b(le)g(quadrillage)f(situ)n(\023)-39
b(e)27 b(en)h(tout)g(d)n(\023)-39 b(ebut)27 b(d'activit)n(\023)-39
b(e.)p 0 TeXcolorgray -305 6211 3600 4 v -305 6310 a(Chapitre)27
b(3)h(-)f(Activit)n(\023)-39 b(e)27 b(d'in)n(tro)r(duction)331
b(P)n(age)26 b(2/2)1164 b(Mme)28 b(Beudez)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
