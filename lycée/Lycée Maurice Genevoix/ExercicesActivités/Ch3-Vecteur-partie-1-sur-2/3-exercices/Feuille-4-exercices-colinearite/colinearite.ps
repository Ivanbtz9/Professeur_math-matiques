%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: colinearite.dvi
%%CreationDate: Fri Aug 20 15:27:37 2021
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMR12 CMSY10 CMBX10 CMMI10 CMR10 CMSY8
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips.exe -o colinearite.ps colinearite.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.08.20:1727
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSY8
%!PS-AdobeFont-1.0: CMSY8 003.002
%%Title: CMSY8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY8 known{/CMSY8 findfont dup/UniqueID known{dup
/UniqueID get 5096649 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY8 def
/FontBBox {-30 -955 1185 779 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY8.) readonly def
/FullName (CMSY8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /prime put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D80B73E7B6CB7548
0E1D77FFC695988391DC44AEED8CC947B3D7E198B9620E2238DB3A2819182F03
14498B8CDFBA48926DA721920B221FB33BC21A8456AF10891403501D0F6415F0
7E041AFFE109F640E54FC1A365674711EFF94E752652A4C8DA62CDB1149DB899
2C4A4BD77A06E81E93C5698C05DD02F74A0756082738BDB53003B483752AE498
DD718AEA8F3FB5A6B7E2D2AE8F309065F3D556F9A34AB90C88833A54295E0982
209C466A301BA3372AABEE20D862C6DC6B6FAC1463C8CBA8AD766ED1B4C9D712
2BECB4E6ABF558D8AB5281C35726BB8D046982C0DDAE17BFFC9394125E4E84C0
B283977D31460B8EED4346CCB09F64DA0ACB640C6DBF32F2DC30D54668C1CC12
24C7280593088E9958C047125C323E9C842801346A9CE5F50413D69F6DE99471
65D2E387765E92EA4C43F17B467DF6E266D92551009C0E52E7219AE9F5E2E8D2
88852086FF3600BFB50AF3EAF8C009D8D5F084B510F792385F328F7EFA8C38AD
CDAB2EEDFBC6AA45F6DD7364C2F02DD2BE6C79C8361E83D4267CEC2407689864
B57B5D967FC80AB3BE8CA43955FB0FD3081D438437559AD24A7ADD484C1E4A77
B00BDCB0D1B121FEE983412E1EA5489BDCE5DCB4A7310135956B230C0DE7BBED
516369A92BC41FAC8D73490984942D930DC193BF0C774C1AEF627B969EE4B001
11381AC57815D7581E2372A1DB740B09F4A7FB4318B765DA4E7B44E8805CEF85
44EC3B10613FE7B397BF91B69A5CB2E9086D1E7A1FAE0A9ABF2A237A2D29ABFF
E392A18AEACBF28274E775D3FBAED4F46B982B9DA4602E24094EDCCBC9D6FC0F
67C60376879245606C0B9C9A678E8917516BE1CF097B1C75C9F0DDAD6899F08F
81FB7A198D45FE060CD2A550D9B8D58B882B969D7BC3EC018A1FE92BDB262835
26516FF97AC387EA525FF987E5EB1EAAE4EA5866C9CC043D183763C530F7D7A1
2070E4044507C4E5611FCC117FBE4396E0B24F672CD53D5FDFA56D561FB86D40
90A52A7C7F29A119DFFB694A8C445367746A49CA5FA83163BE448EB19625DF26
609A8C8672631A10411036CAA3D6C2F822A4B2505DCBE8E1CE6916AE515E78CE
E8C894B134BF811671D17C19248853131DFFAEDB24B15FF17EAC194662460642
48D23515AD434C68DF56753806FE96DB3A29F9D4980E0B6EAED7383F9FAD2584
8F85679D6D1933677ADF5D31FE6E43DABF137E834A1DEA632D36EA5728625159
8F33348893C9D1C510501628E4A9A80587DF6E179FAF68B158406A3EBCD726E2
AC17F2DF8B3607072824D2E5A6479F7BADE32E603E54E7A83BB2DFDEDB0D80CD
1F1BDD4F6C9025CC3A8A3685DF10A8183FA80CE0F0FE2BFF2500F76B1037AE41
56D2D7FB468C3CA7549E3599A2AACF66302572F1B35BC8EF7C23F6FC4B720228
1D673D903111CE378AAE83480B4DEB7EA84BB35F4F7BE997DD4FFF5A9B5E7650
3C7365BA0965B242DC369D03215651184024A08EC284F1798B0726152884B4D8
46411B3BC8F5CB53A70AD53BD7B1AF23528849B56CF2F75609FE715878CF6448
38579380688B47AE3D374B0DB6ECA5B8284414090123D47F3F9DF389E023F431
6B4C0DDEE4190DEEF4CA772742012754DA9A44A8F550FADA6D8FB0C512D5BA2C
BB7DF71B1DA41FB6936BA71B710CC6A80751E43436F0F5888F51AB370DD4A088
40F402661E08732C960705C7E0D29B8DA1A8A3E119409E51EE575E9655F47568
023977917C8EC610BEBDB9C1F4EBC192084D63EAA00EC87B53E86620BB5AE51A
579B0F8E1972CE1DA02832FC75184F45409DD9D413402C2FA27BCB0AE6DB4CE1
5AFB114E23232DE07C4674969A1FC94D152C6D3A611F029ACF4D949A2C0755D0
31C7DACDBB4DFCFAF7E87295CCF5D4AE28D87ABC3533D87EEF1507B9FF9063F7
F007DF03734A20BC3A198B049000C92D2849C62DDAA719FC28EB372793E20128
D786670E08948808BA45C4F6AA0DD8A8357CCC47228A760C5C7864853BD9C9A4
285E446CB72C5C9D3F03FAB000810DC5674061FA116153040743E846506CFA67
FA8770E785D7DBC7293F37389A0859CC22275B23C44B57B92A033A7BD194340A
D6BAC6E103402F8396A5394C617CB2A27D9500921D5DA06115EC81715EA8E360
4A95DCE8689CBE268B8E6C8B806CFB0ECBF634250243C9E1AFFACAD65311FA4C
1DB0988203537E5EF12B86FB454D06CF05E4F4FC4143D62920E99304245B6ABC
82E21192BE94F5E980DB21E07FEDF0EB0CAF4ABDFC20EF08A2A44A7940E2862E
08FABA516152DBA899D6CA561EB08C7C8298DD511084E5230CEBF28AB1D84C85
B5BAF4616C28FE05AFA4BABB3BA03F8CEEF3F3EB0D3034BD3D8D06629B8E9EBD
72484057E71C9EB4DFC7C2CE7749271AC926C2419D618FB0B60FD6F81F0F2C04
E529CC74DCC9E4AF32D935D7CA65FBD0842A7BAF162D08F782E65DF3AD9EFE69
198AFA9208B22BC21BC4ECABB9BFFBA84C8421B74748E1EAAACEB59E566838F2
C439579D6C75074F94493F7D5C8942D881AAE6302C37A61003AF77684EE99AD7
EB5EEEF050C52E75E4E842F8174470FA60CB213BB6F257EEB26CC55D1202931B
B981DE2535A87CF37BFF912220C117EE166CCAE58BBF624170FFBC0716726B36
304D698F2CA131675F7B1199E6581B8C812C4FAF75814282477BE2B7EBCBA7C2
FA6356B2876F89698C6C2493989E9EB252DE03BB374622A7C88B8EE9FEB4851E
02F85CF70CDCA7BED5EC94E81170FB557C3BFC6F32CD70B506E56A2CC5451592
130C6F570C679577C44D60A811DCEFB3535D855259B1021AC168DB76DD38B459
F1813E3DB20AD9275D58880CE94058490ABBBB0D8DD16D4A65F680B30057F15D
07FF54D779CC978E90A850A2D8D79961EE276BB26B594C16F56557435671A3D8
ADD3DD0BC4BC73B0652B9DA8462FE614A14A11ADB2214EC4910823FB4CEC8938
24354C5C62547EE5710FB5ECD93AA45DEA7411F6CA8D5B5FA222685E622AD73C
1BD5DFD1C8F253352D6C7D14FF2FACF07CA5EB11392C6A33E9CABFD99F743BED
55E8DEF49E07B9444171D1780C698E5B65B540F41F845AC188DC7C0C8B5BA5F3
546BEAAA4F29F0DF30D5AC12A60862742623100074457BF2D820DCAAB340C1DF
22FF26992DC02F276B40A7C528C84B72CD189A4088C90070486C49A1014FDDA3
5093FC12DAF309FBC063653E6A33E14EB51B081126AB5BCB8016E975060B796D
6CBFDFE6CB9E191F12E309254BDD6660E3227012F5DADE246B02B6D8127F1EE2
248F48DC5ABBD229748444420C868450602120664984FE3A8B2373232CE5CA15
E67172CAF7EA99F73A66AE33B1EDE5E8351DB02497CE3338930147873D4E46B5
E918F5592A21789FA9F46232BE693DFC33240E2649D6AC1940B101D806089436
F0CE230BF6D0363510378822891DBD3EEF3365430E74FB6C994BB40C8EEDA593
CEDAFEBC3B87C7C04F52FBD7D557A77B44855CDBEC8A8D26F44D66446B5662AD
15B6B79D13BD262D79BF51C09F8F690A61C7F11EC2E05F6BEDA273648E9E1EBC
3D5F1D6ED486797F753064ADDA8494405556D43D395B1487EDE877CCC1EAE954
1AEE2513DDA94897B733609E8179DFE1975590568202EF20D58A89B34874CC3A
A5579473AC65E0EE61545AEF578ADE10BE3FB3E2CDC96678F613E4DEF7BC1B38
8A551C93438A0540E292F65F1FA73D9AB30A5F545284085E4930A570C1807995
7108AA8194607304488616DD4AB189F8EDC5F4507AEFD7847817A8ECFFDD2DD5
DE95E04EAF2774F8AF661827229F01E769A32734097C457EB6FF056D90C46C5E
9F936AA6BF2EE8244BBEDB8862E56423F5845BB10C8809730B011D650EA18945
83C320A3F4ED095A5EF91929FC877ECC28A1C2CE74A53245E629BF46C6534983
307B1C94EB35CECDEE86551F0C308F66690E591C5D9D8FE14F534CF3F5DB6D32
39D7C799F392C4E65759B7BF61F4D8312E3B26C31466206A367A0DD7A90D25E2
805D36ED5CE0A4BEBCAC0A348FADD2D2AAD670E28BE6E33F627B4A9F35078B1D
6688084C4C18840673EF9B3526172EE14EF64E97C8B006C27DF6EF73BA6E6459
3608F10EB1EC4B824DD5360B42AFF2084788B165747AABFB2C9C0EBBA9C6246C
08F28143809315D6268E386F09BBAC54C34213438B56C386B34AA457D149CC39
A3C163F56E3C2E637C63A79CF7F2DE969EF3AAFF75F3F20499A9ACA61279D545
866FFE57D25998244F448AAB042B141952BD653007A889B1A716A4042CBBB827
C1ED5E3C616C22D5FCB39D3B3539F9B71D50D25ECD2E5D953C7A5194C867DDB1
75CE10B2C3A20E8CDE15AAE9F549D034838DC066CA649C31EE365D46450AF18B
893748D055DD88C72391FD92DDF0AA1A1316051BC756F87BC9A425019B2FA7BD
CA9F35E89E2229B3021DD24C9DF0DC3217F44DCF510116DDC9E92EFDA3E0A892
491C8961CA484BA29B8CACD2FED2E246FA7414F892AF7B9F08698FDEC82D2E4D
8C6ED1FD9E0BA2645663E7E97B0F780033D025F2EF3B364574C03F04FFC4E09A
3D4182BBFCCCD8CA54A92434E2208803ED36F931D31C7498B7FCEE4B78AECF11
B27123A10F031F9CBA36066680E4748E346D18FD0EFA395D1A9227530618ADD9
64D96C50A0172F712CB427E8F7170F8A1691FB95B247A271499F0E63676BD64B
167438333A3BD9CD9641AC637E0ADB17F1E394DF34AF5A2BD02030DD087BBA02
E1209338B74075744A9A9966039AB6D223F385E06FF359257913E6C01BF32F5B
A3640C7CA41A6C51F296E50DC1CD1D68491CE5D75E0ABDD4C5C4A97C8BE2BA35
D91AF9F8F38E7AB8C1778B06A212D0416E6137087329AAA2679C51D014CC4DEF
0F1543E2FD97621E552E19B29AA1368CB5046C188BA59B1E1875B25FB269DD2D
C0678A42CD310702465694F2BF302AEBC43F714F7C657505132DDA71CD23D17D
628BF3400EB5DDFCE2850F31B40C5913394649AA4241CF646F3939916C2077AD
C11F8C3E478586AA7931E327333FCD8A2EB31DF4B47AA2F31B999556602DD998
5848143C0CBD0B5187DF08E675550F2384D48C2954EA7D16AD2B94DF97C194D2
302CC47BF968CB1F6C9641A87525D5C6972ACCA1D4A4B4DA8EC54BEA6E7312B3
2737754A9FCBED3BA5F8220B751506BB0A5BB5CF706AFCC04BFD713A3BE3C842
9FFDBAA0CA5691D0FCE76134841A169970903843163DE68FF09649E99945DB64
491FD6D8B2DF237DBAF550D1B74263B3BF1EF6211F40D4DF2DEC46E4DE557088
5D458A7CDC6F34B8C3F5C76582C8B7D24A333AAE0B43CA67436F8ECAD7C50B12
35BAAD521033D8024E4DFCF01580AEC63BD5F8ADB778F822AC4FF0DA608EB7CC
1A52A51B9F38FFADC0D2F4D8394C5D598123B483AE5AC1215F24F2492EBAA134
3C58AD4E3B493AABDF753EBF1F04058C6981C353D6788C2D3294165B667D3765
7883A8493F5D772F789F73979B254BB9397FDE4F8B76CA6FFF312F4B012949F4
3EDCF1AC60FFF2681549DFF430B498405E79CB407DADFCEDCAB1E2FAD3B0F4C7
B575A33EAFF9F67D37F50BB06D06834EA683862991C5BE340D4A7F8D131E733D
289F72977870F9958102F5D835739F0F5A642E7194E8AF7FDA2937E5C0712CE4
EE15CB475725030CE0F238C32775D3EC95CE3D0886046E3EEAE322F59D423E83
DE88DDAB5CE0F70537487EBA5A16A9306BA7DDCA14A85A9F83B3BC3600DC9421
BDADA2704A5A24F7174A3A486ACE68739EC5960038CB44D969A594E97AE1F42C
42C1B7E3A456B3CDFC7683537B337AA8777F18CA45B22C8BEB18877DC624496B
9E8EF9F386B7FE4D94ABD5CE3B5786E76FE04A35909C472C04654A4405932EE6
A4A3E0F6DB088603FDD82F0EFCB85A962002A662D1AD0647A2F484B59075A1FA
9F4327D542ED7962620B998ECC3A95CE736089593461CED9B5AAAB05C2DA3820
5AF29B32904E1EEC357C8E282189C6D8F562DB11291091E6897E24CD8F8E2A34
67F35D261E01336152E69831B0CC6B03FF1AC7EA22B745F513A25FE10F70E74A
3FD71FE1EC9999BEDE7CFA6A97EA2DF621711BE950FF8960965685BAAEA71FA6
36F165573A0A6A92DAEE41A9B0C97BF03419FF6BA1F44524D00FD671EACC4233
9A857680DFD27B9F1E7A760058C8277B3761DB9969241D1824A7DADF70BBFC38
89C6DB9091E3BFCB36851CB9662B365A4B7384BDBA1D385902D1E5DABA72A159
63790096B927EA49299AE03E41C7F593F3B995D1155E91C62D5F68845ED3C797
7798B56858F96C2FE2E37D812873B7801767082A6D6B60602CEB94B7F6D7A142
72814734DC584A18D1FFEA7333D4C7E2DFE5B91E9AD92EB52533CA52FA888980
C79FEEDF0FAFB3B20B497F9AB668BDAFA364B405916526D5C48E57DC30BC35B9
BF684FDFAD199D9A28541327F3899AD505FBBBBB22F419E22E0149EE5FDD2B43
AF442E2724EC16934C307FA731F90AD1C76B74569B78CDEA7C19808233C6364B
D049F3F50A68D3EC5F29F2B96BC58C44AF90FE13F244B7129F14B5DAC3F3F310
B330E67CA4EB76F895DAC8025F11EC7630EEB4826B5721348FA38F28B2AEEB1C
5F7CA413C486C94B1DD96988F07F7A08D3635E28624878E55D4FFBEB5E183CB5
93014D8A272EBCF3A09133603CFFEF43A6FF059BCE525706D3795884FB495748
C8AFB50DB464459A5C36D7CD087631BC09C693A11BDF1C6011D9864FE66EE8C0
4824A42E97D16E017C0BB73732D4537E2A5BB283B3568950E5681364DBC1D6DA
058A122862A44ED85029A7B39F2FA7C362D859D0B429E056891339626AE6091D
74F6110CA32F8F3E9507216997E6AD1A2F1FFBE8B407C9880DE230E234F6FD41
A291851178BEAE5DB9DEB22E3443807E2BCEF12A4AE8C490AA9E3D2918329F47
42314CD258A0760DE5FDAC4AF7209CEB530B8508B278952A3638CA8491C3B493
516F461610DBAF32E923ACB834B15E2D169A10F2609EC0ACDF7BDBC777DD2C19
2DB330FD557D3B06B78824D6AB237D8F2D57A7ED35F02CFA9290ED6893B41657
A2485524A3F1642FF5808FDB77015D9467EDAC4A6BBE8A175833B1225A5554F7
2C60207F7A2632A4023255E8EF1F38C1B8216C9B03319B60BEC9799E5378683F
46E698FA75F2DFD40F17C603F3335F1EC70DBA1449C7A33EDDD46CC3DE4A6557
EE67BF349AA8680FDBF415DC527129288B5879500180F75DF80394EC7CF11BC8
9EE9A4ABD64DE3076A2963F83FA333F19FF74F79ECF36A87A31D6F125FD2415B
3F6A6FC33C179F54CA164835F3C3DB62AF444BDF27AFF23098C7212477F688B8
6F48D9AD080D544D57FEDD33D3D9AED9346CBB644C97C951D4AEEB2BF6F0CB18
E2517BA7ADCFD00FE44E290E731D53E5C0D762FCBA08004562DCE6A5EF2FBB74
B3053CBED3B6E896B1C3356DD9E8FCB69691AAF6BEBA0424D62B9F266D560B40
89E20A9F35AD4A7F65A7183761ABBEE0F7EF26ED3565A25516A3A5A57143979A
1EEED8CD52A69E4E1AE4795F3EE0CA21B9F4D166783A9AF54B08B6C56703932A
310197E328C6E6A6BADAA11D66A952964F31FD690082FA02D1E2A4512A9F2742
33B203FB770A3A1C7490ED630D0FAEB3066429D0237E18818EC368D0DA72EB08
1951C70139EB0DD59EB53AF5039A7618C77F6CED9F0A066FED6FEE0C0E328351
BA39746C1224A29D191D8B86491E0A306ABA070CAA2756C3A33990EB6DDF34E8
06EAAFF94AE6686EEB06A17D6D020D1F4E59428D533DB0EDA6434E6E1A478D5C
2A0D08CB39DA7D5F5200199FFFE3F41729478D4F63AE01FC0BF3B378FF6402D1
CCF1BE5F191BAEAEC7FE400C9980E103D8776EC196E741AFE11D249E0C277263
80FBD329524C55943E25631F113FA0FABF7158AD9EA1231126A1CCB9E7F5CE1E
7335D0D645722B10E7EBABCA0A03F27ACE58927E0B902E5E91AC31280B9143C2
8B4A98BAEB5D8BF44ABB947DEDBFF8F1969651766DF77EB0184783B3D2AC1997
BA1109BDFE6FB08172926B58DB8DC803F40AF91B9FF17EE60E28F8400A01654C
6CB9C8CAF71A8C386A6F2F7E7613C70EF1BA0AFE58322C952018779DFC4D5C71
F3012F1020D93A14754E46AABDEB27955CAAD66F8326D26D2E1399F347DE645A
732942AC89
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 5 /diamondmath put
dup 14 /openbullet put
dup 33 /arrowright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E6E371B75D78AA87381B96012E722B1
3E1628DC89D9009FB38D9984AECC3367A8436F03DD58F85DD4971868D7949E02
6CB56141AFFBA6D3A542E3F222158E78F578DE2BF54778D2ED73BC39327DFE8C
CB65DFA3764417795ACEB160747229B1A13467CEE339DA1AC22C70F56C764ECC
79267B775D776A85DA769B409CB0089C91D6A134DDF0E392394477803A32D9B1
BFA16F3D80987AB66184747F6F5A2ED4CDCAB1F713AEC3387148FC4A65AF7C56
C335DDA0BA30BC84A6F1A0174F74032147A29EBF9834A6C02307A8046B536391
4FBE2CE1730692FF22F17421392EC5CFBFE657928957EAAC1A019AFAE3766D96
CC39A78D7CBF8E7049B8763EF63A0122C016C4795189BF4134788FB1DC065042
9927A4D7A48429F8F88B1AC72FB9B6A9C43624290BE0E8C6440DDFBA0CD96B6B
70D8659AE5E0E874FEAF7C2BBCB8F49BD2EE3A375E60ECB0C1593EEFA4D6EBA2
BE51ED502F33E42149BCCD84D1022EFC0ED35400E904B9CF48A6668CB8F15F91
44E36E8C2F5CD51868BE60BA890C88B33B0F28C174BE7AE72526B98A9A628D46
95BB3E54972CB0156B7CC6A0154CE9517FA9DD36B10EF2B94D96A3637EBB3CC2
D90F60D29C79967A43C907A7793759385B7921E81CEBD7DD88594DE4C6C943E3
1168B4A94EF5A590B0D6D3D4526570CB0D0FDDB41897126FA77D6A3A168F819E
FD904D14DB0248F20FCE2CABD79B7C2062F469F443133079AD2C197179920CF6
D8F9437B93291CC07A337C6B7F45F8E2582F73F1B6846C355131B3B2B4F48B23
25B33129B0CBFFD305A12CBB92B35774058C3C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 18 /grave put
dup 19 /acute put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 56 /eight put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 63 /question put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 83 /S put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 94 /circumflex put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F43F9A1290E91C463895BD12E8A831DAD661EF23CB9AD2C26CFB26
71B72D15270CD8CB1D59CA2D9DE884C96BB923B1EC8208BD7DCEAB0FC2293629
2AA1F72C6B470701C381E335C2364CFCEBACDD20CA36182CA7E70AFF5B14B02B
75CBD0738E35DAD8E60CB3DA4DDED557FF9ED386DA52D10615E700751C842FBC
85D89C0E713F556814E051C6CEFE7E83C2F379B88A801DDA565BE73013DD56D9
44D97798564787AE6D5A6A9FB777EEB850C7481B4A353EB9279731512C9B95D3
2ACA3A0D44585E55AFD968135F6492A9381FA2D126CF50373AB7D47B509AE6F5
C4B100BE8334ABE2268DAFB7983BF339540A8D8280F3576CDCD4F21408AA7D95
D50A7C1599E62D4FCAB001D5F9DA84FA530B88F2FE36B36F9968B5CF9FDBFA11
DCA0E08D087C4C5F4D744BFBA60FC22E964CE10AF512C228F4CFC3DB21E38CFE
AC11748F9B23F33426BC4AE3F026AA8178364703A31FFB8A31AB6328AA3B891E
A9410A536479A9A0378B1CE62E0205B073A9C3F004DB440C37234EC8C030E18A
42C47DD0FA1EE3521C98714EC451AB5E544183431A9C5254CA9A7F73A55B8B5D
A98941739E254A5DD0C519CDB28B2F4B9E4850788B0B46E26020DA98EE4E7AA3
9B55089D13329ACB496C86999B89ACF2099533DE1756F0248149468CC0F2C45A
CA7E24A4C93B99FB57A66912299D28DC5EA30C0D4DB0F6CDF4F8F910454D37E2
35E519763C2B61D2B1E6C3DE314A739F6DDBB748D0C6443D23FDFB6D6B162BE3
95DFA7EADEF780AF4D3EACFF2C28AB8FD4530E353E5270D5FA6599BA4CEECD08
BED2831AD39F1E8794319569D09632A4CD65FE1A20DE8FB18109D0F8B7EAE4F5
4715EACD45673984D60AF1EE897306A92F2BBF8556983A809C6A252FCF5F1D50
9A61002EA3132EB8461984D3224DBEB1ECAEE51C7A1D694E02AF6E9FEB358782
D178DFEC7FE0BA186FA69F0F2932CC6014BC40095A70E3535A76A7B6CB6F4AF1
C0A19268341ECC241EF23075961D6C77BC37A6072F59827D6CEB9F3A44DD8865
845DE5781CB55396A787D4C7797575C9D319CB13A33A394CE5D3122851E065A6
231DBCC6B7B645E30ECCABC655E1CF3397338DE5C961B3AA70DA22E24F5D5F7D
F0EE63A4AF916D59437C10F28C43761EDC0E66A5E026E1AC6CD7F476CA9492AE
B601D13CF1E95CB6B56DABF3E32F93D93BD5DB33248664535A61B22C5D2E7D4C
E1F13D801C553558A73ED92A45F7182B6749C5B522472EB1D39DB285D7EE1A4B
B516890407B39D34B68BB61B00B146D2E8F794C151C3107C077ECD6D1576A4D2
35D1B0B89E512B2D3017E044F87B8B46C868D6D2FAEF826C12ED0AC734005A73
6E671989D94E697F79D6C8DFF5E41548899E9612482A08D96F30FCE6D1817268
63C226FB21091450FD3DBB18715AF6BB4374196BF932A853CFD6845B643F4638
E5B0C8D18988C303EDFA8DB5570E5353A8288360A39F54E5E9D98BD5B3A86E92
633B32C3C2864C63C768C9FB963D2338E603449FA9B1B3AD90EC607C7859E34B
D92099E1AE77B2AEAE263BE4E118EBB01D8637EAE88194C2082D129CE7F02831
84B70CD604324D050BF5D846C42EF4F3AECC4A176B1EE20A0A79C57E147195C5
F41B4BE6894CEDC6D82D0A95CE800AC28500677F15B1A4491290BFA0567F93A5
550CD9DE28449FEB25E3E98734A0CA4A814D824EE4CA5383C6EB8BBD3B7F5B50
B31650CB2FE423841281E4C6A01C91057E19DFE4E3B44AD07CC1EBEE9FCAAFD8
7807C28BCCBB696E813BE9158CE63745BE17C5591EEDC1B75251BF0846CD26AC
D58239B1DB2381E2F8C8F39B718EC07B718553023E108C72F3FAED9FB88ABCEB
E0F3B6032109A61C15F46FD36A71D990776D3F735A7DD2B0CC640B08B8D58617
7DB014AB4D745196AAF73F063917F50A9F4D52A44E36C743DC41FEBA86EED469
DE41EB9F77874C49A7955E704EC7A9D64A7AA7F4BDE5E9315B4AFC92C682AD18
A29502835D8900E4EE361FBB044A853EB94D553D50D60D7B576B958780A86E89
DF637B777B16C0F388D78B8A4C47A8648A567A89550FF4F0A8F1AFB3A1F7CDE0
4BEB48AE6647582C86E8E870E5269215FE9D25E543ECA6FF69E3356EABB2A3FA
53C5FFC2C0ACC902C3D5B2112E0896857035D0122013757C6D44541D71A3FEEF
C1EB250289826E5D4CFED37596ED2AA84E131B81C49E3FEF372304528D02BCB7
ECFACA7FA44044CF1E14A0A63CF1977EE91E63B563C4F45D0F82A5A951C40E0E
74769685BD6C650D9B3A60ED709A0C2579ECFB44A8BC8A169B2FE6443B4BA406
B14B641B777E756DC5B9CF1C87BB9CC05BB354020BF0C27F175DE924FBDA98F8
2B36B423B7DF05C27F4826D3A367A24930E7085F7B9D4B40F8908234F17B1527
4840BE330C5CC451CC3175611EC5D4BAC56BD53045E9BDDDCCD03A3A1B713F13
3FDBE309D76E0B21B5D5A2D90EB78D46523FDD516DB96C94AC8B20D270B50A8D
3A743D5E41F801D65F03AD74393AB3183B6CFF6AD1B28CA296A8D404FEC23895
DF4EFCAEF9039BF92B1A79C9C70906CE98CC8D199F71C9B3616A0FFEE4B896B8
A19DFD39ED9AE7281DDE7007C48A4A733AA38973CF4CDA769467A7656B85982F
FAD6E203525EFF9EAC38638B0465685FC896607994A8408C5F84E3E7781B5C5B
812D70497638D4991FD23B847467B4091C919F6999A07868D7564D069D890098
2BE98D2D705F7A2E45D5CBB010200600F0F37AADE5BED2698E34B2496B335882
DC7503F49F5A9DB260797D22AB48E74475F2358168848EA6901ADC71AD6B00A4
4BD9587ABEA3DB19A1638A609B27B93E2299C3EED6ABC11F3404DFB91962B3EC
4C92238E57345DF144731D52460C6479D38806A062797EEB9D9E604E16AB929E
54C97E9B57981BA528840E4C5F98BC050A5C19D339591113DD4AFF5A50CCEF0A
26AEFD0620414860832D64B6BBF89FCBB3AF180671B6EFF4B42E090149689403
A6CC975F19CDEFF10A3D35C861F0FC7C25DD5ACBACD4BC959D5D05E540124D19
032394C992CBE3F9927B213F4BE115E3D7F52529509EE8624D92417852501A72
58DF2BA832668C602252ACB4A1D3BD0B76103F8BA4AE09E8A071EAE1B894487C
0010D6C31AF82047C67E36FDA32D86B1EFA7AA8F36AE722410BE4309B158CCD2
D78FC5DC297F83F1500FE9A95034D488A88573533EAA8CFCF106D6D1FEC1876C
60D3F934EAD47B45692A40EE8BC4AF6B75992D4B60F1CF59911E6E7918CBB6D7
6B8C99557B3FC7047128FCEEB0A101C52F7A064609F650A429F54B372902B18D
A52BBF4D3026611A8BF63DFA249862397EF03F5A97F86A457CA84CD148D62159
53E222C1AB7FD85FA6A521A4B8AC5E94B1BCF0F7185DF081DD48796E7CFA8790
1452810BA6AF5ECBB97A140C81DB51EE31751A35078983017D62E55D83D53E56
40AAA9635A1EF8E1D837315650CE735475FF6FA3A199D0BE8B64398B2D0F1108
DE8E0B489EAE7998EAB74428190F3A885B74D5CAF5BFA68276D56F8D8A12CCC1
8FE152A03BD4B049ECEC181FEE5B31086DDD3B35D44599050728042445593319
5DCFF5BE34754BE75779A6C12D3BAC92E531C5C45BB0C5512D50FAA648A982A4
183E78571E7866775B38546222000BD81D2770945D3D6768EF6A1A7694E1FC7E
62FF088BE11FC3DD9686EADD75F30412DA6AACD4E74B101230BA9142606F7BF8
F2C0F92CCA49C489AC56BB4FAEB441E8C802B9622BF30C27280DB9C590B1FCD1
48CEEB6547D233056815EB8BFF330C02A4DBD658B221C05A8FC5E484431A26BC
FD38D49DC880FAAAF8C234CCC84E874B160F4127D1975F2CCF7F0A72701A3C8A
A881EABFBFBA84A84C9BC409CEDE4662D6827144FCEDAF975369C207624A67E4
6004D00FC98AA977A1B4EBA0C50D1075ED37D321E86C16138DD83D00D8DB5BD0
75857D2C66E45D0ECD2687A8A7DCC9220989AA86CA06961425A18051A0C0C9A6
D017EE7E574B862576F5EA495F51E1B3A86090E7F1FC11A7338F380927E5F20F
65E61032E53BD00CFFBF5E361F25AEF923E6760935484D96C302DA8F70501714
3F0E0142EBCDA919B96F4EF6C5ACFFCD25915FDA3E1E8B3CA890BD15DE20FC75
3EF396D6B421528F9DF4E0AE2A2DBCE621AF7A5475BDC14F4BB1CF169C2ABEFF
00312D5B8811C2FBB9A938A0CF1F520C90B8EBB7F4754F53E17FF8387560211D
C3A26BD62E8ECEACE04904B1A6F5DBAD0B70459EFFAFE56EB032422847EDDB37
51C6FB8E2F28605AB46FD6C575202F7B4B9268E1F3D065E8B633143B9672CE2B
4E3FE94448F0A8E288A3190A2F8ECD905C15AD8957305817109C445698222B67
134E82F4C209EA169898D797A83CE9CE89139CAA50E10414671AC2C849401E60
C88C4BB5EC350AA7B1F3366465E308E71016487B8570DA2FB466003D7C50945E
7DEF65F900A108B728AD65A013B759766AD0DB59B1997D3A0DEDBBB8010F0358
D442FBC16AE785FED22C20AB36CF36FAA8E1BAAEFAC92A23BD8590922831C8D9
D80C59906BD3D7A765949D969C224C7B820B1F4739B125ACB681BFF84209F93E
71914B7C6CAAAD18175ADE5C7E4A35850F1F24BA3C4B350CD5BDE2911BB1E65F
34A372729E3400BB2FDF1FC782FED4B48477A21ADCDC2EB0E8EF05FD2DE0129A
CB4F30BCC35D11AEBB272E70DB8D02F2F73F6814564FBFAF4B0B74E0A6419A5D
35AAD3C3DD096C33D63A8BF0F710B6E7A334B2AF01AE43CDB7E03E7281666742
8F069797549ADEFBD88D0D37D8182255D34A9B0B4E1FD784E1FC692834343399
4C5E38F8CFE77E5435829A69E2B42AED8B819FC9FC8DFF459B71C66EE3B859DB
3BB5E226AF83AE9FCB64BC539EE7A03F123CB5D9C1C478E730BE17BFB73A4893
EDA1EAD85A81D3A65686076F618F7F6E96C8E78292BE0BBFF8728731538D8B01
5D692F1D73E94DB63D4405E5F7BA72354E45196CF564C70E1CFCE38ACF0616BA
EBDA32FB7BE075A774ABABF5AC58A6E357E0363B197F62F6308772F76681767D
74986B926AAAD87B8473392F89E2FFDB41A137E467EEA537D3DCD6F8252CCA44
7272F3571958BB8ABF2C9606202136EE98130CB5F8E77EC26EDA19D71D6E6C76
21BEEE166B5C6BC80047381642617D61CA1CA03112065FFD7477AC5139DC003E
67E1633654FD991F6ED17C41FDE3C3A2951BFDBD0662523BA06B40C4DAD036AD
C9288734ED9F577456EBA047EE77E31BE3EEF66D2FA19C9A9FE64228CFD56E74
C3DC2A325932A4EABB46272191E820E9A863D75CB449933B9767199C4038546C
E9C44D44589CE2DFD7CEF2B15480BBA511787892195EAF95F787F409F10701CF
C1299DFCB75991F3AC15C10D7881ADFA22DDD2119FEB21B4DE5B63511E8300E8
B4F5CCDE858957056C56B935ED87B24F31E9ED6D9439E6DF917C0164C5A1F030
379C015A65D1B050B31A3E9F1FBBEC5B3037F2C9B02B90C1DA0F0423DE3400B5
640EB74BCBDD0A861ED0C0C96FBD0BD7C3934224D7FA96C386E4139C7A7ABDB3
A508C717FD6E5C71FE13DF5C26189B18A5F11D58EFC280BA5CBA57104A17D8E5
1B2AE839200963DFED6DABF4676157CCEF553E2EEA97C5F182D536F2DC957049
2F976B167AE2CD9FD3EABC13768B85CAC9463069F0342EA1585560D898629979
2EC129D77CDB21F7B922627425BD98C51E7635B64DA446EEC469E464DA8F7D0C
A60205116AB7833F5CBE733F0521A843E8D4487C4E7DC9C01504832D49F6D2F3
8427567DE089FCF2263FA6696E337699AEB39A5B930272C205F6B5EE84DFDBB3
CD01029AC92A376A1BA137EBAB217006434687FE13EA3CBBC48B9E3DEE7E3A1D
48B87D265AEA282231B7474ED1DC1962118FB55EAF47E9D6EC865180E4DDAFDA
EB4E7FF7B9B903A6D16646A4094990DA9E18A785AFC80B66B5CE7233DA65F1B3
67E83BE9B06BAEB5C8BD824FD5E867D1CC57854AFE8308341D1C17A1DC4AEDA1
3ECB022FECE24D3EEFDF19F8E138A7FF5147CE08EABF0BB97AD613E53A0BDE5E
8E305546370BB151895EADB452B08A5D3927B15ACAF787C842A25D1164DFCB50
104338E49FC00F07977E3FF1263CCCB0D0FD2A927643691A0307CFE894292276
13C3FA65500F4B754E322B87462B681F0E7413CE952949B6E026F85EC6E99E5B
90DB3FCD3667A59C0490DB19EAD101D7D3F250B926F9737A711BA640499E4418
A43309A7C9888F10EB5678A2A27361737D140649E8D8DC9D4F609F872CF41ECA
0A20D942E6EDC99BE666504D56C64E6A552BA2E9D32F7369E91D240E589D561B
0FA524EA372E349CC69ACA1CC653551E446167EF5DB5F587783FB92EACE38640
633A7B7C3049BD676CA2C7DA9CA932449A53874C5CF8F0347828FAE0B818077A
82B18B73B9A42243F625241ED36C9AC52A0619ACF2364A3291452CA76E184B54
0452F78FA3820035607B659CF4F4CD4D996E7444E9B966B44661CBD7F5907B19
7438A6234C0B4C73F7DCD2EEF65D755875D0F5C32385B072BB84A0A65CFC8324
649FB70922376AD0F02C7BC91978605513206CF9EB9998641AAB4A576B209DB4
2E578164792D31C39B59235453AE52BB61E88509A61D1D781DBCC1B6EF5E7A24
64AE92C9D0DDCF9FA3E29B63A7D7912B209F462EB7EF3F8BAA1C15C321BF84F7
33399F4FED3DAAC5E305739A31F2E0778825ED631CC7897D2DED630207DA1A74
97B1E8E64D93403F05C3A5FB5700F38854A425B0599DB3ED282062D0E706B5A2
AE435DB7F9BCEEDF388F3348263E262AB125C2F644B4FD400702FC64C46DFA53
B1819615DA2C677DFBBE6BD6F54ED59DE83B5C8DF1AE35CAA7D1FFF8483D0315
E6826E1A1AC35EBDE4575FD5AB65F8B6669C4CB12ABAE4E1372370C77CCAFE6F
A24B751DB668C96CC92F14FE4F89517D4C0753A0741C25F7C4853FBA824ABA81
48DE482CF17B53E0B26C5C08F64E0A7070A8C070D0FDEBEE1FACEE386AD0FA23
050B0EC2B5B859F07C8D74865737714A14B0B214584F37C545743D19C22AB918
A8FE675F496D4D81893F1D0D1813D44CE3C71BFDB434D9DFCD909A0A122F3250
6203DF622847A60A3D93C8150A26ED233DCE1EA838F081F70FD7627275FEA523
B6EBE286D17EA06A146EF653CFF8DFBB285BE2E392D2C263BCE8EAD0551A4CE9
959C7D5D4594F979EBDB22FEFDA28F09EF63176D68C5F15B3DCA4D2F8FEB2404
9928B01E78C6FCB53888461CB0791C0C163E6E98F2345C883BAD449656B1E8AE
E28078FC080ECD1F34092ADABDBC080FE16C8DFDE948F3FBBCA4D26CD195B48F
043BF72D2EC6532271A3EC91C67EA91C3AB214CB0B2EA31431E021415F64CC34
251125385AF1647A8650BA3E3180A0755DD0C75E30E9F1A243346DE27EAA7C1E
C90F28C50E091D8B01BC7BB8C90A6B54AD594345D7DF7019DF6C31092C067DC5
DED3E5AAB55EFC8408AD2062697CA7B0A7B895F3650828D8F23044E361ED2DEF
2B80A550613B637F19614B321B0A53FA7134C75A0282FA702D4D29D0471FAE73
D453EC03D8210A3415A7B0093E6CF1D2F47E498A77C3EF83E8C79616D052EE0E
F4602D2B7695E7A10DD34909440554E735279B705C8C0712176B10EAA95C07DE
9F269284E34E98846830B416A1829941FAF7587A7DD7322489118A67B0DA26A9
235C76FC301041B4461513BBE89321A176C3E40A85CE8A7336565D93FE1E06D6
A2C79340F6524C37CEFDBD8F6AF416F0E9AF327ED1CA3778F6554952F8BA8E18
44216C705882EEAE746A4567CBC109E5383715F83914E33488FC7771EB7BF6EB
18171C7783E680135F573807586F73740931620B1D0626CE465AB89A71FAA35F
245C02B1C287BF53A9536A81E7E57D3BD2407FAF55678FC7E7F54D35E6EF95BB
3C58BC30E5F94404CE96CC8CBD37C9E05E9BC62F12AD5F436D1EFFD1978E8173
878E4673E19BEE9A2F49BB76BEA894BCA7FBD3C952E88AD35A145DC18F6312C9
B5CA6CCC9E9FB1E45617A0920182CE7E8BE829BBCA6377CDE6A4D48781F6CD4A
ABCAB3CF728BF8BF844F8ADEB358843948B11464C962FB52FAE71CB69D6DE24D
9E8893D976367FCEAB572EB50F697A35F3D9A3C22848FE7CA6A85CE66A26C951
A535746DB093F65D710EF387D4F1F0E303B21016AF72A3AA9D1709B3C637F901
1CC6A39DEE53198FE1DBCA31B3FB976D8077F015CD950CB0DDF97BCF8E298FDE
4996775B3FBAA39F3204D45088CEA26ED6CE0261C32E91DA45B4ADD163E23A2B
1EB430FD26DC0529E12CD2E9B0ACF363CD62E6ABD71A25F90C63221F610DCB34
5953A3D7298D8349A3CA3B4C68190C4D7D0FC7E1DF632F358987036E507CECF9
B6288F99C7C9DDB26D04F76173FD7EBD4EA2BCEB7F45300282249B72ECCE0F0F
AAFF243A83340253BA0CE6018C529C9B5C342FD92E96705281952147F134E083
5A5CF8B332F3DDC103EBAA2511F566630C3DA094C8056F38AC21F54492D64228
49D220FF7737E7017FDD41BDE1D0BBE8430C8E225EA7DE27D3A07344822F8322
CA2E85D95252517314B14B69EB6AD8A63ED9B019D4E4E8424163870FFA1B43C7
6F8A78CA692A0D6D27D8CA302CA546383F3A07916B1E5CFD820669B6E799E133
CD7BACAF9F7E052A7D9D7A79A9DFEB9CC625F56D7E457141D156B85BAC70230E
2855644F6F9ABE647AE44B182155659088D7CF687C66E1586B2A453949E31035
4AF375FFCA62B55F4F3EDBF8BAF89CCAAEAC238A2409D322FD8210376ABFEEFB
CA9BCA793626622265CE7ABC789F6B2061A28C3973BC4CBD20727E4454320754
3560F0A30926C68158ED209BC8EBC754CC59F8BC95473A10EBB9EDEF87C84223
E07E41B29F12BEAAF625F76AC9DE8E8CE57E5A2261EA62B86FA31A21EAE77603
EF80F91F87F5FDDD9069BEA65011CDF680666746976D5564180014E9593E8C88
E0240B9B161047F53060FA35549E4EDC3243946E623C5C252D43370E3426D9EB
FB50907F2C7A2BC47CCEA22390ECE73F7B5B36F157F1E574B462D927D87DE8B1
E6C9A9792CFC27383C0A38B7B0D3C5BB6C969572547D98D9C5F4801202BFF1A2
957FF30D38989246D78802D12D8832590C02475633503814E13DF263F7F195CA
F914780AE345C11975959EB6381076C3536DA08E80EB19C83FCEA247C0803517
77EB9DEE7C1CF1A5BB32E1FF58FE260A5C945A8F6741D93DB1793869CBE61A9B
FFF791C452F0980F429E9BD4A445581DAE54D7609D9CFFE6B06D38BEE1498A84
003DA97624F547147B5C81967BA579E001D2D7A5F2394B5622F4BD2BD64239B2
F9B0669451258BDE736006C9FAA0EC363ABCF7FCBA6EFC1D24C32FA501EBBAF0
7071C5F1939CBB2B026C49199B43E81F1354F400C12A9800CCBFE02A9CA76BE1
40145A7BDB81F669BC2ABB449EABF951982279E4298917A461A4C1A7DE9CD865
54142494ABC0747E76A8CEC1EA497A0B06D774B0D607AC3CF7AC777EBF408C0A
2A22AF9E5DEDF038F2438691973A6D02B945A36C8D4C948A4095E35AACFBFA44
A0863DFF46A7C9145D6CCEF2C8AC37566FFDCC2D6C04214858D7D8E1C2E790A3
437CF905E9E7B9AFB9835FF1B1E10691544FE0BDCDCAD5C18EC74C9F73DF3D87
AC838520B5118F6ED2F2C25E62D2EBD4459B4C740133D9F895A8B8F0F8C85030
F712F2767365C1422B7C88733934A290C2B3EB492821585DA9558816C5561C8A
D32F1B784F6AB49B1E3D61A645A681C2396607B41C12E97275B733EBCCE2813B
438B292D9F7D14807609F58F0F279BD72976C7D4FCCBF5CDFA8FCA0D62397E29
5DB34C78B4D0482A7C5FC2AF63F0FDD234854E9D2656D58BCE0C59B8CF1E181C
9D321EE2DEEA11F6C3DCF1A447D684A73346597E2886300E3692387D59838AFF
5B104BE1F99009065855CAB613C9AE9FB52561749D8D40B83C93DEA792F6F4B7
2E8EA430FCEC244A1F30330B1C243334C79B319A65B7C5118C2E917B18A31BDE
F5CFA6012EBBC9509EF863D305C5E06599EBBA73503DC2347DAB3681E65DA232
947BBBDA2C4653680E2FA0B56F36681359CCFCDEA8423B1F40170AA2F53CDCFA
EB08A2244FBB6941CC8B5E4053D664FA682B3BBAFC25E946F05A70EFB14F9DB7
BFA685B2B80576854CF0DB1EDE550287FF84EE464720948E1AE3E7186AC4CD1A
AC59154AB9AB036E27F2FA4A96354996848EDE693D03357CDDEFE21383169796
78E9138347BBD69906C9AD602D9137A185850D14C03022508EC280BBED489EB6
9B935D20F2F87F3F0B108E6D7FFE111DDE7EE65E2530CF985A98E9C32E8BA145
844CE51465003801F656F3F0C0B2F378836397E367D978C5EEF52258C407F125
EE256A39DFD17C0DFB6CEADAE8E751B23E8488BBAF4ECA5A218BDABFF40022B4
F5E21D851CE8D5CAA5706BBFC5111A61D0611656367772C432D9DC9F3FBA5CB4
E3A13E564C379F3AC3B26294542A9CAE7AF0697EB6FFE61790AE419AEE6C35D8
CFDE1D01E3BBC120AA834C13868D6706E8967D18E5C88C16C92401CB4D43DE32
6E24FC4267248E7630D8F6A5009AEAC68244F73B604B715A456CF77A09405121
049365702A2FAC0B57A361BA0E25C08FEF3E202F85657A43559587020C77E858
9B383A5F8AF24FB808F01C90B14421C7815B59845837B7C3EBA95BBE533368CD
43F4CDAF241F17A3F335BC8134E53EC59353D40B80A8E2D9748AD7AD8BE58147
6B67B36DA0CAE3FAD720F33C9D73D439247C69AEFF9EFBB0537A4EC6F39F0886
FFC10FF237E38BC8E1372E5ACCFD53CD2EB6B7B7C7D966BC2BC85157D36B264D
2AC4312B03EBE31BBF8AE28361E783B4EDBC0B20558D8C3B02DA746C790B01F0
0FD96EEE89341FD19CBEBAE8739AACE99C6FC080B3DA6E470E686F4DF9BE1AB1
E9A2C375FA24F608E162EBA8D4B9256AC556E9EB1ECC3AE52AC9F88389851150
50E2ACB886D909C0E74E98B0B6DC7B8DB11483D57CE31DFCC78780B5367FC024
483A3A6E0F33436A9A82A128FEE89225E7663C6787479A0D14657F2623438172
2143D93F8AC6507AEAE1FCF14CB9A1492520969549C36EBEE291BE32E3F2E322
07EC1F5EF40BA571D479E9C47FFF77F6EF72131C77A76E62CAE67F4773B3C269
7E30F33229A3A1A11491A219475469C210E0C6CE6206B80C847D9AC3154E62ED
E407109EDD80DCB517342FC933D7A22F65419D8E14A8A9DF471CF3C09FFF84FD
60D93645BA3A5181693AA49A1D736D282E7C024F20A2619897D4656E9EA47E74
AEC76D8712926588366993EC2C852CBBDFBF6B7F2AFF2A5D525CE4299C801F6B
FAE58097CB034395F262C52A8589DA3C33F4F016D0F62F86B2C183592D18D45D
962F3AA1E67B90BAB7276925A348FE9824BCD68061350ACDD784CCD3DB4A87E8
247E18BE571CB6ED76301EF5215C4997D02EE81A7F2F594CB6D2E40F7BD257B0
7D5381F237C737CFE59FDE75DD0DFF873927B79A9AB6BCD606141EC7D7A92B8D
36E3AA32CCE6B58BCC79A8003D2ED95618B24B07A8DCDB676102B0B9E22A47E3
9E3E1B4B2892CA19A41126FC7A56B25FD17088BD29201E6BCA34F4D6F534A06E
C17F765F65C53C30CB42C28A1D9C8F7EB4423FF99A1CCE504CC5266E1D1F6A63
395234540B313B3D8605CAF6EE6DDBD96A83F31CB3F252EEBDDFBD6C437DA474
AACB207F35969D582ECC1519AE9A83C5A0FA7FD26019E41456113ABAE26B72D6
7A6C41E11658C532B4F80CF6DBE4B3DCA5986C6FB14419F017F9A943EE860C06
6AB583105072453C17BC712C902B2362755EACD10ED4A299BF1B38EBA6EA4247
56559743E57D52C5AE99B7DDDE6DEA86F5E142EB7EC6DEB400E5012612E0E194
DEAE865A926D971534597E4DF5402D9B185EECC35D9E18ABB0793ACC734C83AD
8F43A8BED0034696AAE32D57F29C2EA55D172F1C5FECDB2CC5755B07D97A2F1F
8C8095A4622243934CA6D6F8B2CE148B0AD2188A0D4479A25D233A330664A8CB
B8E98864F3EA383BA7FE81D2AEF00542BB166C1B126CA7A1822AA95A4D5684B7
C743B393F043FA35ACFE07FD99D42F65FAD47F75D185B9AA1BBCEAB0537AC605
A90C1312EBEF4E5CCC8DAAAB1B276B793ACF6A4D06F735114462F07CE98A6714
6365852C64486A99532F99031C2B3D10786A5AD1CF7961FD51CB8BFA750EE709
E7FF5A0500EC328A2D94C7BE932F2BD3A63291330CC0CC98EAD6755984571D45
3E8E4440B1B16150547C8EF829DDEDF8E29E4D3DC0780DE7C1308DBE4681991E
E66FAC4C1E0106AA8462A56B188BD8B7FF23309F8C05BC401B7F7FB1D638F607
54DDA6139F553781FAC148DF8DD923E6F814D4E9BC6CD964EA961A484F258A28
6293BC12C9DBE1E7220D1109848D3D172096C0F2D0E1083CB92C18AAD0147814
13878AC1B6BEDB5CF5F4401FE016C2492F46BB4DB1F9C4063FF786F3C4CF61BB
AE89519573A96B01300992395727A6D72FB604297E1211E855C777045992B7C7
62B3F12B733C30A14629FFB15566A4223AC77D19FE6B8980ABC831A1DDA32844
808613D81D576E807E63B1C33D2B9EE809E3DB07EB1831C24020118EDECB928B
A33D61D0F1D02BD4D5F305733190D73950C921EEEB44AC75FE20DA1894BAEE1E
1146B5B75D729252219A27F91FE55B5DAA184302CF0B8D4ED73D1772CA334229
49FE56225ABCD2F72B3F756DB16AE74012185D2D4B7F44B1DE1AD6A45B4DC3DD
6A6E33AB1A7FAA881C2AF4B146A2B4321E8E017507FFF4F4C9594FA36C117E93
7144EC315D57A9E19AE7B8143D90E9E35A5DA9AD31D552F73C962D64264229BA
8E9DBADD7169B0AE4D576C27C6E8DEB6F6A521984FDE5B535AB6DB819D2AE2BB
9D534C22A998CDDD7F1B0082DADD73C1A7ECD7AE67B658FFF4F6464AC1B0460E
66DD39A0C38F4D6E65486BE88163E527575B57F5EAEFD785F620821D6A609103
01A5984EC3E6D6E4A224FDFC220F0067D1C405501CD7AF80AA63A964915AB8F9
41AC67F090FE3426AAAB7A23329CC5348A2AB58F2DCD65344A2DB6007E7C532C
D887026A86133FE1EA3468BABBC52D69E7453E3026D175C07A8611C8BADEC181
4F62042A4D3487BDD4CD96EEEAA8A530FF6E20A2A187B757FC2AF67606876CCE
1276D18F14C6C6B53940B5E495D0DC83D444890F884916DB13A85FF722D0C8BA
EAF874AF3EB81D0A308A108B4E73030A02C1F424E0A80DC1515569974DCAF1AC
78E54F9BBBB8998615EA9B5F2C846B89C87772F522DB341638D2E793BA2B947D
A980D39E75FF5B5945681F39163834556FA42FD67AB4A0D4337708886F186F62
B3ADB1EF44237FB451C43EB598C2D3DA93C05AD2A3AA4B21B5EA1482490EE11C
27AFB1257447DF64735492D0D09845A81511D3281E264541DDDD0967702A444B
D77D742EDD7164A83F3E1AC723DFB926A3B0298CD899F7890F26E771D15A4459
5BD074CF4E9468DDCD3B4C982E3221AD816E3966323C580CE61200E8A024736D
D193CC7C72530F371D2FFF80D77CA43BAD6CF62E48E4B91BD7610C54C0031D91
2A1E7B54307338F6BFC69202CC2692915C535807BC62238F0E006B64B6DDC5B8
4C8E7A9E37A9CC9D8ED57A9535FDD857AD22DF7EE3D8A219FF33AB3C12695B18
081324D07EE26B100F404D688A383AD664EB8FFE5A8E8D72E71772CB7A353933
7142F69223A8C8D68A96CFCFEF9824B286AF8C2C0CB76E869A1919A88A502B6F
02B2AA64834C7FE705B54A162E4B4F11F5A05EAC76ED7C42F48F6161E671BEE6
0BAD144ECCE2526554141730A52AF6009D3DB31F6211330C18D43E60E5373972
69FB2A422A7DE88196D58BDFFF8259ABDBF8A08B77FD4B6D0DDFA731C5813448
AE7DD6243DA416F8C4A3A138C50360A96E3F50912B794EB26D8B54A70E753618
A374051DF49C962F266CA1A11B9AEB067963A6FF0D1675009A8D73A5896C7D94
5A571F00ACCA4F6524985728FB726D9B7BDE3036572234DDC5BEA60741604A75
DE072782B75E63F68896175E8FA871A1A10A225603C48303BB5D9E1E0B6BC482
EEF22AB6E6CD9F68C536072C4DAC988BBCDCA4DEB396039A2374BC93C2F25901
4F04B35F2874AC07F2FECD6514DE8BA45AD6470638519311C8B51604CE06C507
CF4B5545D100D7EA081AE50364888EEF254CC319B4512836D3EBDA5A15A748A9
89924B049B567C9E262FBC012BE5E4044B56FD7DC784CA40649D67FB8DBBC6E2
CF3F702AF5F90417430BA1F2381A4590064EC50AA25A5C559A978069A87DB343
8ED21B55DCDD00FE224037084A32FC01CE5B0CBA40800B617AE1FCC28939AB1C
B075F0BC669290D7BE8DB1179E4EB0E919401DE650C4DFF611CB4B2E5032437A
ED7B91A805062747806389F838EE59CD6E457C0E40D58B39A1BECF9969EAB968
1E5D0708203CDF8B4BAAA7F76C5C0D4E5F60561CA8FDA50A883A81D1B8404BF4
FB2F3EC619943F278C4CD00C0FFAD06C09A6BF18BAD619B61A7BE13072F6957A
51FA60D4D5541DA76E089546BFE5901B335A1D0BF7EC714B275126691B8A0BA2
6AF8967C14B5C47A07D3CB2B2796DE566E1092A5678432257A6E135D6EB7E7A8
F2BF8A039D92290A43CB99A946B577DE1E808B3E44FF980383D896E05DE92899
DA70B623746E81C23FA455B5AA816ED079E0F519083CC7124E9164755B9E8BB4
8D6D71897BA0A738B2B259CC453120BE2B47F5247C215E790B79BACA9C817CCE
7F8DA2D8F791F5E3C1B9F32A34AE5B452CCD75FC55C1785AB8AB43029D6663ED
0A6855FCC56B54432379BDA7EF132F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 77 /M put
dup 78 /N put
dup 107 /k put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9154F6B1626C0582D
150C7E070D405CE5EB61FFBB47A9471227299075B00A5C8564FC9A91DC136F93
E796DAC379CFE7FFB0BA859EC75183E75217B016F08681628FA2752F979A2C5F
FC511BB3B4FA2E5F159088B0CC6AFD1F05A093E412FDCF62F93EA8331DA1F2E6
F5232CBAF2E527373DAF483DA952A699A06541D73D317CD61A659096E2588EE9
BD19CCC95111D6C9F55FD8305AA0757D92468C3210403FFD8188AB1E654CC625
56840F1FB5A3988FD3B82819F0F700557051C570DB024381CD19C345192206D6
A532142F35399055D0721DA1EF1E5172564024D77C711DDD1EC8890566137191
457CD1EA842F546B6E60F2FB70A5956CA5B9AC2BB2E3D86095F78655DE2C21A4
AC1B97598385F80264B5110C35C6C29F2BAA11F4E19A12972E5AA6371FA263CB
A38F5088C707B639FB5341DA495DC285F602729BD75019D2DF8DD049805B355D
2F6FAA535C07BFB362980977FA4CB9D2AA47CBFEE705B8E3A040D907EAB737B7
DD011061B1EFE6D840586688AC1D90E2C1E2750A0D23D6F9331378E7F4AD8077
FED84E6585E60C08E5E70C5EE5D1CAAAEFF1BE07696416B831CBE9B22F624788
80F5C2A29539CA8376A413D5027A4DCBC5DC6025A828FE153AB90D85D3128955
6140111C8706986E6502BD59C91259011191825145157B3027B3493D84D32A00
89C51F7A2DB3DBE60F3DD929CD8850D2BA94CC22DBEB317347F8DF493687AD23
972D18BA4F990283335E7F45DF2A0E7540CE2740D2849ABB9C5A82B325D1D067
B23DE160FF41F5024D51CD78D79C36C89E9C66B90CD36B6898D77F24A7EBCB88
206BE4A2B2E74C36962F9C23DC582CAA5C19E37634FEBBE35104E1999C397804
F2A0C75D971BEAD71CADC4EADA48417BF0C000C2012567F827A72620EFBD95BF
2B0CABFF7B9C82DFA5AD8E499BA00AEAB5282211604C78EF70F90381CB320AFF
2BA05AD965D6C9D9E5257BF926269BABCF1826F7F3371B863E154533D4FA8097
BC5D512BCF398B0AF86BEC559B6F6F6D887F551499D57F6B7420B6EDD225E6C2
BC31A846F4CDAFAFA2FE5A87BE264A18FCE9F6BD00EECA7491F9258C8C6666FE
0FA9C9AF8C0224A20E51E94A707FB94C253CC6ABBBF60B55D87B3FA75B33AF65
F6DF1B2EB86C9E361A42ACBC1A2A58679B68674B6B6EB04527922639214CD754
BBD3A0BCEDED26D7032ADDF8E85658D9908866A02A91884B1F0E3A55A704CE10
27FAFE432CC5FBDE955F9C1039CFCE1FEA7B3EAF7C521DA9C72A278C045B1D9F
EDEEB22D60D40207D6E5A0D28201161FF9CFA408E407011DCD0F45C5A39975E5
CDAD517698E72F948C2EB761AEFD0D1BFB6DC899F1D7D82DA616C349FB22C45D
882C33BE8FFEE2BFAF8B304DAC4F4594D3060A02D1A091C87D44E767C42B922A
CD4765CF0309E2FFB32AC6BBA757656286B9ACB435D1CC399A8AD17C6C60AD14
192C2E2D281758129C18BDD2EA0AC46AA6C0FDA1AF840408A7DFF0D683E71B06
358E6BA47A411BB5BE51BFD2FA027B1BE2A94D9E09F0F157A0D645081A9B25A8
D5E763574A6EA3BEC80BB1BC22B3F968080D7A4B07F70B272744FA6816EF2BA8
361DB65675E8B8A146B676450B4E666D084B74EA460A5B6BCD3B4C6E5E1D8868
A505E7CB45BA7E9A67F1615051988619D95AA77BC582C24BB0E7416E7DD7646C
F9C5E70B4C95FD9ADF37C853CE8E41D1AA71425F90E978838B3F2CA843F35448
7E9CD93E1480BD15BE52D1610A668C18040452F1B36BB2E39C03F898369BB10C
7181F8F3CB581D632B9E5C05229ED9CBCA29AFE9575C825092940979C6118007
0744A673A34C4F49726949DA2443F766A8DB02258B40DF1F954C3BF70A61F61D
B1ECE3575C10C683672A3BEE556239ACAFB134DAAE783D4790142CD5C936F4E9
3AC40F6EFAE7AD9E00234CA52B31EE1134DE5E5639FAB7F7AE6FCEE0D8CF3A62
E5A0B171C6EB6892ABDB76138FA1F9A9AD83537A26D2315723D37869AC65B5D6
9DAC64B1E6BAA6E0B5905BEFD3C8BE2B2F8BFE18D414E3F31C7CFAB9C1BF6A34
C13E3AD8672E82F0098ED71484E84C0199C4A48FFC23BF0CBA4EE6A02F96F4D7
1DBFC0A6564A03091A8C54E4FD0C07E464CF620E1CB6D299DCDCBA063B1EB838
AD2DDA31B9E470452261DB9F4859FE78097F82A841958443A14E41AA200997B8
22F3981ABB0BFD63DB0162328007ABFB968A305E9E2F11F016D069577A764475
77C9A03F74175E26A6F64AEFCA2820D80BA508CDC9EB2AD56E4319D6D305C911
06F8E54EA0F456B7874257EC4B54646C3C64334D8EA77B9641705E1F140FE1EB
93B421F1CBFDD84031353F2C3464C159CA016B4973ADC35998D8F4E0C77FBA71
6A7FA847BA5AE73498864F9BC2B5421E6D374227359C1965BF5653978D2E115C
0ED182754221D68F35BBFA464520292F76EEBAE136733739597716DCD8F0D33C
FE773413B095828398B06E4C8CCFFBAABB931BE2AE314096305AE575BF965BA2
C1F142B0405340B5CA677EEEB4FEABFDE116CB1A5E373E866BA7C0DBACA68792
8B5CB2323DEA64636D9E089DAF328F9A35624A19E7B5FB98293042794285B4A1
7CD4CD0CE653DE2AAC596E5A2666E6B9A79E8D99D97B0B15F2C418DAECC8CDC3
FA8CCB5CA1521AAC733581FF31A08A82AC6DCA2B0E98E74ADBB83AE747013D0C
F1936CBB5918E9A885352B4865085DD50575789A2836C93A4385DDDFF6A66A95
2CC2E2DB8C947210E8A37B40F6F51E29F136E0B8C3A0403FA3715BA4C0B42452
F7F8E072FFAA1AB1E7DA71DD5D9E34ECC2BE442335DB447C55CE69F9FD075604
B7859BE3E7F248D1104AAA20E08739AD5B1F873DD833BEEE0750518079977041
D6DE371BD076E7B14F0161150AF5B8C9CE8EE8C12F413DA6F58A2046CC5A4FBF
55A4A358D09C965A370C9BE903B3D8EA3978C1EDC3C25A87AA0CA3D2803269A1
153596450A41D8641052F50EEAE2734E22C625C51AA72B65C3BBEF8E7B7469AE
E82B667A9BBDF63715C948729A0530803A5BE67E0D47568AC76A6DD0FDF9C549
70F3FA6B5AA7216DD9B97A63C3C09E45AE29B275A52D11436AD2B4A2B29A385E
CAA97BEC67DC298F9E4961B5F2F6B191806BBE8C9732CF4175288B3B7874D189
68F48CC3B88AA73E8F977497E6A7D3B3E6E1C0241EEA4B1F18886E4B6EEF3A1E
C15908B2B2D16D4F2E4FBEF9A3742D0B3134155BAFBDE9782F3D716640883C6A
1503A274B17D4B183B644B56DAAC6F894732C9AA80AE829C5158FC163234AC92
FAC1DCC95645307181EFE38B96146C40ECE0760D713B537FDCB5BCE63E22FE49
8D70A0A57F5F3E55A08B1BBAF26356B1B1432F1AF1922EE1C047A7047BFE7A8E
E8A771C0D3D8795C737B05A53968A91C899D788B7ABFA667B08EE31223EDA852
6D6470ABFF53E8ED5D0E1F66C2FCF66F77864D8B40828DE346987D23442139F2
AEBCBB9B4F36124C0F9490047A93FF3E89B262E516AB03EB6E7BAD6215E27307
E2A8C10E53344AFDD82CC7835DF6CA72585759C2E5D74B13D7DCB59BEC747B42
F6697A43B5EE7C24B92C2E4F53BE2B394825D73EB3073ECC1D07F4207F918F29
2FEF442F69F27E414B5E413E615FBDB7C5F2826F36C4ED5DE4AD1C7D0F522F29
E43F4BB50267CA7CFCF3FB219027E87D29EDD9909B59272DA4FECB68388681FF
2953162D3FF67193FB4ABAC19E68DC51B27B5014E99C223FFAE974AD40638A7E
69BB04973CCD74713C87368F51F0AD23EAC3E2BA686597F3404C8941B42E9B63
EA45CF559BF9A3FFC2E07815853A400ACBF8A89C2768C695C729B2D78D450907
ED729D45514BC25F45ECBD0DB9FEC67A4FB9AD374BFFA2D8015C735AF66C9C92
50FAFF81F633299A85BECE4F5E1A07528780933C6C8D4ADC4D3186E4F6B31E35
60F242EAF6E15D1E4F2B7DB17D139CDDD777184739B909F8046AE8B059EABC1F
5D01D9938ABE54623237A63A8D2B4C8EBB93865816E4387E5F2C2B6FF305280A
31AEC279A883359695149E77A56C1968104DA169832A5648858018D89B09CE7F
67973E064AAFA16DFEC2CA67105FA660028D6DADD93C362B6A8EAE6265673F0E
0552312C94502F98C5C05824DCB4FBD4C932BCBDC56680581927787B35C810CA
E7B14BBFC2FE9097AE400B8999F0EC9E10D66190994E93A773BE416A780BFFE6
09673A35D3F3BD45D2D5DC69A4F0F1C8D6343132EFA771C195018834BA9A7C69
A8E78C4D9105C73641D568775AF498444D9922411A215B50C0DD976283073D5B
7C9DDC42E1373C5D4448D8A665DA033E34CAE1F780DAB3F3099C2D28B2ED915C
2858BF497E52472312CEBB558BB4D5946540763AF6C2FFF814349E6470F89728
CDD0A4D51711173792028F30065D5D934EDF0D571CD83C5EC155A570DD0D9278
FE5EB1809D2A9303E3E290AD614086CA1C9F89382E152E87817745736C0DED30
3456083AC4F5F96AC2D57B2EBBAF89C7D8DE9AEDF079B30C36F795407491BA55
46B0C5F4036069F391821C2455ED36D1F7E5280D559012A9DF12D6EFC85006E6
808682CC2CC203289C78AD4054B22168DFB60BCE91434D95FDFD56093DB8B7DA
94BB44CCA2C92691F94F94A574D4E727D607F1379D34FA99880E55CBC8C85A79
4DBDA44811628AF019334F186C62009756715C6289FD8C5280DB3D1F2B136CF1
3072BE07F9972A3C0DB3F29399CA2E109B59B6B2588B8D9BCA8F2D7EC544BEB5
9A64AF744DA783023691BB92CCCC7050BF7EEB80C9112A6287F3FD4E2970185F
3A6601D7BEF2D3C5669FA3F3214B219ADA7B02F17AD9258C1C6EBC00CA64D043
67550B9852D1BFEC6F26366687E7231C99961BF0C29003A65EE1C6C0E23140B9
BEF37CED09B77E9C8EBEBD507A0B7E02D5F3F63CACC258B0318EE44607A95D8E
5853618D752E73FAB652095878B8799BEB10127A11981E6CB76D001BF447E517
9CDE1EC4490452949510991DB3668B847C8C9A3DCA130D491144D79BA9ED85AD
222A233E0F02186929E7144507B02913520EFB0AE81AAC97CC5B06B844801072
2BBFE61B92656A7222583C34FA46E4298C7E601C949AAFCCC18CB331D77C4A37
BE0560C633BFE84040EC99AC1E1FE35D5783A7AC5C4776FB946F477DFEC38A57
B1370C7C0AFDDF41635621706FC1B1EB63F55BE68593E35FCB51BF61F88C9F4B
F34A151B401211528E51D087E79A5BC44DFD31AD20A8126F49FE10D0FB861497
9BF07BF845D172F55FDCD70871AD135307E56266F864881936FC1084EB89A491
97C15FC0A9EC327E629CBF115EF2EA7CAA2107B65C21D7CC16B05B7F4EE88BA0
0330E0B43EAC6557D49F4D6223B5F3A9A7B41B16CD8546E8BA2CAA7DBE0CFAA6
FDF6F6EF096093C3A5210A3BD4173790EE21DB8645966229EE982DDBE7C86E30
53A31DEE345D1150DF317A1CBAD60138C63B7F3DA716DA7F2080C4CF1B0DC232
BE72DBECB82FCB5B24BF1738DD0324F8556B8912E64FEC9550DBB78E64F71F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 58 /colon put
dup 69 /E put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 114 /r put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DC6B86AA73E883ABDC43AA6155756145B9EE8EFC505738B7AAA434E093E
029F4BDA397FACAB37996C354110879CA5EAC9D735A9EAD4C6090650B5D5023D
FC9947DE3D2582C88B2C8C9C6213593ED5EFBFCB8EB161A9C9F572701A3C80AA
033903CBED807628BE32BA603E03194E76D374D3813FEBD09ABCAE0CEDC276B1
390CAEE8408FA4E01108DF54D34CD31F444F24C67742DB868CC2967CDA1B8562
C4DC3AAE53445277C899FE86E54B8BDB1490AC76FF84E6E695E526BF8394BE7D
685F4AE35AA17151913D70F35CD7820B221FE0B71A0CA584024C964575599D83
F428992270E1039CAEE78B2D136545062399ED51E17EFE2DD72FD72ECAF8623A
C2C6E1DE8EF99678F333A0A25549721103667E88138D473DCBFDA8573A59C59C
5287D92E1A8CB5A195036AE42DFBAFB1E18A1941C494C795ECF17CAA969792C8
628B6809C79D5B58F56106EE7EFA0BDED029D2273032E1C8A5CD07991064AB2F
20E7735CFD4B13C2A8CBBE519A8F57C66B98A31ED82CC4A183ED86D278180D66
D97CE9B52FE6867C09D913F35AB9B9F6931BF820312DBDE76CEAF3D3F2EECA19
9594CF093FB8D49DAB28DA0EDB9463F81A02C55BD1C45D2C5729767507D93B8C
0D596E1098DB1CFB42CB821E8FA5B5B93BFB454C7CD598BCC5F92BA5486A550A
868D0C17E5861E79939718243DB1F2F6B23D7BC51D926CA86263840FFCC3BAF7
98B72E5F9191183CA5F1FCD9BACF833A9D58F384DC27B11B30790AFA8C1F0D61
5CBD7F3E30A565B9703D739A46149AD05407515A3F397A287343D7C4CB6C8137
FD441A887C7DB8DAF0F445E1DE2BB3A859D465B74109BA18C85A32C8C988D247
6DC190297FBF224E92AD47C87239667707D70B5D344F4E93013C35939AD543B1
A8AF20D9DF0629D03971CAD27426CE3536F737B960CFDA0206EA1DD152DA5891
2B07455FB24A043124FE60C9C35B3565570C5AAF132A27B8098A928F14B7E5D0
E619EBC509E1E61A0F1A69A7A6028305B86D25FE25B380D2DFC3330B70F99A47
E67E22527BD17C135A5311F9E7264E646D1EDCF553CD612C2889FE41EC7553D2
E0616DE75AA40C0171FA981F888E736BE0F3D7F6438FA76FD02D322CF2A6FC61
1ED2EC97FCD26F6DA6E9EFDDD829D6FCFBD66F76F6E5E4D192A584A8CFF3DF3B
F895FFCD2FBC3152977FF27D05B3656FC546F64133AADE7A8ED6135F0B1E5BCA
B170AE703571A817E2A75AD7C9CF2A7827563357469FE34F6F87E141E181D826
EA00D46FCE75148C516079A8DD6A1D6984C65E12F2561F850217FF6574751744
96299457BECACD36404D977E2EE96F0FAC59B411CA72663A044A853EB94D553D
568DCE66BC6BC08C8DDDB541B5711C940798D95D2F9B8FB010CE72D2EAFC631B
C4AFD026878619663C9B56A2126E5EA0BB33407C56AD63401DD9A62024FE72EA
C8ECADEACC704FAA5A18D9F5B26CB72790991B1046DCC122391FE6A514D30057
5C2EF67386F05A45B15E4501AF33637D19547C8D92E24C1190A50E8DCED4C0D0
F85BD47E3C79CDB4AD769ABB374D1B705D61C42DA2DEEBE8D06A555B642D686C
B0F0DD3CA419BC2D359B7D9E02960F7C0D013CCE063154E006EC3DBFD912C209
DEA299D4A6039BBF02B59DA7903EB6953337436C430FC42E6D4338EE58950C8E
EED0E860537BE05FC68F3E43237D86822376F40EE3FDB00E6D5249BFE6218132
AB459F803E0DEDC3DACA2BAB2D639677C6C4040326A9D87C65D63C14BB2F49ED
2D369DE7A3DF50B74BF55DA4FFB033321740F4B82C9E1D604056A76ABA85C5BF
EAED8FB39E77FE5E3661E3BD0FB4DE3309D1542C638A9A32907BC6AB6E2B4761
FA8430E43AA58453AE78243C52D4E02E82A4A4310980801A463964F47EFF3C87
9DDEB99535E53084DEB4536386594E75DF87A2181F1D6DE4E183631716C21F0F
952E0666A83CA5165F1DFA12AE5B99CA89CE76DF92F2B1FCB715E326AAF37E86
568926485134B8E657042D7E908C24BC5919FE284DF3EB31BCF8E2D748EF30C1
AD484DB562B9A1F80A7662D4F231FD969C7AD4DAACB1EC98EC95775AD564B7BE
25F9F811A4E6AF288E4E317E9E13A6CC5FC15CB1309E6ABED70CF63CDD5FE23E
DE8A80EF2F7E4D217C5252A6ACB4C4CBE57636D0CC0CE23DEC7E654E87983023
D5A21A2947FD5390E6DE2159D712C43EC39112935BA5FBC2D1C0F9543B50228C
F39F95CCD09C20AFCA66543CFB72EC1408D5756D66B87C838592437274AAA30B
1535E3FF95300AC5C68153E7DC46AC75E4031836536A9FF8FDC222AC76124A59
410EF51880CA64BDC73AD1A8116BCDC4F45430E5E1A7B589FDAD741C93AEDB82
7957F92ABB687EA9986211DE163DD638770B5D939BD09C730C77096AC9FFF055
B087C94886F0C838990E66EFABC3D3A0EB5A8C229616709EDD4096C1D4D817E3
96C26DFBDE99EF91E5928E83C25CB21F1E27774CC20D0BB5ECFB25B36BCE33C6
F9A7F3DD6148FA9B6A56AC9BE841CFC530EA8992F01B02C1A4E8BE81DBEEAC2F
0BD43E2720F2849E4CBC1B5F7E64794F465E293CC098B7688EC5C82EA3800CC8
AD97D856B1319106D6558A8DDBB3DBFC5E3532E70E13657B769A37701C1041B8
A59CAF3791C219F930FF9F42A78A613DF1DC35098DEA7E69B397DE95D81DF8AB
287F2D627E7BA791518DFDFF3D66FAE91F5EFF67FFA5F6BBB05309234C27C9A7
D1549170A4AE05FA237BDBAABF1F618530BACF47165362C1E0F6B93CCEBD0545
DD362271767D4B011776C7A572D20CE967CA16550D7BE3B310B37CBE5E2348DC
FA95B47ABC639182C2821580961485140639D553C8FC208B0B40F820A877CBC1
DA1F78BA50C93A41FBE07CE7A38DAEFA3D7BFB3A226AE4E251F1F55FEF6A8492
F020E67407CF321E01EE8F2811A9C0A6A869C48B50DDF960297D39DF2B708BEF
605075EE1F6E4DD51E100516CB839EDAEBF055C76CD3574AB6E9852F7F78AFBA
235B15B703CFC7DB5A309D862531AF224CA3722753682613A6513E0EC30D0B45
D29FF420340415EB1D9850DF9B93B421ACBC852CDB57856E4078F81A459613FB
7B94C354409D0D62AB8758A2911D14BCCD9062E5BF0B2B861291164B14DA11FB
FDFE22C1D1FA6EF0E5D14202BE03CACB7D9A1ED4E869584460F010FE47F7508D
7FDC639D263D2772A1063D8F338EB0252230BEF71064E6171C7A8C0C18A37187
0A5B581E41727487944E7ED38743C5074F9A3BE050E92D692E04152BC1EA5597
1E4CFE018D4E4BD08AA923EEBA2BB52202D10DA595E3F12F379591A7A5273E68
770FA4B723142BB07413044917CFC2B311196D2F3D2210D69A7967C0303FC996
FC66011A92094CC5BF9C0C6820899A5303807B4806AD91C0629E1C31D17DD2A8
CFF89BE2029675859B32353A1C5A9D013F8073705D4A82CB2E5F9F6C53BFBE35
0F995E66DAC3C64A370BEDF1BC280A55682F2F806D6379CC0FFE0C03EA4606FC
A4484A2430FD99C3F83633D727BA7F329EAEE7812692D1DDA56A3FE4B672905E
7A4222EDD47D39BFDF34132904C745536F9024BA2FCDB8157E7BB6281ED6BB91
2B607B7EBA8550D9B5E5272CCCCE018C3C9818F5F8FF38F37D31AE721793D62D
F449ABD74C85FC7B21AD9C06C8F6A67E405DAE91850E337D7ADE92D24A79BDB4
0E980E30EE4A041A967EE5DC5CCE10030FBC636BC18129E83A997A4E9F7B2F1B
FBF62B3DDD17826E74F4DBF645B46E9862CE937788E2472FB87559CE5561600B
FCF6F13EAE35E2C121F6AE19EE8D7572AACA9CCB7D7B5356F62E9C9D6350A092
28043E0BC7339CE0879FE59CCFC727AC8422879907F53091F3DA07D12C488545
09BA80F3D242EA7A9A3B06428894B64C43DDF729E1045A65E9D58D1F656C31D5
C10D58B5B3F57F1CE7AE0A3826ADEB3F5C5B0EEBD3B9F50C96B0D8FAA25A83B4
FE0026A7261F5CB735DE3B33FD5C037B0D2D02AC76C28CD07CD8644AE25F51B2
B4B6AD53D22C674F71582C26C8774A225E141246202B2FD9D6C9D65ECB9760A6
D71A2BE4E2CC4A5994264ED96C20A96169627B68922652ED4CD731133B89E456
FC13638CE6D61639C41FD22959A18FC8714CF707DF91E8B8439B45C69C51BED0
2B85F831D3EF9BCAD5FA31CCDCD2D8B55D97723579814D0B94B0653110EC314B
21A31B3A960FE469702B0036AA94651B8D41F11A2EE2A16544FC7E596F60AE64
F65F81700F6CA410E989AE7F6E70D547A435251125385AF1647AFECFDD425050
9827011CF87AFA3553B61457783AAFBA012F0A73403AEE399FFE0B8991245CCD
9F794508036B44365B122CF0919BE2F6372171990A1FA18944FE7A5E873D8087
F27153ADE817A17A3CADA594961FD0E3941DF897BEC2F7960F2B89DCF62B0A84
1B4327B4F4D0AF9804FA57994169EF8C122A2EF2906082C7B7CECE0E03990F6A
A8EDAB04EC0A8198AF02E961AD197F301D1542A9A2261DED56CD9365B3ED23E5
4ACE55CA39617686B576C11C76C964225B3762082363B208D91F475F56EE2B40
B0B02722CB05E5094D51CE69073F59D9D171457C356DADCBC546FAF821008E0C
9C83C4818345BA628612B17A04CB758E7BA9FA6DFEEF5812322CB9ED29FDCACF
8EC276A3BA4A72E6F7D448FB1F101C5A6EC88EE0575F192F04B95480E485687A
4E1F6EA8216653BA182FCF96528323B071A2C72F77D41FE73C8EB282A2660203
993F00D2715743E11341614367495AF15F59E5F9CBE86B89270199D21C60C98A
D320A9C4B005CBC7A18028DC8FA0418C950887F89BE56DBF672A6F5BC420DF96
45F8AEE1AB162630928CB0EB468371B9858445596F0143F8BCE8A0AD5481EEBF
9DB597FA1EE5AE3E90D5CBC1EF278593EA06F16579670C90FCB8771747E1BF5D
7D6C23158B0D6A1BD2D743B3C20E84AEA671B553E8CC603E8898CD1050C8BA8A
B962734EF29339034ADD5F8C0123E34761952D462620AFCD246B73C38818F96C
980F53D9CEF284384D3056EF00A25D13C3E84DB7EC332AB66B54D7D7F3C7CFCD
EAF8935D65DBD9E5686FD7E33200FCBFA4CCCD32A4DEFA9AAE6C73090FAF00FD
6FFAE5FCC246C9EB1335883C8A0876A5BCD5EE29939A98A2B22D24AE92402A1B
1BBE7D215C2B4BADBB5C836FCEE938F8D1E152C8508D33F21D3ED6DFAE987986
01F81CADF26BB55546C3BC7B2BA925A660F7410C0E951E84BD4C45047434426B
50A9099F7C609D9A95277B218D41712BBCCF7D1C5BD2E5ADA7B2ABDD0228D6D2
24F0F47C90C7B75431D948539AA899BC5EC8DB2322179FDCAB6C902593E049A5
5EFE898E66DA1C9F48F653D826D39EE740BAE5E044ABEB57E2C1E3FC1E2F4872
BACBDF7A15BB9D68595B749C6FC4F400CACF575229F7D7B2EF247E4456AC3B7F
E689BA488687E1ECFCC9FF75BA6C3DF812AAE5485F4C7276B6F27CAEFD8AF175
884A9F9547634F0B3145BFA96384DF8FD99765E627450FB06D01E3243E04FFC3
5594600476D188104BB3CDB5E71DC16145DDEAEBAEA33B24DA83F6DEF28B5FC7
8F9B26501C355F60DEDB15CC6888C2F8B786C546BA5DCA22455970A09D518422
753BC0B808B380665ECEF367FA837F449CA95B70879060CDA52A0E0884479EF4
57E7B7CB74AB062ECC50A5C3D6AC7FC44A5B8BE1124BFE57281F5CF323373D8A
BFC95A81265F59D152E64E25DF2B30A0524C79FF02D4BEFB8D123CBBDAAA6386
48FA059F1CE1AEC9D3FA41BBBD94844C0D6D3E0BA7A5D0763DB5EADB357F39CE
4752A492037CA89C21C833FFBF710A2A2B171AB4E2BF83EDEF4C7D77660B270B
A0F3BE9A32CB01508C2433B0E8C971CB076CC86CF8C6BC57CC13D264FF089DB0
72E26433C251A263FA382C1C267B7EA4C23C24740E31C5578511FA4564D01E5C
1875B72B88D23FD5AD0C5DFE4EE5893CC1620C6C010295D08093772F3ECCDF95
71C36F346731164D4CFEE6ACB94B680449A3EB94E5C99D7654577711E235880A
62B2FF5F49FFF343CDEEBB9FA13272D29EE244738BF8C53B628CE64C3721BE08
5DEC79140E868866A6DCFAC1605F64EB686575ACFA91A4CAF622EE6C9765DF18
788C29877BC0A4EFEF5EC56847B08AA9E74AEFADFEB111217FEEF9BADD7DAE0E
F1E1B6CAE3CA495F2642BF45D5F2130BEBD38E44BF744213480A2936F9F52EB3
CED95D5B61BD9CC86CA4C30AD3D0701BB65B7E6F6A10BF817FBCC5AE5F5E8BFF
8B90E7F23C8723AB433E0B95FFB87C2700A0E295138CC872E01987E32508A076
F3A79752D28845E755B94431AF91B73265DF47626F6E8D18FB770084EB1EA30E
999AEE78F9D6F4A3B417C07F62EC85452E35ABA5E68FC28D421F7A56CCB1E6AC
490BED49462F91E47D4788872559C39FBA3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /acute put
dup 39 /quoteright put
dup 45 /hyphen put
dup 49 /one put
dup 52 /four put
dup 58 /colon put
dup 67 /C put
dup 70 /F put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD50D9C98DD94332DB4C7155F8A52013F9ECB7CCE3CFB3E667C57B022A0A753
A45E41A9D8229D5198031ABA3DAAC142AEA5FAB6694A6433629E15AE45A67FDA
34DE10D995ABCAF45FBB3B6B73E80D05F4C51F8C29D4B0F67C8A86432A6C5E86
F0126AB25A5CA2875B48C61CB8112A4CF9AA08F8B0157396CF63CBECDB8867CC
AC10F060630C9BFBAD84B1FF01C814878F0C177F552BDC9BB181B14581C6E968
DAAAB2896FCFB745795C4D2C87CC15BAA041EF80C5BDC12EC1F5786BB41A5A21
073EE0A49723BBCE7DA340F1C454FA5D74812C7425D1EE1E393BBA647136A38E
1DA4A94728957578C7D38CB7BA46AB7D9B9499B894F2E9E40245BE1D7DC6F824
BC9477CBC0F708F0CE573D3F01E65DAAE1DF4E6B295D72ADFC1B2DC969ADC4A7
29B58F3133DBEA5CD1A74475F36D7ABCC03EE7E2A10D1FE691EEBC3E6885BB72
A570030B0854D6E51FB67798552D9960FE820FFD982A9179E5056B3C085580A0
082D1D73E79869B92E19E91E073C92BA72B9139627CB442A5D61F8B2457CB4A9
374A70E9629E2F5899E98544669D49691BF3DA4697DDAE7C674BCA1DA029B62D
14BB3CBEF2EF0BE5730920EF10B660FAE6DB545806ED3373D1986CACB83CB656
6BCAE7E0722C076B98A02665CCB6E27DB388D3BDC7D98C11C3B919A562A4C282
793E6FC1A4AD017F35CCFF41BE917BECA6A744B5E98E1C1F16C89792426673E2
C001BAAEAA48530546225E08E0E49FB80798D137D247376F8997DC7039D6DA29
A92C362D1C52F56FD4F160DB57E4015CBD6DC0AEB498FF959D9F8DEF38049FDF
4131EDB302F00FB60B0B69D72F80110801576C4227630F1DB2D387351409CC63
62535F99A965BDFA85026B5E773C90E3C5BF3FEF6FC0952128AAD22A35764FFF
1BADE172FE191E2280CBA23A0A6599D822B2F793745AE83A72268A3359AD7444
78D406947F546B7982088C9BF865CB1C5B123E79C6756A2C1EC8333781A86215
8A00804CA318C71D983247C751C8FE7F4893F5E2C9113FA8D10DC7980216CF5F
7DAA4417EBCE903C684B819B3F977E518704B76167F702FE7505CBD73395D3EF
F09E561FCA9EB6C9C6AB81FBB2B3263A8E983E2F8511A884F0BC769ADC3E6738
BD6DA5E47E8D7AAE0018A6CAF3A97731389730821E3FC727F7C019314D5E43F3
085EEADCF67ECED9C202DE1220DB987C17D9A6182D4E6AA911ABD619607D9F7F
FB4265A537CFA3BBED17CAF96DCCB47BB30BE4633C8085ECF57271D9CB038E9C
AB24E9398596F2A591FD9788DF260A87151893A04C2AC980A745104D0B64A990
368B31AB3110CB84644AC2A7CF87B0B253C30C4FEF17F306EDFB4902CDF7EB3F
A4B7816354D220F3BB5F9052DAE54012187619DA46A8052DEDB78BC30DF98B07
F882560D45F77FF20E5ADBD8B7522CD018252C00C36C64440CE5DA294F6F9E50
93E2440D3761FDFF54113829EC7C9E6A95DC3BEAA004B3AD483CD97C78C3CAE5
DD911381BB148B2536105BBDA474F86168B74E2261A1B0CB8DD1791236362180
B9F2271096C9DF8F80177D3F8FB9ADC3C888D367A431363CBF1960286AF181D4
0418E6BFDB1EFA089AC0FF6B107FC57AFAE5EDD216B8288E5C36DB6C43DB2204
F71226C1BEEC26F0C1C8E2455E3307A2067E9988D0E7963844419289976E4BC9
ACFCDA5E232DB19AFA19EDDF7D731861B9D9A67178641D31C2843685A497FB5D
B41F5B1ED3C08C9A466D9024A36893A77D065010F53C719CF432517DFE1339E4
C6CEB1B25C0A09D1D5372049B7EAEFDAF703DFC79459EC1F0175526CA40961EA
3451F3550F71366798445112B52DD9E654396D75B0FA4E608E26AB933D921C41
D9756411F90E9FD7544B867BE5CEB79A1C1BBBA0D19E9969D98B36D3E7A656D1
4E4D4C10694190C5DA0FE9E190DE03A17A02394EA3F34E64DB98DB5F8189B5C9
900E9776029B8E81DA160F3F98755515D37FC8DFF44DE87CDCD0F73571B80F73
E8B8B743CCDDA3614EF122CC18469B39C448D92004FC6818FC4E8C0A4A7EDA90
C6A9A0D75C9AAC14F9EE91BC2BC6E91816C5D340ACF7A2A01837C6E251154EDC
A4E3DB6F1183B4B0242B4B9DAD8ACC51D542B43C17940788E08CA064DE971F10
8B1F901EEE5E4FAEE4184CD77F26D6B61AF099C172FC7AAD4149D8A5A7A5B9EB
D1B82EF46D76390CE12C918E8241F04CDC4734A8E42A2D97B2926D1D44E4B3D6
C5D0AD0B5001BBEDEF8789B483F2C0883B62EA195FF0E10B181569E530BFEEE9
08786069E89315C13B5B8316B94A6395DB846684730FED9AC8CF5D140EE85EA2
7E966CE9DB76C9D79BC9B17191CBDA5ED3623A2C925DA93911CEFE406DC0C085
AFD380341BFA9D7F502738B6A2C426C1392C797465A11463C620A4F3BC8BC83B
F68BBC35AFB2BDE1E5E1A4CFA278C15D8DF8103FE72174B7C1F723AEC4C46AAA
EC4A7CF962572E35F394F92FCF8A7B6944EE22D37039A53E43FA5475AD423F5B
CFFEA8FD94DCD4799A96ADEF260E7032F6475790025624A6DEB36626631E4E89
22A2CD65AFDDB872774F507C3CDDD8351F589B8809F590405671E83E7288B7E2
39B9282A896F0E37B63A561CD326A6E1F9F1F8DD03C7E23C29508BDB88A5B1FA
C6684A69E4E69B18ABF26E1C1167CF2C75A0F44DDE69A78CD24BE5D6B166412A
EB16CD9795E8E06026CDEA663AD8C9D4B68E591EC9D78742BBE4DB0768276066
FF303EB9FB247FFD1E00FCB91487C651A0DC16355E9E67265CF44AB08F1A2E86
C71EA29CD8C18F32499BC68AC806BB372C1D7F03FF8E7D3010DF04E5A1C70AC4
E7D0E3A15E56A98961BDCDBB413348133A2CB8DCB6729DB89B2982DDCC4CB060
6DC7BC2BD36DFBAE6E6AA213A302E4E2C135D9BAFE7CA0EFD1A43448032D0FD2
51B7C585C2031F7BAA969C4AAFB7DF1E6496D30238FBA49840E176BFA08FDDDD
8B7DB81B602C2461ABC4F4E6CA4A8FDF0C9945B568FC330423F3115D951E0A9B
5DC346F6286B9471BBC5AC282141AEBDFFE2221882F644C35A7938BAE9C09AF9
DB671B4BF0122611D42044FA8C5B873CE2B1C531432BFA033B39835262190624
F3B1A29F7FE9C01E83B18DE3C0BAF58BA7BCF9A3A79A03708301435781D4B871
0C11325FFF6B01AB1530A0D4FE41E110B5C3DCFFE0869767083F7C22F9BE249C
68995BFBEBB3F4028924419BC1297E1A68692884CAF81172B2DF70B7995B0716
89A6B5FBA58F75820C5625C1E116E4567ABEF9393561C7280015771248E0DACA
D7B9DDE581E5188C0BCE5C65E3B1F7125E12AE9ED41A85C63E593C7B6D0E8C78
8C2F67B79BE2BDAC9E3A46310FDF480154191169DFFFB6C0F3B6B2796AC68C19
730256C5044E94F768951382CB299791483D4B85CCAED8536ADE33625EA4247F
2FDDCA056DD77A0BA8B477769213037B0B191A5FDE783E803650272D0860EE34
1C02EDE892FE17525056FBA6FA7CA5244BF26D3D2925C0239E6E6E9A29530566
024F576757A5CE60AB54761F0E69C6571E66EAEC8B31A0B6CF3BB07E843818A7
CDC587804637C50A7FF411C5221A8534A16186046F3976C0ECDDC8CA6A4F2953
D17AEE00FC1F4741B4B713595669157A3B6EF372A5CE931F72030B6C97D13B19
A5D7B366AD49F2B6F771612FA8DB6ED2EDC690ED3AF19187BA7CC41B4985856B
3405BC60471D09237861BF88371B125AE0098A52FF21A04CCBF85FB7CE8DBF5D
469347920F830AE93218D33F14A72AA2A922778230E2D5EB643B474DED7BDD15
28FB915739F62E8283D7E35554867856ED0F5DE01678441C835DEC07218B1E73
A1507117BD506B4D2CDF8AE2A34660517D00A691DC82A77AB8D15B25698C9C7C
53919495E80084600D55FAF507D76B17F1721E11ADCA566E24E155D44F2BAD6C
C50A5AFC5C3678B44A30082C2B38B041127E8C32F066C3A50B7225F08727E444
8B53F86D7C6BF1F414C587E3851099D45AB8CF971FD749715A9CF77CEC1D8E6B
64A242825337B8F7A7ECCA7CC9CE233C871C4B53607B0C5409E2CCADA73D8B83
B9148C707AF99869576F36EE1623CE7472F60E795BD98E2598FF00B7C986E6CA
304BC0D34DCA7CD53BA94CBBA3075A3B2F12B424AE9AC85B34300F3A6AF3900B
275BE25AC00703B1942992CD7049CFEA04406578657E9974C007B3C7E21D679D
0B21969D3C54CB9E547864DFF254A329E9477EA375FEB503C608EB59FA42DA30
1849C07356FC7A270FB4EC220849E609454691FA36477FF514F1B24A651DE4DD
5CD6127429C168238CF866B7D40BB6657DE8DD75F896DC0DF2151BF0B82FF51B
D89611C06D6D8B6F34C995A2AC954109C75BFADBAD4C33B5B0036D5C76552449
DAF009DA2E5630C3F7F4327117B53E70E07D1D82D10B9F34CDBB736DDD2F89BC
A64CCFAC0EF199D2D5B490F95FB92C5CFF11F0572160781EEC3AFBD4652F99BD
7329E30490D5B1F59F6F4526DCC8FFE749B1E13F90031D953D5B806BDE76D803
BBFFF6194AE7DD524030FD1BE1D99FBF74FDB0393A96CA2F480A065E2C12FE02
B22263C4FF8B617CC9B46FBF2F72EFDB70F6D4800859FFC1BD479C9E9E7501B0
AEF7F635D07D6490535C6DFF1B7193EA0E469CF3E272BCC49E481EC63453E794
EC7755D6CACB44A3A87F9C113154AB824A42DE535534CAAC20226AD7F206D5F8
95E9B0C0E53332A800D1F9A363411DE10FE5FBD0B3C0A7F5160ED1461367D674
64878D1D058543D367FD4B04D8190DF050C21BB3E4A7B9FFBECF6DFEDE28300A
23D461FBBF700518CC946B587A9D8971C15BF17B8FBA2052BDC33CC824101F62
EBFF3DAC12C902C3C58BED2FAE2318AE411C2ED7BA2F8BC36BB0454CDCFC32F1
B94E85A16CA963E386BF347F063DFF3E44DA0B2E76A93D7892EB447BEEE661D9
1C1114B1782239188441A728B7BC974719C82B639936B3F95E93C2818BBDBB13
24BA25BCC20DCAF527F1895BD3073BC2AAD9224CD84D46C9D073E641FB625760
DCBB2533D91C9EC7F3E77F23FD89D27882793A919E2E1EB3B14740C1D29DBE3A
246843A73727ACF7E8C4A413B204BB12B5956BD98F7B831C1FC25D93B1AB943A
2AD6775E1C2827CD0F8C4405FFACB038106B6B757FAE8DC8EE45DE1DA5EF9AFE
5E74C74E88594E9D4B5FF6BD4385EB144B1DE633C26771E23017ABFC5F31F631
D131D0F22B03A5509A35FDA5A6D7FF099A870E07ADD7E2A9CF45D67EFB57ED09
5E58491900AD536201F263E45BCB26B1AB23BDC86BFFAC6FA07151EDEBA51257
7E1CD65DBFA973AF421B14B26FBC0DBBBA034E45E883D805B700E3569C53E55B
BFCCC1A8DADE944D31BCD8884420830AAEFF47B9AA1EEBD7AB8AD5298D3F23F7
BF05FE5D4F3E93EA8E889A177B2F9A35AA9BA1DB870F875A59353DA53D3DD09F
F3C0B38E126F9ADCEC27C7D7529E6DD1558BF8585740841E271CA7CE1BDBCFA8
95CCA8D540C063896E2B05C2212DE58986EF90DA36C9A8891166701B0D46EA8E
2A8C4D1B064AC29FBA9D96748AD21011C563E7451B26392C6DDA3690F817FB31
A0498C132FC516235942B61D8E0B5436D7117E80AD51431290BCA3A82EFDB470
6E507513F7E7061B35A8C4DC7CF8E0DA7891C8476BAA7FE85284F909B6F4D9E4
68345CF135C68D9A4ECF644E141F24FA6981937992560B0F1889B2AB4C1BBAEA
8F405D6BBF74CD092BAAB08CFD414A30FFDA3C714379AAD307F8AC5965D625EE
BD2480FA2A677343A2E59E6E797D22B317C9DC5AE5612FCB82D3C5C91F29AF1C
7887C5EA093C3196
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (colinearite.dvi)
@start /Fa 207[19 48[{}1 66.4176 /CMSY8 rf /Fb 222[91
27[45 4[71{}3 90.9091 /CMSY10 rf /Fc 135[48 1[48 51 35
36 36 48 51 45 51 76 25 2[25 51 45 28 40 51 40 51 45
2[45 25 1[25 7[51 1[71 62 71 9[62 69 66 3[43 1[71 1[25
25 1[45 3[45 45 45 45 45 1[25 30 25 71 1[35 35 25 19[45
45 5[51 12[{}51 90.9091 /CMR10 rf /Fd 148[47 28[73 88
1[77 50 40 76 71 58 67 75 65 69 68 6[25 58[{}15 90.9091
/CMMI10 rf /Fe 135[55 5[43 8[29 3[48 1[46 29[69 10[29
1[52 52 52 52 52 52 52 52 49[{}15 90.9091 /CMBX10 rf
/Ff 241[42 14[{}1 83.022 /CMSY10 rf /Fg 135[62 1[62 65
46 46 46 1[65 59 65 1[33 2[33 65 2[52 65 52 1[59 26[76
2[85 8[33 5[59 2[59 3[39 5[33 19[59 19[{}24 119.552 /CMR12
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-246 -482 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -246 -482 a -246 -482 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -482 a -246
-482 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -246 -482 a -246 -482 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -482 a 0 TeXcolorgray
0 TeXcolorgray 381 -227 a Fg(Chapitre)37 b(1)i(-)g(F)-10
b(euille)38 b(d'exercices)g(n)2065 -271 y Ff(\016)2110
-227 y Fg(4)h(:)g(colin)m(\023)-55 b(earit)m(\023)g(e)33
b(de)39 b(v)m(ecteurs)p 314 -335 3133 4 v 314 -177 4
160 v 3443 -177 V 314 -175 3133 4 v -246 109 a Fe(Exercice)d(1)f(:)p
-246 124 536 4 v -246 255 a Fd(AB)5 b(C)30 b Fc(est)24
b(un)f(triangle)g(\023)-43 b(equilat)m(\023)g(eral)27
b(de)c(c^)-45 b(ot)m(\023)i(e)26 b(3)f(cm.)f(Placer)g(les)h(p)s(oin)m
(ts)e Fd(D)k Fc(et)d Fd(E)29 b Fc(tels)c(que)2837 193
y Fb(\000)-43 b(\000)f(!)2837 255 y Fd(AD)28 b Fc(=)d
Fb(\000)p Fc(2)3220 193 y Fb(\000)-45 b(\000)f(!)3220
255 y Fd(AB)29 b Fc(et)3485 193 y Fb(\000)-21 b(!)3485
255 y Fd(AE)31 b Fc(=)3757 194 y(1)p 3757 234 46 4 v
3757 318 a(2)3812 193 y Fb(\000)-44 b(\000)g(!)3812 255
y Fd(B)5 b(C)h Fc(.)-246 481 y Fe(Exercice)36 b(2)f(:)p
-246 496 536 4 v 30 w Fc(On)30 b(consid)m(\022)-43 b(ere)32
b(la)f(\014gure)e(ci-con)m(tre.)p 0 TeXcolorgray -135
844 a(1.)p 0 TeXcolorgray 47 w(D)m(\023)-43 b(eterminer)32
b(les)e(r)m(\023)-43 b(eels)32 b Fd(k)i Fc(et)d Fd(k)1037
811 y Fa(0)1091 844 y Fc(tels)g(que)1427 782 y Fb(\000)-33
b(\000)f(!)1427 844 y Fd(AM)36 b Fc(=)24 b Fd(k)1764
782 y Fb(\000)-45 b(\000)f(!)1764 844 y Fd(AB)36 b Fc(et)2043
782 y Fb(\000)-41 b(\000)g(!)2043 844 y Fd(AN)35 b Fc(=)25
b Fd(k)2365 811 y Fa(0)2389 782 y Fb(\000)-23 b(!)2389
844 y Fd(AC)p 0 TeXcolorgray -135 988 a Fc(2.)p 0 TeXcolorgray
47 w(Compl)m(\023)-43 b(eter)31 b(par)f(le)h(nom)m(bre)f(r)m(\023)-43
b(eel)32 b(qui)e(con)m(vien)m(t)i(:)p 0 TeXcolorgray
118 1157 a Fb(\005)p 0 TeXcolorgray 209 1095 a(\000)-33
b(\000)f(!)209 1157 y Fd(M)10 b(A)25 b Fc(=)g Fd(::::::)646
1095 y Fb(\000)-29 b(\000)f(!)646 1157 y Fd(M)10 b(B)p
0 TeXcolorgray 118 1301 a Fb(\005)p 0 TeXcolorgray 209
1239 a(\000)-39 b(\000)f(!)209 1301 y Fd(N)10 b(C)32
b Fc(=)25 b Fd(::::::)635 1239 y Fb(\000)-40 b(\000)f(!)635
1301 y Fd(N)10 b(A)p 0 TeXcolorgray 1248 1157 a Fb(\005)p
0 TeXcolorgray 1339 1095 a(\000)-31 b(\000)h(!)1339 1157
y Fd(B)5 b(M)35 b Fc(=)25 b Fd(::::::)1782 1095 y Fb(\000)-32
b(\000)f(!)1782 1157 y Fd(M)10 b(A)p 0 TeXcolorgray 1248
1301 a Fb(\005)p 0 TeXcolorgray 1339 1239 a(\000)-22
b(!)1339 1301 y Fd(AC)32 b Fc(=)25 b Fd(::::::)1750 1239
y Fb(\000)-40 b(\000)f(!)1750 1301 y Fd(N)10 b(A)2935
1613 y @beginspecial 14 @llx 14 @lly 334 @urx 324 @ury
1600 @rwi @setspecial
%%BeginDocument: exo2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: GIMP PostScript file plugin V 1,17 by Peter Kirchgessner
%%Title: exo2.eps
%%CreationDate: Tue Mar 25 18:14:08 2014
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 14 14 334 324
%%EndComments
%%BeginProlog
% Use own dictionary to avoid conflicts
10 dict begin
%%EndProlog
%%Page: 1 1
% Translate for offset
14.173228346456694 14.173228346456694 translate
% Translate to begin of first scanline
0 309.79324197335882 translate
319.54460310084954 -309.79324197335882 scale
% Image geometry
426 413 8
% Transformation matrix
[ 426 0 0 413 0 0 ]
% Strings to hold RGB-samples per scanline
/rstr 426 string def
/gstr 426 string def
/bstr 426 string def
{currentfile /ASCII85Decode filter /RunLengthDecode filter rstr readstring pop}
{currentfile /ASCII85Decode filter /RunLengthDecode filter gstr readstring pop}
{currentfile /ASCII85Decode filter /RunLengthDecode filter bstr readstring pop}
true 3
%%BeginData:        34220 ASCII Bytes
colorimage
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcGNFs$Qjqqu?[ali2J~>
JcC<$JcGNFs$Qjqqu?[ali2J~>
JcC<$JcGNFs$Qjqqu?[ali2J~>
JcC<$JcGNFs$Qlgp&+ji7-jl'~>
JcC<$JcGNFs$Qlgp&+ji7-jl'~>
JcC<$JcGNFs$Qlgp&+ji7-jl'~>
JcC<$JcGNFr^6aRr;Zdbli2J~>
JcC<$JcGNFr^6aRr;Zdbli2J~>
JcC<$JcGNFr^6aRr;Zdbli2J~>
JcC<$JcGNFs$Qot7c=7Fs$Z2QJ,~>
JcC<$JcGNFs$Qot7c=7Fs$Z2QJ,~>
JcC<$JcGNFs$Qot7c=7Fs$Z2QJ,~>
JcC<$JcGNFs$Qq97!&>,s$Z2QJ,~>
JcC<$JcGNFs$Qq97!&>,s$Z2QJ,~>
JcC<$JcGNFs$Qq97!&>,s$Z2QJ,~>
JcC<$JcGNFs$QthImh<Us8PLQs*t~>
JcC<$JcGNFs$QthImh<Us8PLQs*t~>
JcC<$JcGNFs$QthImh<Us8PLQs*t~>
JcC<$JcGNFs$R.ml:G4Us8PJTli2J~>
JcC<$JcGNFs$R.ml:G4Us8PJTli2J~>
JcC<$JcGNFs$R.ml:G4Us8PJTli2J~>
JcC<$JcGNFs$Zne#,4M[s8PJTli2J~>
JcC<$JcGNFs$Zne#,4M[s8PJTli2J~>
JcC<$JcGNFs$Zne#,4M[s8PJTli2J~>
JcC<$JcGNFs$Zne#5_Urkl4%=li2J~>
JcC<$JcGNFs$Zne#5_Urkl4%=li2J~>
JcC<$JcGNFs$Zne#5_Urkl4%=li2J~>
JcC<$JcGNFs$Zkd"iNf[s$T9@s*t~>
JcC<$JcGNFs$Zkd"iNf[s$T9@s*t~>
JcC<$JcGNFs$Zkd"iNf[s$T9@s*t~>
JcC<$JcGNFs$Zhc"EQuW6q$A@J,~>
JcC<$JcGNFs$Zhc"EQuW6q$A@J,~>
JcC<$JcGNFs$Zhc"EQuW6q$A@J,~>
JcC<$JcGNFs$Zhc"Q2aY6q$A@J,~>
JcC<$JcGNFs$Zhc"Q2aY6q$A@J,~>
JcC<$JcGNFs$Zhc"Q2aY6q$A@J,~>
JcC<$JcGNFs$Zeb!1<aRli2J~>
JcC<$JcGNFs$Zeb!1<aRli2J~>
JcC<$JcGNFs$Zeb!1<aRli2J~>
JcC<$JcGNFs$Zeb"8,V]7-jl'~>
JcC<$JcGNFs$Zeb"8,V]7-jl'~>
JcC<$JcGNFs$Zeb"8,V]7-jl'~>
JcC<$JcGNFs$Zba!jk?`li2J~>
JcC<$JcGNFs$Zba!jk?`li2J~>
JcC<$JcGNFs$Zba!jk?`li2J~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$Jc>rSYoNrVAbP!\J,~>
JcC<$Jc>rSYoNrVAbP!\J,~>
JcC<$Jc>rSYoNrVAbP!\J,~>
JcC<$Jc>q\'Ji-7$"_unJ,~>
JcC<$Jc>q\'Ji-7$"_unJ,~>
JcC<$Jc>q\'Ji-7$"_unJ,~>
JcC<$Jc>a-3rVMJ2%8@AJ,~>
JcC<$Jc>a-3rVMJ2%8@AJ,~>
JcC<$Jc>a-3rVMJ2%8@AJ,~>
JcC<$Jc>`^9)V-X!oEs-~>
JcC<$Jc>`^9)V-X!oEs-~>
JcC<$Jc>`^9)V-X!oEs-~>
JcC<$Jc>a-=8kSg2&>'KJ,~>
JcC<$Jc>a-=8kSg2&>'KJ,~>
JcC<$Jc>a-=8kSg2&>'KJ,~>
JcC<$Jc>q,"'/#T';aRcJ,~>
JcC<$Jc>q,"'/#T';aRcJ,~>
JcC<$Jc>q,"'/#T';aRcJ,~>
JcC<$K)Z%e'S&"G.')2(J,~>
JcC<$K)Z%e'S&"G.')2(J,~>
JcC<$K)Z%e'S&"G.')2(J,~>
JcC<$KDu"b'XQHlJ,~>
JcC<$KDu"b'XQHlJ,~>
JcC<$KDu"b'XQHlJ,~>
JcC<$K`;+c'XQEkJ,~>
JcC<$K`;+c'XQEkJ,~>
JcC<$K`;+c'XQEkJ,~>
JcC<$L&V4d'XQBjJ,~>
JcC<$L&V4d'XQBjJ,~>
JcC<$L&V4d'XQBjJ,~>
JcC<$LAq=i'XuWmJ,~>
JcC<$LAq=i'XuWmJ,~>
JcC<$LAq=i'XuWmJ,~>
JcC<$L]7Fj*4OGtJ,~>
JcC<$L]7Fj*4OGtJ,~>
JcC<$L]7Fj*4OGtJ,~>
JcC<$M#ROc%&;;OJ,~>
JcC<$M#ROc%&;;OJ,~>
JcC<$M#ROc%&;;OJ,~>
JcC<$M>mXd%("C^J,~>
JcC<$M>mXd%("C^J,~>
JcC<$M>mXd%("C^J,~>
JcC<$MZ3ae&@9daJ,~>
JcC<$MZ3ae&@9daJ,~>
JcC<$MZ3ae&@9daJ,~>
JcC<$MuNjf&@^$dJ,~>
JcC<$MuNjf&@^$dJ,~>
JcC<$MuNjf&@^$dJ,~>
JcC<$N;isg&@^!cJ,~>
JcC<$N;isg&@^!cJ,~>
JcC<$N;isg&@^!cJ,~>
JcC<$NW0'h&@9[^J,~>
JcC<$NW0'h&@9[^J,~>
JcC<$NW0'h&@9[^J,~>
JcC<$NrK0i&@9X]J,~>
JcC<$NrK0i&@9X]J,~>
JcC<$NrK0i&@9X]J,~>
JcC<$O8f9j&@9U\J,~>
JcC<$O8f9j&@9U\J,~>
JcC<$O8f9j&@9U\J,~>
JcC<$OT,Bo'Xu9cJ,~>
JcC<$OT,Bo'Xu9cJ,~>
JcC<$OT,Bo'Xu9cJ,~>
JcC<$OoGKl'XPs^J,~>
JcC<$OoGKl'XPs^J,~>
JcC<$OoGKl'XPs^J,~>
JcC<$Qi@(/Zi9t+^C[`ns*t~>
JcC<$Qi@(/Zi9t+^C[`ns*t~>
JcC<$Qi@(/Zi9t+^C[`ns*t~>
JcC<$Qi@9%&@;DK&?j1TJ,~>
JcC<$Qi@9%&@;DK&?j1TJ,~>
JcC<$Qi@9%&@;DK&?j1TJ,~>
JcC<$Rf<X9\,ZK?&;(C`a8^Y~>
JcC<$Rf<X9\,ZK?&;(C`a8^Y~>
JcC<$Rf<X9\,ZK?&;(C`a8^Y~>
JcC<$Rf<W%&@;E:L&lhEs*t~>
JcC<$Rf<W%&@;E:L&lhEs*t~>
JcC<$Rf<W%&@;E:L&lhEs*t~>
JcC<$RK!N(&@]7cL(L]3s*t~>
JcC<$RK!N(&@]7cL(L]3s*t~>
JcC<$RK!N(&@]7cL(L]3s*t~>
JcC<$R/[E#$P'NC]+D<is*t~>
JcC<$R/[E#$P'NC]+D<is*t~>
JcC<$R/[E#$P'NC]+D<is*t~>
JcC<$R/[E'$k'QEs19Dps*t~>
JcC<$R/[E'$k'QEs19Dps*t~>
JcC<$R/[E'$k'QEs19Dps*t~>
JcDPG"&j]?h#.0SgmrpnKDu+e%(E\WZc2rp~>
JcDPG"&j]?h#.0SgmrpnKDu+e%(E\WZc2rp~>
JcDPG"&j]?h#.0SgmrpnKDu+e%(E\WZc2rp~>
JcDPGr^6a;r;QbHr^;G>#JUhFs8T\B\&SGu~>
JcDPGr^6a;r;QbHr^;G>#JUhFs8T\B\&SGu~>
JcDPGr^6a;r;QbHr^;G>#JUhFs8T\B\&SGu~>
JcDPGs$Qoo9E+qj"TD%s6pub/!k/`ErVlo-+NFG3~>
JcDPGs$Qoo9E+qj"TD%s6pub/!k/`ErVlo-+NFG3~>
JcDPGs$Qoo9E+qj"TD%s6pub/!k/`ErVlo-+NFG3~>
JcDPGs$QpF7+M;:"O]\m6pue0!kT/Q^]/f~>
JcDPGs$QpF7+M;:"O]\m6pue0!kT/Q^]/f~>
JcDPGs$QpF7+M;:"O]\m6pue0!kT/Q^]/f~>
JcDPGs$Qq&7&0b]"JS;o6puh1!k/lM^Ai]~>
JcDPGs$Qq&7&0b]"JS;o6puh1!k/lM^Ai]~>
JcDPGs$Qq&7&0b]"JS;o6puh1!k/lM^Ai]~>
JcDPGs$QqR7!&A-"EQuj6puk2!k/`M^&NT~>
JcDPGs$QqR7!&A-"EQuj6puk2!k/`M^&NT~>
JcDPGs$QqR7!&A-"EQuj6puk2!k/`M^&NT~>
JcDPGs$R4o>"JSkr'jWb6pun3!k/`I]`3K~>
JcDPGs$R4o>"JSkr'jWb6pun3!k/`I]`3K~>
JcDPGs$R4o>"JSkr'jWb6pun3!k/`I]`3K~>
JcDPGs$R4oL.')^`^GO\6puq4!k/`I]DmB~>
JcDPGs$R4oL.')^`^GO\6puq4!k/`I]DmB~>
JcDPGs$R4oL.')^`^GO\6puq4!k/`I]DmB~>
JcDPGs$R4o]0qqaPshtY6put5!k/`I])R9~>
JcDPGs$R4o]0qqaPshtY6put5!k/`I])R9~>
JcDPGs$R4o]0qqaPshtY6put5!k/`I])R9~>
JcDPGs$R4oj$[JYAjkJT6q!"6!k/`M\c70~>
JcDPGs$R4oj$[JYAjkJT6q!"6!k/`M\c70~>
JcDPGs$R4oj$[JYAjkJT6q!"6!k/`M\c70~>
JcDPGs$Zne#ZO4W6r*d^6q!%7!k/`M\Gq'~>
JcDPGs$Zne#ZO4W6r*d^6q!%7!k/`M\Gq'~>
JcDPGs$Zne#ZO4W6r*d^6q!%7!k/`M\Gq'~>
JcDPGs$Zne#_b[$7"YI=6q!(8!k/TE\,Us~>
JcDPGs$Zne#_b[$7"YI=6q!(8!k/TE\,Us~>
JcDPGs$Zne#_b[$7"YI=6q!(8!k/TE\,Us~>
JcDPGs$Zne#e!,s7'?Ri6q!+9!l#/M[f:j~>
JcDPGs$Zne#e!,s7'?Ri6q!+9!l#/M[f:j~>
JcDPGs$Zne#e!,s7'?Ri6q!+9!l#/M[f:j~>
JcDPGs$Zne!93uG"PEbS6q!.:!l#SE[Jta~>
JcDPGs$Zne!93uG"PEbS6q!.:!l#SE[Jta~>
JcDPGs$Zne!93uG"PEbS6q!.:!l#SE[Jta~>
JcDPGs$Zkd!`29Xrr<!dOoGKp'XtILJ,~>
JcDPGs$Zkd!`29Xrr<!dOoGKp'XtILJ,~>
JcDPGs$Zkd!`29Xrr<!dOoGKp'XtILJ,~>
JcC<$W;cq2'XtFKJ,~>
JcC<$W;cq2'XtFKJ,~>
JcC<$W;cq2'XtFKJ,~>
JcC<$WW*%3'XP+FJ,~>
JcC<$WW*%3'XP+FJ,~>
JcC<$WW*%3'XP+FJ,~>
JcC<$WrE.4'XP(EJ,~>
JcC<$WrE.4'XP(EJ,~>
JcC<$WrE.4'XP(EJ,~>
JcDhO"I9r1+K:4t#-fEX(2O\kYlB4~>
JcDhO"I9r1+K:4t#-fEX(2O\kYlB4~>
JcDhO"I9r1+K:4t#-fEX(2O\kYlB4~>
JcDkP#)W^C6o>UXMuO!f&2Q^3#\pRCJ,~>
JcDkP#)W^C6o>UXMuO!f&2Q^3#\pRCJ,~>
JcDkP#)W^C6o>UXMuO!f&2Q^3#\pRCJ,~>
JcDkP!>[Kj6if4nMuNf01]BcC2&*7oJ,~>
JcDkP!>[Kj6if4nMuNf01]BcC2&*7oJ,~>
JcDkP!>[Kj6if4nMuNf01]BcC2&*7oJ,~>
JcDkP!!`?h!!eG^!"Jio!!KM*J,~>
JcDkP!!`?h!!eG^!"Jio!!KM*J,~>
JcDkP!!`?h!!eG^!"Jio!!KM*J,~>
JcDkP!?X,s6ig+4MuNf64oRhM2&ib!J,~>
JcDkP!?X,s6ig+4MuNf64oRhM2&ib!J,~>
JcDkP!?X,s6ig+4MuNf64oRhM2&ib!J,~>
JcDkP#-ACl6oH$cMuO!6"?f.1&>u`3J,~>
JcDkP#-ACl6oH$cMuO!6"?f.1&>u`3J,~>
JcDkP#-ACl6oH$cMuO!6"?f.1&>u`3J,~>
JcDhO"LBZa!hP>M#.kS"1C#/*Y5a"~>
JcDhO"LBZa!hP>M#.kS"1C#/*Y5a"~>
JcDhO"LBZa!hP>M#.kS"1C#/*Y5a"~>
JcD_L!DK,ErrTeHZ`3tT~>
JcD_L!DK,ErrTeHZ`3tT~>
JcD_L!DK,ErrTeHZ`3tT~>
JcD_L!N/>FrrTeHZ`*nS~>
JcD_L!N/>FrrTeHZ`*nS~>
JcD_L!N/>FrrTeHZ`*nS~>
JcD_L!p^EhO8f9n'XO_;J,~>
JcD_L!p^EhO8f9n'XO_;J,~>
JcD_L!p^EhO8f9n'XO_;J,~>
JcD\K!DoDMrrTqL\#01U~>
JcD\K!DoDMrrTqL\#01U~>
JcD\K!DoDMrrTqL\#01U~>
JcD\K!LH?>rrTqT\#'+T~>
JcD\K!LH?>rrTqT\#'+T~>
JcD\K!LH?>rrTqT\#'+T~>
JcD\K!qQutPQ(]n%&9WuJ,~>
JcD\K!qQutPQ(]n%&9WuJ,~>
JcD\K!qQutPQ(]n%&9WuJ,~>
JcDYJ!C3-=rrTY<Z_RPN~>
JcDYJ!C3-=rrTY<Z_RPN~>
JcDYJ!C3-=rrTY<Z_RPN~>
JcDYJ!M<>VrrTY@Z_IJM~>
JcDYJ!M<>VrrTY@Z_IJM~>
JcDYJ!M<>VrrTY@Z_IJM~>
JcDYJ!oj^XQi@,r&@\A5J,~>
JcDYJ!oj^XQi@,r&@\A5J,~>
JcDYJ!oj^XQi@,r&@\A5J,~>
JcDVI!D'8YrrTY@\"NbO~>
JcDVI!D'8YrrTY@\"NbO~>
JcDVI!D'8YrrTY@\"NbO~>
JcDVI!LHWNrrTY@Z_.8J~>
JcDVI!LHWNrrTY@Z_.8J~>
JcDVI!LHWNrrTY@Z_.8J~>
JcDVI!p:-`S,WQ!&@7u.J,~>
JcDVI!p:-`S,WQ!&@7u.J,~>
JcDVI!p:-`S,WQ!&@7u.J,~>
JcDSH!CW]QrrTY@Z^q,H~>
JcDSH!CW]QrrTY@Z^q,H~>
JcDSH!CW]QrrTY@Z^q,H~>
JcDSH!L$?NrrTeH\"*JK~>
JcDSH!L$?NrrTeH\"*JK~>
JcDSH!L$?NrrTeH\"*JK~>
JcDSH!p:-hTDnu%'XO;/J,~>
JcDSH!p:-hTDnu%'XO;/J,~>
JcDSH!p:-hTDnu%'XO;/J,~>
JcDPG!Bd9VrrF7Krr3&7&@7i*J,~>
JcDPG!Bd9VrrF7Krr3&7&@7i*J,~>
JcDPG!Bd9VrrF7Krr3&7&@7i*J,~>
JcDPG!L$ofrs$(HZi@WKYF5E@~>
JcDPG!L$ofrs$(HZi@WKYF5E@~>
JcDPG!L$ofrs$(HZi@WKYF5E@~>
JcDPG!oFFTWW*5H\,ZK?&;(C`R/_[~>
JcDPG!oFFTWW*5H\,ZK?&;(C`R/_[~>
JcDPG!oFFTWW*5H\,ZK?&;(C`R/_[~>
JcDMF!C3ujrs-"EZiC&[!J$O:J,~>
JcDMF!C3ujrs-"EZiC&[!J$O:J,~>
JcDMF!C3ujrs-"EZiC&[!J$O:J,~>
JcDMF!K1'Yrs-.I\%<?/&@7c(J,~>
JcDMF!K1'Yrs-.I\%<?/&@7c(J,~>
JcDMF!K1'Yrs-.I\%<?/&@7c(J,~>
JcDMF!ojj\W;d+3$P'NC]+D<:s*t~>
JcDMF!ojj\W;d+3$P'NC]+D<:s*t~>
JcDMF!ojj\W;d+3$P'NC]+D<:s*t~>
JcDJE!ApjUrs-.E$b-09]-*OAJ,~>
JcDJE!ApjUrs-.E$b-09]-*OAJ,~>
JcDJE!ApjUrs-.E$b-09]-*OAJ,~>
JcDJE!KUKbrrp"C\$lpTQN)I~>
JcDJE!KUKbrrp"C\$lpTQN)I~>
JcDJE!KUKbrrp"C\$lpTQN)I~>
JcDJE!o":\X8`F>&>T:*]+DH<s*t~>
JcDJE!o":\X8`F>&>T:*]+DH<s*t~>
JcDJE!o":\X8`F>&>T:*]+DH<s*t~>
JcDGD!BdQerrTY@YPnJ%[ih%;J,~>
JcDGD!BdQerrTY@YPnJ%[ih%;J,~>
JcDGD!BdQerrTY@YPnJ%[ih%;J,~>
JcDGD!InX^rrTeHZ]P3;~>
JcDGD!InX^rrTeHZ]P3;~>
JcDGD!InX^rrTeHZ]P3;~>
JcDGD!oFR`YQ"[5'XNl#J,~>
JcDGD!oFR`YQ"[5'XNl#J,~>
JcDGD!oFR`YQ"[5'XNl#J,~>
JcDDC!@YF]rrTY@[uUK=~>
JcDDC!@YF]rrTY@[uUK=~>
JcDDC!@YF]rrTY@[uUK=~>
JcDDC!InL^rrTY@Z]5!8~>
JcDDC!InL^rrTY@Z]5!8~>
JcDDC!InL^rrTY@Z]5!8~>
JcDDC!nS"XZi:*9&@7>qJ,~>
JcDDC!nS"XZi:*9&@7>qJ,~>
JcDDC!nS"XZi:*9&@7>qJ,~>
JcDAB!@YFarrTY@Z]"j6~>
JcDAB!@YFarrTY@Z]"j6~>
JcDAB!@YFarrTY@Z]"j6~>
JcDAB!InLbrrTY@[u139~>
JcDAB!InLbrrTY@[u139~>
JcDAB!InLbrrTY@[u139~>
JcDAB!nSFh\,QN=&@[MrJ,~>
JcDAB!nSFh\,QN=&@[MrJ,~>
JcDAB!nSFh\,QN=&@[MrJ,~>
JcD>A!@Y^mrrTY<Z\\X3~>
JcD>A!@Y^mrrTY<Z\\X3~>
JcD>A!@Y^mrrTY<Z\\X3~>
JcD>A!IndnrrTqDZ\SR2~>
JcD>A!IndnrrTqDZ\SR2~>
JcD>A!IndnrrTqDZ\SR2~>
JcD>A!nSFh]DhrI(nZQ_J,~>
JcD>A!nSFh]DhrI(nZQ_J,~>
JcD>A!nSFh]DhrI(nZQ_J,~>
JcD;@!@Y^qrrTeH[tXj4~>
JcD;@!@Y^qrrTeH[tXj4~>
JcD;@!@Y^qrrTeH[tXj4~>
JcD;@!Ine^rrDf0rrTeH[tOd3~>
JcD;@!Ine^rrDf0rrTeH[tOd3~>
JcD;@!Ine^rrDf0rrTeH[tOd3~>
JcD;@#1jjl^L/&U_uBeM'XNGlJ,~>
JcD;@#1jjl^L/&U_uBeM'XNGlJ,~>
JcD;@#1jjl^L/&U_uBeM'XNGlJ,~>
JcD;@"ks_./;N9'rrTeHZ\&4-~>
JcD;@"ks_./;N9'rrTeHZ\&4-~>
JcD;@"ks_./;N9'rrTeHZ\&4-~>
JcDDC#4nHP(c5Rr`r?7L-3bE2'XNAjJ,~>
JcDDC#4nHP(c5Rr`r?7L-3bE2'XNAjJ,~>
JcDDC#4nHP(c5Rr`r?7L-3bE2'XNAjJ,~>
JcDGD$i:o7Vt8L_s7`^!,g62lZOeo\2$e5RrrE(L~>
JcDGD$i:o7Vt8L_s7`^!,g62lZOeo\2$e5RrrE(L~>
JcDGD$i:o7Vt8L_s7`^!,g62lZOeo\2$e5RrrE(L~>
JcDDC!;lcq#4id)$p9a6bPqSm1]BcC2&UuF!<7Q~>
JcDDC!;lcq#4id)$p9a6bPqSm1]BcC2&UuF!<7Q~>
JcDDC!;lcq#4id)$p9a6bPqSm1]BcC2&UuF!<7Q~>
JcDAB#5>0'(`l'-aSu5Kr'UMfJc>`MJ,~>
JcDAB#5>0'(`l'-aSu5Kr'UMfJc>`MJ,~>
JcDAB#5>0'(`l'-aSu5Kr'UMfJc>`MJ,~>
JcDAB"W04[ho?k[rrFc0r^6cE*J+4js*t~>
JcDAB"W04[ho?k[rrFc0r^6cE*J+4js*t~>
JcDAB"W04[ho?k[rrFc0r^6cE*J+4js*t~>
JcD2="X(k[Y?3'ors")Z1dj23WIb'Ls*t~>
JcD2="X(k[Y?3'ors")Z1dj23WIb'Ls*t~>
JcD2="X(k[Y?3'ors")Z1dj23WIb'Ls*t~>
JcD5>#4k_C$p9a6c2S!['S%h@+K9qls8RT~>
JcD5>#4k_C$p9a6c2S!['S%h@+K9qls8RT~>
JcD5>#4k_C$p9a6c2S!['S%h@+K9qls8RT~>
JcD>A#5>0'(bZNbbPqXU'XNAjqYu'~>
JcD>A#5>0'(bZNbbPqXU'XNAjqYu'~>
JcD>A#5>0'(bZNbbPqXU'XNAjqYu'~>
JcD>A"rK=\hu=hNbl7aV'XNAjq>Ys~>
JcD>A"rK=\hu=hNbl7aV'XNAjq>Ys~>
JcD>A"rK=\hu=hNbl7aV'XNAjq>Ys~>
JcD/<!I0+=rrTeHZ[r/Os*t~>
JcD/<!I0+=rrTeHZ[r/Os*t~>
JcD/<!I0+=rrTeHZ[r/Os*t~>
JcD/<!QQV6rrTqL[t4SRs*t~>
JcD/<!QQV6rrTqL[t4SRs*t~>
JcD/<!QQV6rrTqL[t4SRs*t~>
JcD,;!?g"@rrTqT[t4SQs*t~>
JcD,;!?g"@rrTqT[t4SQs*t~>
JcD,;!?g"@rrTqT[t4SQs*t~>
JcD,;!I0+ArrTY<UOiI<s*t~>
JcD,;!I0+ArrTY<UOiI<s*t~>
JcD,;!I0+ArrTY<UOiI<s*t~>
JcD,;!QQV:rrTY<Z[r/Ks*t~>
JcD,;!QQV:rrTY<Z[r/Ks*t~>
JcD,;!QQV:rrTY<Z[r/Ks*t~>
JcD):!?g"DrrTY@Z[r/Js*t~>
JcD):!?g"DrrTY@Z[r/Js*t~>
JcD):!?g"DrrTY@Z[r/Js*t~>
JcD):!I0+ErrTY@[t4SMs*t~>
JcD):!I0+ErrTY@[t4SMs*t~>
JcD):!I0+ErrTY@[t4SMs*t~>
JcD):!QR1NrrTY@[t4SLs*t~>
JcD):!QR1NrrTY@[t4SLs*t~>
JcD):!QR1NrrTY@[t4SLs*t~>
JcD&9!?g:PrrTY@Z[r/Gs*t~>
JcD&9!?g:PrrTY@Z[r/Gs*t~>
JcD&9!?g:PrrTY@Z[r/Gs*t~>
JcD&9!I0CQrrTY@Z[r/Fs*t~>
JcD&9!I0CQrrTY@Z[r/Fs*t~>
JcD&9!I0CQrrTY@Z[r/Fs*t~>
JcD&9!QR1RrrTY@Z[r/Es*t~>
JcD&9!QR1RrrTY@Z[r/Es*t~>
JcD&9!QR1RrrTY@Z[r/Es*t~>
JcD#8!?fkHrrTeH[t4SHs*t~>
JcD#8!?fkHrrTeH[t4SHs*t~>
JcD#8!?fkHrrTeH[t4SHs*t~>
JcD#8!GI,ArrTYDZ[r/Cs*t~>
JcD#8!GI,ArrTYDZ[r/Cs*t~>
JcD#8!GI,ArrTYDZ[r/Cs*t~>
JcD#8!P^VSrrF7Krr3&7&@6rfli2J~>
JcD#8!P^VSrrF7Krr3&7&@6rfli2J~>
JcD#8!P^VSrrF7Krr3&7&@6rfli2J~>
JcD#8!rEtdjSoFr&@;DK&?gZblMlA~>
JcD#8!rEtdjSoFr&@;DK&?gZblMlA~>
JcD#8!rEtdjSoFr&@;DK&?gZblMlA~>
JcCu7!I0[grs0aVs8T\BK++B's69Q6~>
JcCu7!I0[grs0aVs8T\BK++B's69Q6~>
JcCu7!I0[grs0aVs8T\BK++B's69Q6~>
JcCu7!R!=_rs-"EZiC&[!J#b$kl6/~>
JcCu7!R!=_rs-"EZiC&[!J#b$kl6/~>
JcCu7!R!=_rs-"EZiC&[!J#b$kl6/~>
JcCu7!rEtpkPke!&@]7cL(L\Bs69Q6~>
JcCu7!rEtpkPke!&@]7cL(L\Bs69Q6~>
JcCu7!rEtpkPke!&@]7cL(L\Bs69Q6~>
JcCr6!Gmt^rs-"@%^Z2I&@6rflMlA~>
JcCr6!Gmt^rs-"@%^Z2I&@6rflMlA~>
JcCr6!Gmt^rs-"@%^Z2I&@6rflMlA~>
JcCr6!QQnVrs-.E$b-09]-)\)lMlA~>
JcCr6!QQnVrs-.E$b-09]-)\)lMlA~>
JcCr6!QQnVrs-.E$b-09]-)\)lMlA~>
JcCr6!rEttkl1gu%(E\WZ[r/>s*t~>
JcCr6!rEttkl1gu%(E\WZ[r/>s*t~>
JcCr6!rEttkl1gu%(E\WZ[r/>s*t~>
JcCo5!Gn+ers-:MU]:A+&@[5jkl6/~>
JcCo5!Gn+ers-:MU]:A+&@[5jkl6/~>
JcCo5!Gn+ers-:MU]:A+&@[5jkl6/~>
JcCo5!OjoNrrTY@YPnJ%[ig8%kl6/~>
JcCo5!OjoNrrTY@YPnJ%[ig8%kl6/~>
JcCo5!OjoNrrTY@YPnJ%[ig8%kl6/~>
JcCo5!rEPpm/I.!'XNAjiW"E~>
JcCo5!rEPpm/I.!'XNAjiW"E~>
JcCo5!rEPpm/I.!'XNAjiW"E~>
JcCl4!GI8UrrTYDZ[r/7s*t~>
JcCl4!GI8UrrTYDZ[r/7s*t~>
JcCl4!GI8UrrTYDZ[r/7s*t~>
JcCl4!Ok>^rrTY@[t4S:s*t~>
JcCl4!Ok>^rrTY@[t4S:s*t~>
JcCl4!Ok>^rrTY@[t4S:s*t~>
JcCi3!>skdrrTY@Z[r/5s*t~>
JcCi3!>skdrrTY@Z[r/5s*t~>
JcCi3!>skdrrTY@Z[r/5s*t~>
JcCi3!G%,YrrTY@Z[r/4s*t~>
JcCi3!G%,YrrTY@Z[r/4s*t~>
JcCi3!G%,YrrTY@Z[r/4s*t~>
JcCi3!OG2brrTY@Z[r/3s*t~>
JcCi3!OG2brrTY@Z[r/3s*t~>
JcCi3!OG2brrTY@Z[r/3s*t~>
JcCi3!rEhpo`#!%&@[5jg])d~>
JcCi3!rEhpo`#!%&@[5jg])d~>
JcCi3!rEhpo`#!%&@[5jg])d~>
JcCf2!E>9UrrTY@[t4S5s*t~>
JcCf2!E>9UrrTY@[t4S5s*t~>
JcCf2!E>9UrrTY@[t4S5s*t~>
JcCf2!O#&frrTY<Z[r/0s*t~>
JcCf2!O#&frrTY<Z[r/0s*t~>
JcCf2!O#&frrTY<Z[r/0s*t~>
JcCf2!qQu`q#:E1%'tNbf`-I~>
JcCf2!qQu`q#:E1%'tNbf`-I~>
JcCf2!qQu`q#:E1%'tNbf`-I~>
JcCc1!E>]errTqPT7R$os*t~>
JcCc1!E>]errTqPT7R$os*t~>
JcCc1!E>]errTqPT7R$os*t~>
JcCc1!O#&jrrTeH\,-+-q[!6/qgne,s*t~>
JcCc1!O#&jrrTeH\,-+-q[!6/qgne,s*t~>
JcCc1!O#&jrrTeH\,-+-q[!6/qgne,s*t~>
JcCc1!q-9Xr;Qi1'Y!o<!2f_q!2tJKir=N~>
JcCc1!q-9Xr;Qi1'Y!o<!2f_q!2tJKir=N~>
JcCc1!q-9Xr;Qi1'Y!o<!2f_q!2tJKir=N~>
JcC`0!Ec,qrrTeHZhXP'9)rE$9nE?(s*t~>
JcC`0!Ec,qrrTeHZhXP'9)rE$9nE?(s*t~>
JcC`0!Ec,qrrTeHZhXP'9)rE$9nE?(s*t~>
JcC`0!O"cfrrTeHZhXP)liR^o%gDBPs5X-0~>
JcC`0!O"cfrrTeHZhXP)liR^o%gDBPs5X-0~>
JcC`0!O"cfrrTeHZhXP)liR^o%gDBPs5X-0~>
JcC`0#-.e0*IAL,p\tGa!+>h=!1AE<j8XW~>
JcC`0#-.e0*IAL,p\tGa!+>h=!1AE<j8XW~>
JcC`0#-.e0*IAL,p\tGa!+>h=!1AE<j8XW~>
JcCc1!O)q1!!*+GpAY=Z!4i-D!'Yu6j8XW~>
JcCc1!O)q1!!*+GpAY=Z!4i-D!'Yu6j8XW~>
JcCc1!O)q1!!*+GpAY=Z!4i-D!'Yu6j8XW~>
JcCc1!$_=@!#kV3#iYgrrVum7!9/S0jSs`~>
JcCc1!$_=@!#kV3#iYgrrVum7!9/S0jSs`~>
JcCc1!$_=@!#kV3#iYgrrVum7!9/S0jSs`~>
JcCc1!!rK&!!N&r!e^Pfrr3%:!/Q4+jSs`~>
JcCc1!!rK&!!N&r!e^Pfrr3%:!/Q4+jSs`~>
JcCc1!!rK&!!N&r!e^Pfrr3%:!/Q4+jSs`~>
JcCc1!%%OC!#t\4!\FDfrr3&:!%id%jSs`~>
JcCc1!%%OC!#t\4!\FDfrr3&:!%id%jSs`~>
JcCc1!%%OC!#t\4!\FDfrr3&:!%id%jSs`~>
JcCc1!J:FP!!*G*q#:?Ap](<CJcFj3J,~>
JcCc1!J:FP!!*G*q#:?Ap](<CJcFj3J,~>
JcCc1!J:FP!!*G*q#:?Ap](<CJcFj3J,~>
JcCf2#.kS",m47<p\t5;p](;?JcFj3J,~>
JcCf2#.kS",m47<p\t5;p](;?JcFj3J,~>
JcCf2#.kS",m47<p\t5;p](;?JcFj3J,~>
JcCi3!kT/Qrr3!mTD/?e*WXgirrU^N+G'RSs*t~>
JcCi3!kT/Qrr3!mTD/?e*WXgirrU^N+G'RSs*t~>
JcCi3!kT/Qrr3!mTD/?e*WXgirrU^N+G'RSs*t~>
JcCl4!kT/QrVlnr7/6c`_>l^prrP4]_L_aLs*t~>
JcCl4!kT/QrVlnr7/6c`_>l^prrP4]_L_aLs*t~>
JcCl4!kT/QrVlnr7/6c`_>l^prrP4]_L_aLs*t~>
JcCo5!kT/Qr;Qia&G,_t!bMG,qYpVi!,7#ak5Tr~>
JcCo5!kT/Qr;Qia&G,_t!bMG,qYpVi!,7#ak5Tr~>
JcCo5!kT/Qr;Qia&G,_t!bMG,qYpVi!,7#ak5Tr~>
JcCr6!l#GYqYpRmTDJQir=9V@qYpZp'G::ps6'E4~>
JcCr6!l#GYqYpRmTDJQir=9V@qYpZp'G::ps6'E4~>
JcCr6!l#GYqYpRmTDJQir=9V@qYpZp'G::ps6'E4~>
JcCu7!l#_aq>UJ^8:gfgs*t~>
JcCu7!l#_aq>UJ^8:gfgs*t~>
JcCu7!l#_aq>UJ^8:gfgs*t~>
JcD#8!k/T5q#:Ee&GLbUdf4g~>
JcD#8!k/T5q#:Ee&GLbUdf4g~>
JcD#8!k/T5q#:Ee&GLbUdf4g~>
JcD&9!k/TEpAY.YRt:Ufs*t~>
JcD&9!k/TEpAY.YRt:Ufs*t~>
JcD&9!k/TEpAY.YRt:Ufs*t~>
JcD):!k/`Ip&>&b<.Y(ts*t~>
JcD):!k/`Ip&>&b<.Y(ts*t~>
JcD):!k/`Ip&>&b<.Y(ts*t~>
JcD,;!k/`Mo`#!Q%.AcIe,Op~>
JcD,;!k/`Mo`#!Q%.AcIe,Op~>
JcD,;!k/`Mo`#!Q%.AcIe,Op~>
JcD/<!k/`Mo)A_]X+C<"s*t~>
JcD/<!k/`Mo)A_]X+C<"s*t~>
JcD/<!k/`Mo)A_]X+C<"s*t~>
JcD2=!k/`Inc&WV:kAYqs*t~>
JcD2=!k/`Inc&WV:kAYqs*t~>
JcD2=!k/`Inc&WV:kAYqs*t~>
JcD5>!k/`InG`RQ&FY2MeGk%~>
JcD5>!k/`InG`RQ&FY2MeGk%~>
JcD5>!k/`InG`RQ&FY2MeGk%~>
JcD8?!k/`Imf*;UUOiHps*t~>
JcD8?!k/`Imf*;UUOiHps*t~>
JcD8?!k/`Imf*;UUOiHps*t~>
JcD;@!kT/UmJd3N:kAYrs*t~>
JcD;@!kT/UmJd3N:kAYrs*t~>
JcD;@!kT/UmJd3N:kAYrs*t~>
JcD>A!k/lMm/I.M&GLbUec1.~>
JcD>A!k/lMm/I.M&GLbUec1.~>
JcD>A!k/lMm/I.M&GLbUec1.~>
JcDPG!?e`JrrTqHZg.Pk4K!c1ec1.~>
JcDPG!?e`JrrTqHZg.Pk4K!c1ec1.~>
JcDPG!?e`JrrTqHZg.Pk4K!c1ec1.~>
JcDPG#.kGQs18iGl2LdJ@"J@.s*t~>
JcDPG#.kGQs18iGl2LdJ@"J@.s*t~>
JcDPG#.kGQs18iGl2LdJ@"J@.s*t~>
JcDMF"M54t%%lb`!oFFTJcF=$J,~>
JcDMF"M54t%%lb`!oFFTJcF=$J,~>
JcDMF"M54t%%lb`!oFFTJcF=$J,~>
JcDYJ!?e`JrrRoUJEHk45dQ%Af)L7~>
JcDYJ!?e`JrrRoUJEHk45dQ%Af)L7~>
JcDYJ!?e`JrrRoUJEHk45dQ%Af)L7~>
JcDYJ#eLYSs18u"&@:R"!K1'2s474#~>
JcDYJ#eLYSs18u"&@:R"!K1'2s474#~>
JcDYJ#eLYSs18u"&@:R"!K1'2s474#~>
JcDVI#eLXu'XRhO&@:U#!ojj\JcF@%J,~>
JcDVI#eLXu'XRhO&@:U#!ojj\JcF@%J,~>
JcDVI#eLXu'XRhO&@:U#!ojj\JcF@%J,~>
JcDSH!f6r.rr3#2+Qrb*1ol3-fDg@~>
JcDSH!f6r.rr3#2+Qrb*1ol3-fDg@~>
JcDSH!f6r.rr3#2+Qrb*1ol3-fDg@~>
JcDVI"M5(s&@:Es!KUK:s4@:$~>
JcDVI"M5(s&@:Es!KUK:s4@:$~>
JcDVI"M5(s&@:Es!KUK:s4@:$~>
JcDYJ#/:_Es18iKjSo;9&GLbUf`-I~>
JcDYJ#/:_Es18iKjSo;9&GLbUf`-I~>
JcDYJ#/:_Es18iKjSo;9&GLbUf`-I~>
JcD\K!k/`Err3#2+QNJ&4Kj>9f`-I~>
JcD\K!k/`Err3#2+QNJ&4Kj>9f`-I~>
JcD\K!k/`Err3#2+QNJ&4Kj>9f`-I~>
JcD_L!kT/Qh>[M*A:ad5s*t~>
JcD_L!kT/Qh>[M*A:ad5s*t~>
JcD_L!kT/Qh>[M*A:ad5s*t~>
JcDbM!k/lMh#@H5&GLbUg&HR~>
JcDbM!k/lMh#@H5&GLbUg&HR~>
JcDbM!k/lMh#@H5&GLbUg&HR~>
JcDeN!k/`MgA_1%[t4S4s*t~>
JcDeN!k/`MgA_1%[t4S4s*t~>
JcDeN!k/`MgA_1%[t4S4s*t~>
JcDhO!k/`Ig&D)&@"J@2s*t~>
JcDhO!k/`Ig&D)&@"J@2s*t~>
JcDhO!k/`Ig&D)&@"J@2s*t~>
JcDkP!k/`If`)$)&GLbUgAc[~>
JcDkP!k/`If`)$)&GLbUgAc[~>
JcDkP!k/`If`)$)&GLbUgAc[~>
JcDnQ!k/`If)Gb![t4S5s*t~>
JcDnQ!k/`If)Gb![t4S5s*t~>
JcDnQ!k/`If)Gb![t4S5s*t~>
JcDqR!k/`Mec,Z"@"J@3s*t~>
JcDqR!k/`Mec,Z"@"J@3s*t~>
JcDqR!k/`Mec,Z"@"J@3s*t~>
JcDtS!k/`MeGfU%*;b<eg])d~>
JcDtS!k/`MeGfU%*;b<eg])d~>
JcDtS!k/`MeGfU%*;b<eg])d~>
JcE"T!k/TEdf0=r^OcF>s*t~>
JcE"T!k/TEdf0=r^OcF>s*t~>
JcE"T!k/TEdf0=r^OcF>s*t~>
JcE%U!l#/MdJj5sBS$3<s*t~>
JcE%U!l#/MdJj5sBS$3<s*t~>
JcE%U!l#/MdJj5sBS$3<s*t~>
JcE(V!l#SEd/O1!*;b<eh#Dm~>
JcE(V!l#SEd/O1!*;b<eh#Dm~>
JcE(V!l#SEd/O1!*;b<eh#Dm~>
JcE+W!kT/UcMmnn^OcF?s*t~>
JcE+W!kT/UcMmnn^OcF?s*t~>
JcE+W!kT/UcMmnn^OcF?s*t~>
JcE.X!kT/Uc2RfoBS$3=s*t~>
JcE.X!kT/Uc2RfoBS$3=s*t~>
JcE.X!kT/Uc2RfoBS$3=s*t~>
JcE1Y!kT/Qbl7n!*;fK6=<rItiW"E~>
JcE1Y!kT/Qbl7n!*;fK6=<rItiW"E~>
JcE1Y!kT/Qbl7n!*;fK6=<rItiW"E~>
JcE4Z!kT/QbPqe<)at/tPN.5oiW"E~>
JcE4Z!kT/QbPqe<)at/tPN.5oiW"E~>
JcE4Z!kT/QbPqe<)at/tPN.5oiW"E~>
JcEC_#(?m\#ZMMEc2S"BX'?J_6g'%#hZ&*~>
JcEC_#(?m\#ZMMEc2S"BX'?J_6g'%#hZ&*~>
JcEC_#(?m\#ZMMEc2S"BX'?J_6g'%#hZ&*~>
JcEF`#(?b46o>*Fbl7h`302tK+G'RKs*t~>
JcEF`#(?b46o>*Fbl7h`302tK+G'RKs*t~>
JcEF`#(?b46o>*Fbl7h`302tK+G'RKs*t~>
JcEF`!=CX^6if.La8Z;ka7lc>,_?!Ts*t~>
JcEF`!=CX^6if.La8Z;ka7lc>,_?!Ts*t~>
JcEF`!=CX^6if.La8Z;ka7lc>,_?!Ts*t~>
JcEF`!!E-e!!11@#4knH$p9a6JcFa0J,~>
JcEF`!!E-e!!11@#4knH$p9a6JcFa0J,~>
JcEF`!!E-e!!11@#4knH$p9a6JcFa0J,~>
JcEF`!=CX^6if.LbPqe@X'?Jp''K8o!;D'Ej8XW~>
JcEF`!=CX^6if.LbPqe@X'?Jp''K8o!;D'Ej8XW~>
JcEF`!=CX^6if.LbPqe@X'?Jp''K8o!;D'Ej8XW~>
JcEF`#$2$c6o>0ibPqqe302ts+NOMs?l\ols5a31~>
JcEF`#$2$c6o>0ibPqqe302ts+NOMs?l\ols5a31~>
JcEF`#$2$c6o>0ibPqqe302ts+NOMs?l\ols5a31~>
JcEIa#.kRL$3:BN`W$*S4<Q21j+76js*t~>
JcEIa#.kRL$3:BN`W$*S4<Q21j+76js*t~>
JcEIa#.kRL$3:BN`W$*S4<Q21j+76js*t~>
JcELb!kT/Q_uBr4T0O&!a8:GfiW"E~>
JcELb!kT/Q_uBr4T0O&!a8:GfiW"E~>
JcELb!kT/Q_uBr4T0O&!a8:GfiW"E~>
JcEOc!kT/Q_uBr<*(["!+P22Ei;\<~>
JcEOc!kT/Q_uBr<*(["!+P22Ei;\<~>
JcEOc!kT/Q_uBr<*(["!+P22Ei;\<~>
JcERd!kT/Q_>aN4rr3"DIt@XXs*t~>
JcERd!kT/Q_>aN4rr3"DIt@XXs*t~>
JcERd!kT/Q_>aN4rr3"DIt@XXs*t~>
JcEUe!l#GY]`/#Q."VEVs*t~>
JcEUe!l#GY]`/#Q."VEVs*t~>
JcEUe!l#GY]`/#Q."VEVs*t~>
JcEXf!l#_a])MdRf7Et\s*t~>
JcEXf!l#_a])MdRf7Et\s*t~>
JcEXf!l#_a])MdRf7Et\s*t~>
JcE[g!k/T5\c2\TIt@XYs*t~>
JcE[g!k/T5\c2\TIt@XYs*t~>
JcE[g!k/T5\c2\TIt@XYs*t~>
JcE^h!k/TE\GlTM."VEWs*t~>
JcE^h!k/TE\GlTM."VEWs*t~>
JcE^h!k/TE\GlTM."VEWs*t~>
JcEai!k/`I[f6@Nf7Et]s*t~>
JcEai!k/`I[f6@Nf7Et]s*t~>
JcEai!k/`I[f6@Nf7Et]s*t~>
JcEdj!k/`M[Jp8PIt@XZs*t~>
JcEdj!k/`M[Jp8PIt@XZs*t~>
JcEdj!k/`M[Jp8PIt@XZs*t~>
JcEgk!k/`M[/U0I3._+hs*t~>
JcEgk!k/`M[/U0I3._+hs*t~>
JcEgk!k/`M[/U0I3._+hs*t~>
JcEjl!k/`IZMsqJhgtgfs*t~>
JcEjl!k/`IZMsqJhgtgfs*t~>
JcEjl!k/`IZMsqJhgtgfs*t~>
JcEmm!k/`IZ2XiLLOoKcs*t~>
JcEmm!k/`IZ2XiLLOoKcs*t~>
JcEmm!k/`IZ2XiLLOoKcs*t~>
JcEpn!k/`IYl=aE3._+is*t~>
JcEpn!k/`IYl=aE3._+is*t~>
JcEpn!k/`IYl=aE3._+is*t~>
JcEso!kT/UY5\MFdt.P[s*t~>
JcEso!kT/UY5\MFdt.P[s*t~>
JcEso!kT/UY5\MFdt.P[s*t~>
JcF!p!k/lMXoAE8K7X'`s*t~>
JcF!p!k/lMXoAE8K7X'`s*t~>
JcF!p!k/lMXoAE8K7X'`s*t~>
JcF7"!?elMrrTqHZ`O0-^GpfEjSs`~>
JcF7"!?elMrrTqHZ`O0-^GpfEjSs`~>
JcF7"!?elMrrTqHZ`O0-^GpfEjSs`~>
JcF7"#Ib8Ns8T\BYH.[)q]+(9s5j92~>
JcF7"#Ib8Ns8T\BYH.[)q]+(9s5j92~>
JcF7"#Ib8Ns8T\BYH.[)q]+(9s5j92~>
JcF4!"hP>T]*t=2rrIA*JcFj3J,~>
JcF4!"hP>T]*t=2rrIA*JcFj3J,~>
JcF4!"hP>T]*t=2rrIA*JcFj3J,~>
JcF=$#9^AQs0i@D\#B<-b;=eMjo9i~>
JcF=$#9^AQs0i@D\#B<-b;=eMjo9i~>
JcF=$#9^AQs0i@D\#B<-b;=eMjo9i~>
JcF=$#J1PRs18dL\#B<.q]+LEs5s?3~>
JcF=$#J1PRs18dL\#B<.q]+LEs5s?3~>
JcF=$#J1PRs18dL\#B<.q]+LEs5s?3~>
JcF:##J1Ot'XP7[Z`*m)Cm0GMk5Tr~>
JcF:##J1Ot'XP7[Z`*m)Cm0GMk5Tr~>
JcF:##J1Ot'XP7[Z`*m)Cm0GMk5Tr~>
JcF7"#DiJ3s8T\B\#KB.a"W)Ek5Tr~>
JcF7"#DiJ3s8T\B\#KB.a"W)Ek5Tr~>
JcF7"#DiJ3s8T\B\#KB.a"W)Ek5Tr~>
JcF:##eLM"&@;E:[ih[M!rEttJcFp5J,~>
JcF:##eLM"&@;E:[ih[M!rEttJcFp5J,~>
JcF:##eLM"&@;E:[ih[M!rEttJcFp5J,~>
JcF=$#/:_Es18iKV>gR4Q\#2"s*t~>
JcF=$#/:_Es18iKV>gR4Q\#2"s*t~>
JcF=$#/:_Es18iKV>gR4Q\#2"s*t~>
JcF@%!k/`Err3#2+Jo)=[kr[9kPp&~>
JcF@%!k/`Err3#2+Jo)=[kr[9kPp&~>
JcF@%!k/`Err3#2+Jo)=[kr[9kPp&~>
JcFC&!kT/QTDnui&F4oIkl6/~>
JcFC&!kT/QTDnui&F4oIkl6/~>
JcFC&!kT/QTDnui&F4oIkl6/~>
JcFF'!k/lMSc8_(LOoKhs*t~>
JcFF'!k/lMSc8_(LOoKhs*t~>
JcFF'!k/lMSc8_(LOoKhs*t~>
JcFI(!k/`MSGrW!5_8t!s*t~>
JcFI(!k/`MSGrW!5_8t!s*t~>
JcFI(!k/`MSGrW!5_8t!s*t~>
JcFL)!k/`IRf<C*j+76ps*t~>
JcFL)!k/`IRf<C*j+76ps*t~>
JcFL)!k/`IRf<C*j+76ps*t~>
JcFO*!k/`IRK!:uMh1oms*t~>
JcFO*!k/`IRK!:uMh1oms*t~>
JcFO*!k/`IRK!:uMh1oms*t~>
JcFR+!k/`IR/[2n7"PC&s*t~>
JcFR+!k/`IR/[2n7"PC&s*t~>
JcFR+!k/`IR/[2n7"PC&s*t~>
JcFU,!k/`MQi@-a(up2IlMlA~>
JcFU,!k/`MQi@-a(up2IlMlA~>
JcFU,!k/`MQi@-a(up2IlMlA~>
JcFX-!k/`MQ2^kaPC`c!s*t~>
JcFX-!k/`MQ2^kaPC`c!s*t~>
JcFX-!k/`MQ2^kaPC`c!s*t~>
JcF[.!k/TEPlCcf8:gg+s*t~>
JcF[.!k/TEPlCcf8:gg+s*t~>
JcF[.!k/TEPlCcf8:gg+s*t~>
JcF^/!l#/MPQ(^U&EA?Ali2J~>
JcF^/!l#/MPQ(^U&EA?Ali2J~>
JcF^/!l#/MPQ(^U&EA?Ali2J~>
JcFa0!l#SEOoGG]T7R%.s*t~>
JcFa0!l#SEOoGG]T7R%.s*t~>
JcFa0!l#SEOoGG]T7R%.s*t~>
JcFd1!kT/UOT,?b8:gg,s*t~>
JcFd1!kT/UOT,?b8:gg,s*t~>
JcFd1!kT/UOT,?b8:gg,s*t~>
JcFg2!kT/UO8f:M"RCX=m/MS~>
JcFg2!kT/UO8f:M"RCX=m/MS~>
JcFg2!kT/UO8f:M"RCX=m/MS~>
JcFj3!kT/QNW0#]UOiI3s*t~>
JcFj3!kT/QNW0#]UOiI3s*t~>
JcFj3!kT/QNW0#]UOiI3s*t~>
JcFm4!kT/QN;ip^5_8t%s*t~>
JcFm4!kT/QN;ip^5_8t%s*t~>
JcFm4!kT/QN;ip^5_8t%s*t~>
JcG'9#(?m[#?2DDMuNp\!sp9QJcG3=J,~>
JcG'9#(?m[#?2DDMuNp\!sp9QJcG3=J,~>
JcG'9#(?m[#?2DDMuNp\!sp9QJcG3=J,~>
JcG*:#($P16o>'EMuO!f*]6>C%@i"LnGe"~>
JcG*:#($P16o>'EMuO!f*]6>C%@i"LnGe"~>
JcG*:#($P16o>'EMuO!f*]6>C%@i"LnGe"~>
JcG*:!=CX^6if.LMuNf7@K&Xq2%tQ@nGe"~>
JcG*:!=CX^6if.LMuNf7@K&Xq2%tQ@nGe"~>
JcG*:!=CX^6if.LMuNf7@K&Xq2%tQ@nGe"~>
JcG*:!!E-e!!/#X!>%d"6i[:>s7$&=~>
JcG*:!!E-e!!/#X!>%d"6i[:>s7$&=~>
JcG*:!!E-e!!/#X!>%d"6i[:>s7$&=~>
JcG*:!=L^_6if.LMuNf76iKIS2%>-:nGe"~>
JcG*:!=L^_6if.LMuNf76iKIS2%>-:nGe"~>
JcG*:!=L^_6if.LMuNf76iKIS2%>-:nGe"~>
JcG*:##5F[6o>0iMuO!f(GeH:$$_%$nGe"~>
JcG*:##5F[6o>0iMuO!f(GeH:$$_%$nGe"~>
JcG*:##5F[6o>0iMuO!f(GeH:$$_%$nGe"~>
JcG-;#.kRD$N^QNM>m^b-Nj^$JcG3=J,~>
JcG-;#.kRD$N^QNM>m^b-Nj^$JcG3=J,~>
JcG-;#.kRD$N^QNM>m^b-Nj^$JcG3=J,~>
JcG0<!kT/QJc>aQPC`c&s*t~>
JcG0<!kT/QJc>aQPC`c&s*t~>
JcG0<!kT/QJc>aQPC`c&s*t~>
JcG3=!kT/QJc>fOX$hO=n,In~>
JcG3=!kT/QJc>fOX$hO=n,In~>
JcG3=!kT/QJc>fOX$hO=n,In~>
JcG6>!kT/QJcGcM!q-uhJcG6>J,~>
JcG6>!kT/QJcGcM!q-uhJcG6>J,~>
JcG6>!kT/QJcGcM!q-uhJcG6>J,~>
JcG9?!l#GYJcG]K!E>D:s7$&=~>
JcG9?!l#GYJcG]K!E>D:s7$&=~>
JcG9?!l#GYJcG]K!E>D:s7$&=~>
JcG<@!l#_aJcGZJ!O"b>s7$&=~>
JcG<@!l#_aJcGZJ!O"b>s7$&=~>
JcG<@!l#_aJcGZJ!O"b>s7$&=~>
JcG?A!k/T5JcGWI!qR,pJcG9?J,~>
JcG?A!k/T5JcGWI!qR,pJcG9?J,~>
JcG?A!k/T5JcGWI!qR,pJcG9?J,~>
JcGBB!k/TEJcGQG!F1h>s7-,>~>
JcGBB!k/TEJcGQG!F1h>s7-,>~>
JcGBB!k/TEJcGQG!F1h>s7-,>~>
JcGEC!k/`IJcGNF!N/J>s7-,>~>
JcGEC!k/`IJcGNF!N/J>s7-,>~>
JcGEC!k/`IJcGNF!N/J>s7-,>~>
JcGHD!k/`MJcGKE!r!,lJcG<@J,~>
JcGHD!k/`MJcGKE!r!,lJcG<@J,~>
JcGHD!k/`MJcGKE!r!,lJcG<@J,~>
JcGKE!k/`MJcGEC!FUt>s762?~>
JcGKE!k/`MJcGEC!FUt>s762?~>
JcGKE!k/`MJcGEC!FUt>s762?~>
JcGNF!k/`IJcGBB!NSnFs762?~>
JcGNF!k/`IJcGBB!NSnFs762?~>
JcGNF!k/`IJcGBB!NSnFs762?~>
JcGQG!k/`IJcG?A!r!DpJcG?AJ,~>
JcGQG!k/`IJcG?A!r!DpJcG?AJ,~>
JcGQG!k/`IJcG?A!r!DpJcG?AJ,~>
JcGTH!k/`IJcG9?!G%7Bs7?8@~>
JcGTH!k/`IJcG9?!G%7Bs7?8@~>
JcGTH!k/`IJcG9?!G%7Bs7?8@~>
JcGWI!kT/UJcG6>!OG1Fs7?8@~>
JcGWI!kT/UJcG6>!OG1Fs7?8@~>
JcGWI!kT/UJcG6>!OG1Fs7?8@~>
JcGZJ!k/lMJcG3=!r!\pJcGBBJ,~>
JcGZJ!k/lMJcG3=!r!\pJcGBBJ,~>
JcGZJ!k/lMJcG3=!r!\pJcGBBJ,~>
KDtrp\,H=.^C[`&s6]ge@$cHEo`'F~>
KDtrp\,H=.^C[`&s6]ge@$cHEo`'F~>
KDtrp\,H=.^C[`&s6]ge@$cHEo`'F~>
KDu1c&@;E:]+D/ss6Tad^HdAMo`'F~>
KDu1c&@;E:]+D/ss6Tad^HdAMo`'F~>
KDu1c&@;E:]+D/ss6Tad^HdAMo`'F~>
K)Z"d&@]7[T7R%.rrVp/j+77's*t~>
K)Z"d&@]7[T7R%.rrVp/j+77's*t~>
K)Z"d&@]7[T7R%.rrVp/j+77's*t~>
L&VB#ZiC'7$OaFps69OaBTn#Ip&BO~>
L&VB#ZiC'7$OaFps69OaBTn#Ip&BO~>
L&VB#ZiC'7$OaFps69OaBTn#Ip&BO~>
L&VCi&@;DK%h#jts69Oaa#JYMp&BO~>
L&VCi&@;DK%h#jts69Oaa#JYMp&BO~>
L&VCi&@;DK%h#jts69Oaa#JYMp&BO~>
K`;:h&:bJ$[h,lss6BUcq[i(Es7ZJC~>
K`;:h&:bJ$[h,lss6BUcq[i(Es7ZJC~>
K`;:h&:bJ$[h,lss6BUcq[i(Es7ZJC~>
KDu15!J(4M]+DH&s6BUbE0#SMpA]X~>
KDu15!J(4M]+DH&s6BUbE0#SMpA]X~>
KDu15!J(4M]+DH&s6BUbE0#SMpA]X~>
K`;=i%#,>"s8TPNJcG$8!OG=Js7ZJC~>
K`;=i%#,>"s8TPNJcG$8!OG=Js7ZJC~>
K`;=i%#,>"s8TPNJcG$8!OG=Js7ZJC~>
L&V@l&>T9;&@6rfkPkV\*92VMp]#a~>
L&V@l&>T9;&@6rfkPkV\*92VMp]#a~>
L&V@l&>T9;&@6rfkPkV\*92VMp]#a~>
LAq=a&?l*5!P9J*s5s=^E0#SMp]#a~>
LAq=a&?l*5!P9J*s5s=^E0#SMp]#a~>
LAq=a&?l*5!P9J*s5s=^E0#SMp]#a~>
L]7Ff'XNAji;Whi7"PC4s*t~>
L]7Ff'XNAji;Whi7"PC4s*t~>
L]7Ff'XNAji;Whi7"PC4s*t~>
M#ROc'XNAjhu<cT+QJ%Qq#>j~>
M#ROc'XNAjhu<cT+QJ%Qq#>j~>
M#ROc'XNAjhu<cT+QJ%Qq#>j~>
M>mXd&@[5jh>[LhQ\#23s*t~>
M>mXd&@[5jh>[LhQ\#23s*t~>
M>mXd&@[5jh>[LhQ\#23s*t~>
MZ3ae&@6rfh#@Di5_8t1s*t~>
MZ3ae&@6rfh#@Di5_8t1s*t~>
MZ3ae&@6rfh#@Di5_8t1s*t~>
MuNjf&@6rfg]%?P+QJ%Qq>Ys~>
MuNjf&@6rfg]%?P+QJ%Qq>Ys~>
MuNjf&@6rfg]%?P+QJ%Qq>Ys~>
N;isg&@6rfg&D(dLOoL$s*t~>
N;isg&@6rfg&D(dLOoL$s*t~>
N;isg&@6rfg&D(dLOoL$s*t~>
NW0'h&@[5jf`(ue3._,*s*t~>
NW0'h&@[5jf`(ue3._,*s*t~>
NW0'h&@[5jf`(ue3._,*s*t~>
NrK0i&@[5jfDbpL*8c>IqYu'~>
NrK0i&@[5jfDbpL*8c>IqYu'~>
NrK0i&@[5jfDbpL*8c>IqYu'~>
O8f9j%'tNbec,Y`LOoL%s*t~>
O8f9j%'tNbec,Y`LOoL%s*t~>
O8f9j%'tNbec,Y`LOoL%s*t~>
OT,Bs%'tNbeGfQi3._,+s*t~>
OT,Bs%'tNbeGfQi3._,+s*t~>
OT,Bs%'tNbeGfQi3._,+s*t~>
OoGKt(nZBZdf0=jhgth)s*t~>
OoGKt(nZBZdf0=jhgth)s*t~>
OoGKt(nZBZdf0=jhgth)s*t~>
P5bTq'XrYndJj5lLOoL&s*t~>
P5bTq'XrYndJj5lLOoL&s*t~>
P5bTq'XrYndJj5lLOoL&s*t~>
PQ(]r'XrYnd/O-e."VEqs*t~>
PQ(]r'XrYnd/O-e."VEqs*t~>
PQ(]r'XrYnd/O-e."VEqs*t~>
PlCfs'XNAjcMmnff7Eu"s*t~>
PlCfs'XNAjcMmnff7Eu"s*t~>
PlCfs'XNAjcMmnff7Eu"s*t~>
Q2^ot'XNAjc2RrlH+SGd+G'Oms*t~>
Q2^ot'XNAjc2RrlH+SGd+G'Oms*t~>
Q2^ot'XNAjc2RrlH+SGd+G'Oms*t~>
Rf<S@$3:E3'XNAjci4:B]6l751j$(mJc>`MJ,~>
Rf<S@$3:E3'XNAjci4:B]6l751j$(mJc>`MJ,~>
Rf<S@$3:E3'XNAjci4:B]6l751j$(mJc>`MJ,~>
S,W\>"uAY+!`FULcMn%f1j$&FfDbdMpOW?p~>
S,W\>"uAY+!`FULcMn%f1j$&FfDbdMpOW?p~>
S,W\>"uAY+!`FULcMn%f1j$&FfDbdMpOW?p~>
S,WKr1]BcC2[4j5b5_Kd"TQ5E*;>'bJ,~>
S,WKr1]BcC2[4j5b5_Kd"TQ5E*;>'bJ,~>
S,WKr1]BcC2[4j5b5_Kd"TQ5E*;>'bJ,~>
S,WHkr'UMbJcEmm"fi1W/;N8:s*t~>
S,WHkr'UMbJcEmm"fi1W/;N8:s*t~>
S,WHkr'UMbJcEmm"fi1W/;N8:s*t~>
S,WKt1]BcC2$SX3c2S">T0O5&S,7d:s8RT~>
S,WKt1]BcC2$SX3c2S">T0O5&S,7d:s8RT~>
S,WKt1]BcC2$SX3c2S">T0O5&S,7d:s8RT~>
S,W[[#r=t,#'5@qcMn:L*(["!G^08_Y?3'&s*t~>
S,W[[#r=t,#'5@qcMn:L*(["!G^08_Y?3'&s*t~>
S,W[[#r=t,#'5@qcMn:L*(["!G^08_Y?3'&s*t~>
SGrf>'KZ^)#B#+mbl7\?rr32:(0h81PN.;qJ,~>
SGrf>'KZ^)#B#+mbl7\?rr32:(0h81PN.;qJ,~>
SGrf>'KZ^)#B#+mbl7\?rr32:(0h81PN.;qJ,~>
Sc8c;(oMrb`r?8;X'?JIE9DfP!<7Q~>
Sc8c;(oMrb`r?8;X'?JIE9DfP!<7Q~>
Sc8c;(oMrb`r?8;X'?JIE9DfP!<7Q~>
T)Sl@'Us[R`W$)Y302sAG_,nps*t~>
T)Sl@'Us[R`W$)Y302sAG_,nps*t~>
T)Sl@'Us[R`W$)Y302sAG_,nps*t~>
TDnuQ+Idr^_#FJV*;b<e!<7Q~>
TDnuQ+Idr^_#FJV*;b<e!<7Q~>
TDnuQ+Idr^_#FJV*;b<e!<7Q~>
T`5)R,b'Ab^Ae3^^OcCbs*t~>
T`5)R,b'Ab^Ae3^^OcCbs*t~>
T`5)R,b'Ab^Ae3^^OcCbs*t~>
U&P2G.$K5^^&J+_BS$0`s*t~>
U&P2G.$K5^^&J+_BS$0`s*t~>
U&P2G.$K5^^&J+_BS$0`s*t~>
UAk;@'SCu:]`/&b*;b<eJ,~>
UAk;@'SCu:]`/&b*;b<eJ,~>
UAk;@'SCu:]`/&b*;b<eJ,~>
U]1DQ*/B+F])MdZ^OcE8~>
U]1DQ*/B+F])MdZ^OcE8~>
U]1DQ*/B+F])MdZ^OcE8~>
V#LMR+FJb?\c2\[BS$26~>
V#LMR+FJb?\c2\[BS$26~>
V#LMR+FJb?\c2\[BS$26~>
V>gVS+FetB\GlW^*;b?fJ,~>
V>gVS+FetB\GlW^*;b?fJ,~>
V>gVS+FetB\GlW^*;b?fJ,~>
VZ-_T+E2o3[f6@V[t=X1~>
VZ-_T+E2o3[f6@V[t=X1~>
VZ-_T+E2o3[f6@V[t=X1~>
VuHkf-uAd3s0hq.Ipdm.J,~>
VuHkf-uAd3s0hq.Ipdm.J,~>
VuHkf-uAd3s0hq.Ipdm.J,~>
W;cqf1j"<K[/U3Z&GLhWJ,~>
W;cqf1j"<K[/U3Z&GLhWJ,~>
W;cqf1j"<K[/U3Z&GLhWJ,~>
WW*(h1hcc;s0M_+0Xl]7J,~>
WW*(h1hcc;s0M_+0Xl]7J,~>
WW*(h1hcc;s0M_+0Xl]7J,~>
WrE.h3,!mCZ2Xi_BS6>8~>
WrE.h3,!mCZ2Xi_BS6>8~>
WrE.h3,!mCZ2Xi_BS6>8~>
X8`:j1gp33s0;S*f+@P,s*t~>
X8`:j1gp33s0;S*f+@P,s*t~>
X8`:j1gp33s0;S*f+@P,s*t~>
XT&Co6t#nCs0)G'1p;T4J,~>
XT&Co6t#nCs0)G'1p;T4J,~>
XT&Co6t#nCs0)G'1p;T4J,~>
ZMsqJZi9t,o0?FTJcDnQ!KUcEs*t~>
ZMsqJZi9t,o0?FTJcDnQ!KUcEs*t~>
ZMsqJZi9t,o0?FTJcDnQ!KUcEs*t~>
ZMt0A&@;E29MG23s/l;&h[o71s*t~>
ZMt0A&@;E29MG23s/l;&h[o71s*t~>
ZMt0A&@;E29MG23s/l;&h[o71s*t~>
[/UCSZi@WKYXhajJcDeN!B?j.s*t~>
[/UCSZi@WKYXhajJcDeN!B?j.s*t~>
[/UCSZi@WKYXhajJcDeN!B?j.s*t~>
[/UBC&@;DK"Yf\%s/Q)"Md1u9J,~>
[/UBC&@;DK"Yf\%s/Q)"Md1u9J,~>
[/UBC&@;DK"Yf\%s/Q)"Md1u9J,~>
Zi:6A&?SVQ&$pieWrE.`&Gq4^J,~>
Zi:6A&?SVQ&$pieWrE.`&Gq4^J,~>
Zi:6A&?SVQ&$pieWrE.`&Gq4^J,~>
ZMt-:"YfDW&@6rfWrE)ZZ\JL1~>
ZMt-:"YfDW&@6rfWrE)ZZ\JL1~>
ZMt-:"YfDW&@6rfWrE)ZZ\JL1~>
ZMt,*.1`cb]-)\)WrE*h</1F'~>
ZMt,*.1`cb]-)\)WrE*h</1F'~>
ZMt,*.1`cb]-)\)WrE*h</1F'~>
Zi:2.4R9TjZ[r.TrrV'hpP8d!~>
Zi:2.4R9TjZ[r.TrrV'hpP8d!~>
Zi:2.4R9TjZ[r.TrrV'hpP8d!~>
[/U>40^o&A]-)\)VuHc_X,$_*~>
[/U>40^o&A]-)\)VuHc_X,$_*~>
[/U>40^o&A]-)\)VuHc_X,$_*~>
[Jp;=0^F;iUAk7\8;I4q~>
[Jp;=0^F;iUAk7\8;I4q~>
[Jp;=0^F;iUAk7\8;I4q~>
[f6DB0^F;iU&P2W%.B#PJ,~>
[f6DB0^F;iU&P2W%.B#PJ,~>
[f6DB0^F;iU&P2W%.B#PJ,~>
\,QMC0^F;iTDnp[YDE4/~>
\,QMC0^F;iTDnp[YDE4/~>
\,QMC0^F;iTDnp[YDE4/~>
\GlVL/F.leT)Sh\@#4i5~>
\GlVL/F.leT)Sh\@#4i5~>
\GlVL/F.leT)Sh\@#4i5~>
\c2_E.,TUUSc8cS&FYJUJ,~>
\c2_E.,TUUSc8cS&FYJUJ,~>
\c2_E.,TUUSc8cS&FYJUJ,~>
])Mh].,0=QS,WLSVhtG(~>
])Mh].,0=QS,WLSVhtG(~>
])Mh].,0=QS,WLSVhtG(~>
]Dhqb+QJ%QRf<D\=Gd'.~>
]Dhqb+QJ%QRf<D\=Gd'.~>
]Dhqb+QJ%QRf<D\=Gd'.~>
]`/%c*8c>IRK!?O)#K3jJ,~>
]`/%c*8c>IRK!?O)#K3jJ,~>
]`/%c*8c>IRK!?O)#K3jJ,~>
^&J.l&D)L5Qi@(_UPf)%~>
^&J.l&D)L5Qi@(_UPf)%~>
^&J.l&D)L5Qi@(_UPf)%~>
^Ae7i'\@p9QN$uX</U^+~>
^Ae7i'\@p9QN$uX</U^+~>
^Ae7i'\@p9QN$uX</U^+~>
^]+A%'\@p9Q2^pW'_dOcJ,~>
^]+A%'\@p9Q2^pW'_dOcJ,~>
^]+A%'\@p9Q2^pW'_dOcJ,~>
_#FJ**63X1PQ(YSUPo/&~>
_#FJ**63X1PQ(YSUPo/&~>
_#FJ**63X1PQ(YSUPo/&~>
_>aS#'\@p9P5bQ\8;mLu~>
_>aS#'\@p9P5bQ\8;mLu~>
_>aS#'\@p9P5bQ\8;mLu~>
_Z'\0'[)(-OoGLK'_@:`J,~>
_Z'\0'[)(-OoGLK'_@:`J,~>
_Z'\0'[)(-OoGLK'_@:`J,~>
_uBeA'[)(-O8f5[TCr6^!!3Hl]:f1S~>
_uBeA'[)(-O8f5[TCr6^!!3Hl]:f1S~>
_uBeA'[)(-O8f5[TCr6^!!3Hl]:f1S~>
`;]n6'ZYe)NrK-T8G3#Y!!'g.s*t~>
`;]n6'ZYe)NrK-T8G3#Y!!'g.s*t~>
`;]n6'ZYe)NrK-T8G3#Y!!'g.s*t~>
b5V_ED@cmgG7_ZCs,I$]GQ7^ONVNPR!<3!#pM0aoU&TW~>
b5V_ED@cmgG7_ZCs,I$]GQ7^ONVNPR!<3!#pM0aoU&TW~>
b5V_ED@cmgG7_ZCs,I$]GQ7^ONVNPR!<3!#pM0aoU&TW~>
b5VZ`#r=t,#'b_!NW0$D!WE'""JbemrrE#t!qu["U&TW~>
b5VZ`#r=t,#'b_!NW0$D!WE'""JbemrrE#t!qu["U&TW~>
b5VZ`#r=t,#'b_!NW0$D!WE'""JbemrrE#t!qu["U&TW~>
b5VJR1]BcC3%0@XNW/toqu?^8q>^HprVlrr!#D:.J,~>
b5VJR1]BcC3%0@XNW/toqu?^8q>^HprVlrr!#D:.J,~>
b5VJR1]BcC3%0@XNW/toqu?^8q>^HprVlrr!#D:.J,~>
b5VGFrBpWPJH1E)!!W2urrE&u"8-@.I%gRj~>
b5VGFrBpWPJH1E)!!W2urrE&u"8-@.I%gRj~>
b5VGFrBpWPJH1E)!!W2urrE&u"8-@.I%gRj~>
fDc'"Khb3d]`.g.!?a2t6ihEYJcC`0!@n9O!!*i^q>^9k!GVM+s*t~>
fDc'"Khb3d]`.g.!?a2t6ihEYJcC`0!@n9O!!*i^q>^9k!GVM+s*t~>
fDc'"Khb3d]`.g.!?a2t6ihEYJcC`0!@n9O!!*i^q>^9k!GVM+s*t~>
f`(r,qa:HleboFOYnT5kFW[Z8s,I$_ZPFJ[1)d4hs7u]r35VBhJ,~>
f`(r,qa:HleboFOYnT5kFW[Z8s,I$_ZPFJ[1)d4hs7u]r35VBhJ,~>
f`(r,qa:HleboFOYnT5kFW[Z8s,I$_ZPFJ[1)d4hs7u]r35VBhJ,~>
g&DDD6r^Pgs6Gn;:?29P"LBoj.'%q!MuNpd1^GM1q#C?orr3,sSe1t7UAo`~>
g&DDD6r^Pgs6Gn;:?29P"LBoj.'%q!MuNpd1^GM1q#C?orr3,sSe1t7UAo`~>
g&DDD6r^Pgs6Gn;:?29P"LBoj.'%q!MuNpd1^GM1q#C?orr3,sSe1t7UAo`~>
gA_946ql_?rrS-IKn98Ts7?9j!;uiu\H"@Ys*t~>
gA_946ql_?rrS-IKn98Ts7?9j!;uiu\H"@Ys*t~>
gA_946ql_?rrS-IKn98Ts7?9j!;uiu\H"@Ys*t~>
gA_5>7%jGW!pY0+JcC<$oDegjqu6Zs"eu$I~>
gA_5>7%jGW!pY0+JcC<$oDegjqu6Zs"eu$I~>
gA_5>7%jGW!pY0+JcC<$oDegjqu6Zs"eu$I~>
gA_4f7+HkgJcG$8rrDus!nRD_UAo`~>
gA_4f7+HkgJcG$8rrDus!nRD_UAo`~>
gA_4f7+HkgJcG$8rrDus!nRD_UAo`~>
gA_4G7/hc;JcG$8rrE#t"5?!>@\WmQ~>
gA_4G7/hc;JcG$8rrE#t"5?!>@\WmQ~>
gA_4G7/hc;JcG$8rrE#t"5?!>@\WmQ~>
gAh1@JcC<$l2UPZ!>47as*t~>
gAh1@JcC<$l2UPZ!>47as*t~>
gAh1@JcC<$l2UPZ!>47as*t~>
gA_4I7/VW9JcG$8qu?g$)IhNrs*t~>
gA_4I7/VW9JcG$8qu?g$)IhNrs*t~>
gA_4I7/VW9JcG$8qu?g$)IhNrs*t~>
gA_4o7+_>9!rg%'JcC<$MZ82~>
gA_4o7+_>9!rg%'JcC<$MZ82~>
gA_4o7+_>9!rg%'JcC<$MZ82~>
gA_5H7&'SY!mO,?JcC<$MZ82~>
gA_5H7&'SY!mO,?JcC<$MZ82~>
gA_5H7&'SY!mO,?JcC<$MZ82~>
gA_976r3%Frr`187&>J7JcCW-J,~>
gA_976r3%Frr`187&>J7JcCW-J,~>
gA_976r3%Frr`187&>J7JcCW-J,~>
g&DD96rphps4DB\>5!OIJcCW-J,~>
g&DD96rphps4DB\>5!OIJcCW-J,~>
g&DD96rphps4DB\>5!OIJcCW-J,~>
g&D*HEVi-)?/pM9JcCT,J,~>
g&D*HEVi-)?/pM9JcCT,J,~>
g&D*HEVi-)?/pM9JcCT,J,~>
f`)3UY]EH/E39"gs+13+s*t~>
f`)3UY]EH/E39"gs+13+s*t~>
f`)3UY]EH/E39"gs+13+s*t~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
JcC<$JcF@%J,~>
%%EndData
showpage
%%Trailer
end
%%EOF

%%EndDocument
 @endspecial -246 1753 a Fe(Exercice)36 b(3)f(:)p -246
1768 V -246 1866 a Fc(Soien)m(t)41 b Fd(A)f Fc(et)h Fd(B)k
Fc(deux)39 b(p)s(oin)m(ts)h(distincts)g(du)f(plan)h(et)h(soit)g
Fd(I)47 b Fc(le)40 b(milieu)h(de)e([)p Fd(AB)5 b Fc(].)41
b(Dans)f(c)m(hacun)g(des)g(cas)h(suiv)-5 b(an)m(ts,)-246
1979 y(compl)m(\023)-43 b(eter)33 b(par)d(le)h(nom)m(bre)f(r)m(\023)-43
b(eel)32 b Fd(k)h Fc(qui)d(con)m(vien)m(t)i(:)735 2110
y Fb(\000)-47 b(!)735 2173 y Fd(AI)33 b Fc(=)25 b Fd(::::::::::)1254
2110 y Fb(\000)-45 b(\000)f(!)1254 2173 y Fd(AB)66 b
Fc(;)1558 2110 y Fb(\000)-47 b(!)1558 2173 y Fd(AI)32
b Fc(=)25 b Fd(::::::::::)2077 2110 y Fb(\000)-41 b(!)2077
2173 y Fd(I)7 b(B)65 b Fc(;)2359 2110 y Fb(\000)-41 b(!)2359
2173 y Fd(B)5 b(I)32 b Fc(=)25 b Fd(::::::::::)2884 2110
y Fb(\000)-46 b(\000)h(!)2884 2173 y Fd(AB)-246 2489
y Fe(Exercice)36 b(4)f(:)p -246 2504 V -246 2602 a Fc(Soit)c
Fd(AB)5 b(C)37 b Fc(un)29 b(triangle.)j(Placer)f(les)g(p)s(oin)m(ts)f
Fd(E)5 b Fc(,)31 b Fd(F)13 b Fc(,)31 b Fd(G)f Fc(et)i
Fd(H)37 b Fc(tels)31 b(que)f(:)138 2734 y Fb(\000)-21
b(!)138 2796 y Fd(AE)31 b Fc(=)400 2734 y Fb(\000)-46
b(\000)h(!)400 2796 y Fd(AB)25 b Fc(+)20 b(2)698 2734
y Fb(\000)-22 b(!)698 2796 y Fd(AC)67 b Fc(;)1000 2734
y Fb(\000)-23 b(!)1000 2796 y Fd(AF)38 b Fc(=)25 b Fb(\000)p
Fc(2)1376 2734 y Fb(\000)-45 b(\000)f(!)1376 2796 y Fd(AB)25
b Fc(+)1629 2734 y Fb(\000)-22 b(!)1629 2796 y Fd(AC)67
b Fc(;)1930 2734 y Fb(\000)-22 b(!)1930 2796 y Fd(AG)26
b Fc(=)f(2)2236 2734 y Fb(\000)-45 b(\000)f(!)2236 2796
y Fd(AB)25 b Fc(+)20 b(3)2534 2734 y Fb(\000)-21 b(!)2534
2796 y Fd(AC)68 b Fc(;)2836 2734 y Fb(\000)-41 b(\000)g(!)2836
2796 y Fd(AH)32 b Fc(=)25 b Fb(\000)p Fc(3)3224 2734
y Fb(\000)-45 b(\000)f(!)3224 2796 y Fd(AB)26 b Fc(+)3477
2734 y Fb(\000)-43 b(\000)e(!)3477 2796 y Fd(B)5 b(C)-246
3112 y Fe(Exercice)36 b(5)f(:)p -246 3127 V -246 3225
a Fc(Soit)c Fd(AB)5 b(C)i(D)32 b Fc(un)e(parall)m(\023)-43
b(elogramme.)33 b(Soien)m(t)f Fd(I)37 b Fc(et)31 b Fd(J)40
b Fc(les)30 b(milieux)h(resp)s(ectifs)f(des)g(c^)-45
b(ot)m(\023)i(es)33 b([)p Fd(AB)5 b Fc(])31 b(et)g([)p
Fd(C)7 b(D)s Fc(].)p 0 TeXcolorgray -135 3377 a(1.)p
0 TeXcolorgray 47 w(D)m(\023)-43 b(emon)m(trer)32 b(que)607
3315 y Fb(\000)-34 b(!)607 3377 y Fd(AJ)35 b Fc(=)856
3315 y Fb(\000)-44 b(!)856 3377 y Fd(I)7 b(C)f Fc(.)31
b(Que)f(p)s(eut-on)g(en)g(d)m(\023)-43 b(eduire)30 b(p)s(our)f(\()p
Fd(AJ)9 b Fc(\))32 b(et)f(\()p Fd(I)7 b(C)g Fc(\))15
b(?)p 0 TeXcolorgray -135 3515 a(2.)p 0 TeXcolorgray
47 w(D)m(\023)-43 b(emon)m(trer)32 b(que)e(les)h(droites)g(\()p
Fd(D)s(I)7 b Fc(\))31 b(et)g(\()p Fd(J)9 b(B)c Fc(\))30
b(son)m(t)h(parall)m(\022)-43 b(eles.)-246 3785 y Fe(Exercice)36
b(6)f(:)p -246 3800 V -246 3898 a Fc(Soit)c Fd(AB)5 b(C)37
b Fc(un)29 b(triangle.)j(Soien)m(t)f Fd(I)7 b Fc(,)31
b Fd(J)39 b Fc(et)31 b Fd(K)37 b Fc(les)31 b(milieux)g(resp)s(ectifs)f
(des)g(c^)-45 b(ot)m(\023)i(es)33 b([)p Fd(AB)5 b Fc(],)31
b([)p Fd(AC)7 b Fc(])30 b(et)h([)p Fd(B)5 b(C)i Fc(].)-246
4024 y(D)m(\023)-43 b(eterminer)32 b(le)f(r)m(\023)-43
b(eel)32 b Fd(k)i Fc(tel)d(que)882 3962 y Fb(\000)-44
b(\000)g(!)882 4024 y Fd(B)5 b(C)32 b Fc(=)25 b Fd(k)1199
3962 y Fb(\000)-56 b(!)1199 4024 y Fd(I)7 b(J)i Fc(.)-246
4250 y Fe(Exercice)36 b(7)f(:)p -246 4265 V -246 4372
a Fc(Soit)c([)p Fd(AB)5 b Fc(])31 b(un)e(segmen)m(t)j(de)e(longueur)g
(8)g(cm.)h(On)f(c)m(herc)m(he)h(\022)-45 b(a)31 b(construire)f(un)g(p)s
(oin)m(t)g Fd(M)40 b Fc(tel)32 b(que)3163 4310 y Fb(\000)-33
b(\000)f(!)3163 4372 y Fd(M)10 b(A)20 b Fc(+)g(3)3485
4310 y Fb(\000)-30 b(\000)f(!)3485 4372 y Fd(M)10 b(B)31
b Fc(=)3779 4314 y Fb(\000)-71 b(!)3801 4372 y Fc(0)p
0 TeXcolorgray -135 4510 a(1.)p 0 TeXcolorgray 47 w(D)m(\023)-43
b(emon)m(trer,)32 b(en)e(utilisan)m(t)i(la)f(relation)h(de)e(Chasles,)g
(que)g(l')m(\023)-43 b(egalit)m(\023)g(e)36 b(ci-dessus)30
b(s')m(\023)-43 b(ecrit)33 b(aussi)d(:)1633 4704 y(4)1678
4642 y Fb(\000)-33 b(\000)g(!)1678 4704 y Fd(M)10 b(A)21
b Fc(+)f(3)2001 4642 y Fb(\000)-45 b(\000)f(!)2001 4704
y Fd(AB)30 b Fc(=)2264 4646 y Fb(\000)-71 b(!)2287 4704
y Fc(0)p 0 TeXcolorgray -135 4902 a(2.)p 0 TeXcolorgray
47 w(En)29 b(d)m(\023)-43 b(eduire)31 b(l'expression)f(de)1058
4840 y Fb(\000)-34 b(\000)h(!)1058 4902 y Fd(AM)40 b
Fc(en)30 b(fonction)h(de)1848 4840 y Fb(\000)-46 b(\000)g(!)1848
4902 y Fd(AB)35 b Fc(et)c(construire)f(le)h(p)s(oin)m(t)f
Fd(M)10 b Fc(.)-246 5266 y Fe(Exercice)36 b(8)f(:)p -246
5281 V -246 5379 a Fc(Soit)29 b Fd(AB)5 b(C)34 b Fc(un)27
b(triangle.)j(Soien)m(t)f Fd(I)35 b Fc(le)29 b(milieu)f(de)g([)p
Fd(B)5 b(C)i Fc(])27 b(et)i Fd(G)g Fc(le)f(cen)m(tre)i(de)d(gra)m(vit)m
(\023)-43 b(e)32 b(du)27 b(triangle)i Fd(AB)5 b(C)i Fc(.)27
b(Compl)m(\023)-43 b(eter)30 b(par)-246 5492 y(le)h(nom)m(bre)f(r)m
(\023)-43 b(eel)32 b(qui)e(con)m(vien)m(t)i(:)p 0 TeXcolorgray
-246 5639 a Fb(\005)p 0 TeXcolorgray -155 5577 a(\000)-22
b(!)-155 5639 y Fd(AG)26 b Fc(=)f Fd(::::::::::)389 5577
y Fb(\000)-47 b(!)389 5639 y Fd(AI)22 b Fc(;)p 0 TeXcolorgray
-246 5843 a Fb(\005)p 0 TeXcolorgray -155 5780 a(\000)-43
b(!)-155 5843 y Fd(GI)33 b Fc(=)25 b Fd(::::::::::)368
5780 y Fb(\000)-47 b(!)368 5843 y Fd(AI)22 b Fc(;)p 0
TeXcolorgray -246 6046 a Fb(\005)p 0 TeXcolorgray -155
5984 a(\000)-22 b(!)-155 6046 y Fd(GA)26 b Fc(=)f Fd(::::::::::)389
5984 y Fb(\000)-43 b(!)389 6046 y Fd(GI)8 b Fc(.)p 0
TeXcolorgray 1858 6547 a(1)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
