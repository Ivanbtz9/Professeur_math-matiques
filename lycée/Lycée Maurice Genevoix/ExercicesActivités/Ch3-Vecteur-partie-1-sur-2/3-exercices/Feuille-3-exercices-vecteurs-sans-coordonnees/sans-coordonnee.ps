%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: sans-coordonnee.dvi
%%CreationDate: Fri Aug 20 15:27:05 2021
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMR12 CMSY10 CMBX10 CMR10 CMMI10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips.exe -o sans-coordonnee.ps sans-coordonnee.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.08.20:1727
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 87 /W put
dup 88 /X put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A90B8A9EE5C613CDB822F07B
115D4C174FB7945535F2F9C2875C9675143B8D98DEFD3898170FBCB19B4C29CE
1E6883E0F68B5D42751BD7AD09E3EB745F0A6338BA2148B769B5E1EB21109414
C1615EC1A1FEAD5831938F74E26E1F6BF51136E5C76F823D29D35078412923DB
B3A32176ED7935058ED16528D28E50E37BBEB1D1554503645DD6809FA22A0DC3
112E7888A499450162B7373CC8855953B351E8873A4D7DCC40EEEE5A8A2D00E0
EDD8CFE7153824BF94833ABE10FA64768E457D5395519937705DAD2FFC5E71D4
521F01213B7DF82426867DE914CC9866E428F614F18078B4367187426E2260AA
AD0175A79B48B8BBE6ABFD0E909E5601E701D78D211263049A91EE4FB49AADC9
A3C4E6BE9637FC8B535B6157DADDFA3BC2951A610E099A3D85D3D8D3DFD03392
F7FF36B816EE1BC25FE35915834FBB4A3C3B1EF33D51B6752AA6D282F8061F9A
0B842296FCBADED7165FD0621FD2C718F3FDFCF57B30BA74D8CF42488A287251
7D783572980C07B465AE3618CF9C02A3100216C87D7FAFA32EA34BCAC26FFC2A
1A1DB52B95F0977F4428A76ECA3C7160BD8C2FA37E02845F9BE07CE866751196
0CC4D0D23FC6056F200C8DD972D3C64F518E11CABE1D8BEAEC72A62172238A07
06666FB502110976E47FC6D9331A5762A78540999F0984C0514F52DB1C581340
51B224646DD0DD47B4924748AB2D93BFCAF6D3DADAA08F237FCB8C7F82CD42AB
861637E3AAA45911CCFB149826E4ACF9114A3642CCF56C5405F55437474164A4
FD9B42DBD7CF019CE194B3E7C7C827E99812AFCD9792BBC0BF311791BB1568DE
B9F7871F74DE712B36917DF994271B1F39BB970F089C5A74B913A1B3C4A63571
4BE361D79379FEC1EB85632E962A8F0B2F443754211FEEE315A84F1B494D2CFF
6288083DF4868DE1991A876235FE7FE5C97D7BB146A2350998C77727B6266BCD
4CEE6AA8B300C07B741E4B9448225579ED72B85F9526DBED6A733C1C0C56C619
963A4573A83454A2EC2F99AFF3BF1EC0CA0048EC07082937C741EF5BDAA12E9A
9AA87FCF1EFD17DE85D61AE4FEA67F7D0D8BE796AF936BEAC3CF25C546BC9EB6
BEF6225CFEE953D0E3C491BC98D73B9DB6F80AF6DB142F9D944935070214510F
1195DCBCCA7D7D1A4AA05CCB86EAE764D555F298F171D38511CE60818CEE1217
91CBFD601FC0940FC4D81E8EFFF2543A1D7A2066F3887B5050CC2E7DCF8B8B0C
34876DB2BE1FC0E3FF394FBBAC14B323B462544834CEAC614E7CEFC69949F8C6
18DFFC091492A06B37A629917824491E837E1BB37B18ECA9CA06AD95CB57848C
E3ACE83824FE75B79A144A8D4F564361D0AC7CDF729AC39244AC1D5FB8AEBC64
81112A3805B009742B35CC30831C36FD523D9C10B2F0C00CD81490992BA20DC1
EC8CCFCCF3DBE86B5052428943458A063490CA921B65D4DC9A5BB3C10BFF9A61
5E78E3C33AB0A61078C6D3EA89CDF5AF5819440932B77A856D0238651C7AECA1
C37A8AA695B51CA9739E56AFC03C5FBEECC8EDD94ECD2478E2244E66FB646AE0
9B1EF6310997BB3C031F322DF83C78F7018D0B640E0B1C4D2BA23953C68AF4DF
53274C18C4CD499B20534D891C135962F89FD97E8E39D5892CC77E34A68EED10
E36BA7FBAC4C4DE22538D06FEC17683FCFAC073E6D2F864103F5BD22A0F52C55
9E957C08CF33E6148FE4A1E02CD855744679AE4FCBCD2D3C04749DDF7A30004D
89420AC7EB120FD1D21C2694C62FD6A481D88F96C4B32B756905773A555DA179
56ED4CA626F2CFD1B4ADE84B508806256297F2EDAA11899775971D513F9E6853
94DA33B3082974C1196A24B8E92613B4BCD979EA3F28277B3798AF166FCE652B
F56D0E7D08C01FD45F75B185217969E5226464941A8E99FA7953A3CFD7E0C948
B9299C4AE53CB4AA31B2BE6DED242A1AC051BA2E7074B7A40F33BD9BCC8C5BD1
9C615E5C4F8DBB48D6C630791E18142A8380E74F8D4D4F15C914889A950DE144
F904448612070143CAA18AE930A4B5E0A4460282545907FA8E84A1509E90DD78
731ED3F21327C9B3BBA2E8FC7CB1411B670E306CEF7508D7918BA0475EAA5C7A
644B135CA366FF6E99B090608BA87A42E848B9EF592AF5472C7608023AB8C788
379A7AD78F2DC5F1422C0B4869AB27DE936D3E9E5A906678272BE94EEBD2384E
393B1522D59242F2B429ECD48C761DB4E1B0E6D409F06677C0141FAE9C4D0411
8C1351834793A6D1A2520607258AED2C863A4F84193E46B10DDD3A5C6B17A978
2E6898A47763551F4BB6501EE5B815B7BC008C9AE4513D9ED95F76FC2CF184B3
6CFE8BDC0FA3D42C026A4F2237B275A1E5F9976CB3B2ED61CF3704C73475845E
7C1CF02A11D7F576F6B83B5C88A0115A3D8525DC558D54219531226E6766ADA0
1CCB8F50A336A0D1130929B8D898664D5357CEF30E690E5D09D89FC18C4F768E
5985DC270BA3642680CFB3710A03F45744487D26DA3B2509557513758F5FE821
897498357D53875BF9A64D0C4EF5945E73695F808ED22A52B22DFB0D934A8F1C
C529E8F7588685D9FCE50B2BAEDD02AA72981207973B35CA99FBE0D4F7542C64
FAECF367E66A654E3EC2E2BC754D0C4BED5ACBA7541D5BDC1802629156FEC597
FF9B325B4FB8B3F1D3E9ECFB8D4ED25774BCFBFFAACA3E0D7078F67471B70FB7
FD6BC262D8D36BABDAE24DEF43D38F60701BF01AD1F2850A863EC724C32F8458
D1BAE8E96C8885D0FEE568F8935EB9AF1BA174525B0082C30B9B832E1E6708FB
AB0E627EDF9A8B99A90B43CB8C15472AD054CB09C5CCB8407A91D4A57B1ACE5C
DC560B56BBAB3831526E9112801D4C6538FD67D86360D20F0231C8D2BE104A03
3EFE4780F5A4FF320546230FDEBAF7BFAC7966B37FD73E54E433F30C784856F4
2F23C871AB66D1EB1CB35852BC9D6FB2572CB07A05E400ACC99C9F905D0EC78C
322A4B6EF1BA988ECE0442B8DBD4E1686EEB2CEF5B511A03AAB321977069DF04
EFDE753B88B4A191A6185D715B0086713929ABA6CED6A144FE37D641DE1D8D3E
091CAECD90E713C4CB91B350E7F98AEB17AEA06BFFAA2C65BAFE5F64B1516E59
EF19D378D7436BA060B07D484535707020F5481D75A3952D4423DA71E0B0DDBF
A3944A78B12648B74B51121C06CF0106A34098178EDA06030E49F8933161978E
4BD15F7E4A8C9363B7CFE76D24CBCD7F36FB5AC1188D2D88B35845F6114B1B73
2B009D3474021D3C4A575047690855082A028D3D57E04D9A25C9D21152A123FE
4DEB3C34EDFF50984F55BC690E9714C83B3BA254CE0D1F7E576327CE3A01F9A5
2BEE7006163F27C1F500EEC09E7DD3ADB66D201D7F75FC414173E82F8EFAE353
389A4ABB9DB6D31C9F20B42368EF47DF7280998EFDEC92D4F6E30902AFA086A7
18F98E9236EB93F344220A810D4677572567BA11BD220CF983F1C785167ECF4A
18F161FD780C3CD0C20E7527D40FE85C3E565BB72C43E73F76B8DA4E38342FD1
E0E40EFB086EA6F0808357F8E706AFCB0ACAA77F8606A1F544718E67EC585B3A
6CDB35AA198C398D892F7C15CC9B34273933E0205A93CDDF8A25C4378CEFFF0E
703185B276ACE28FE30D24DEC1F692FF89DD63F2769603CF01B6123F25D2E597
8DDCB243844B2288EA4FC80E805CA3B8C158A553B535942F7E8720E55673C853
A3917E346216ACEB3EBEFF0961B02E99B5A7C47628AE1C88AA2A05E962AD105B
0CBE4E8254933C91475CC6D2E8AEE648AF7A138691AB53C09CBE4336DCE8872D
A971809CB98402A8249A8BA925FDF36D9BE490CA5EDF8C3D4F3B7B7D5DC53C97
B2EC9DA1B19D5F104BB2A417379047A3FF73284B12DF0C470D3E3C29A67350C8
535DAE2030CFD0A3724DB0878BF34B6DE3DFF8CB30BDB65F9246B3CFBF7014DA
CC19A294CCE40C4EE5E82726B9098C2F28786DF118624631CC9914D0EFBE070E
688E01A2F9337FD1F9EDED4D7D80340C4F3C711FD1493BBDF4468BF8EACE6C9E
1D652F44A48D283A1775CD2984DA8E5ABA41DE94CC92C96356667980CD888B5A
D63538A91E44806285BCB220F1FFABABE79C7D9D9BB4D9E932DCD5EBFD06FEA4
D1081C2063CBA71401A37BA82DCB067F32B2F14F41FBD3E75163B78BA5697D34
E85BA8EBEF48D0B28C5FD84555DCDA3200016C80006AC40869A5A719344E00D0
D5F8EAFE382E35E4FCC118D461C314AEFC894BC6E7A50578876B59BA7107F809
97AB7B50E549438B937E95626D3728F377B5F86B0B20F46982FF1F7DB97A7694
1381120D18CBB12E2C752DD0169BC5BA1E3EB84B7CC14A253F69EA14ED35AB67
868C0797A73C4C43E1A165019B18A5A5DA8E3867A12ADD2FF612C2F2ABDDC8AE
D02EB223C2261BD8EEA5EA26DF90B544892EB6B0871D59CD06BDE19EB612AE08
0C0CDB0B9B59600393152930A3F3C0B1EBF2C3C17C989743C608D05A8A26BB23
2BD1FFA31AD2E7240EAFE9516ACFF59847F6E61093F3FBD296A5CF53C7DFB1D1
E9B9F06F91D1DD3EA9793BB912A8F8354367E66839FAE68B633157B7FB13DF53
9A4921D4A986C53835BC80C42564B0C3CF1E36EA53CA43A0D63B9BCE4E96FBF9
05C83EDACB04C4BEE3363D193C655BC73E11847A80DD13B6C9C8CF87848B54C6
ADF09CFE24E72493FD4158A799DBF6E2A49F77E6A43EC2D4CE61F80894361AFE
8A68637EE5AF2053325396953D9E6DA53471AC277E182ABB0F0F264444B02745
E9ADCD31EF5C0A4B881BED0EB3CF27FD62582E85F840071303F60DD2290D31EE
6B3607513F9C6B71939D9E487A7D1F28CE391B7130DC99A6265320FDC48EAFAC
F7E0045305A8D9EF1FF47BCC1DCB5F6C4E01C14611F0E6EDEEC07A10211C7DAF
01EE8557CB71041B0E72BEBE5C929A87B89D11B2CAD6CE5FAE6508FDF8FF9C49
3FD750A37334A6FF79CCDE7321F355ED1F7EA09A133413DB8ED51C68802E09D0
7A5B11D2EC2B6EAEBF85BF6DC66D48828C0185DA30F3E442E3B9703351DB681D
86B04A22CC81ACADD22629AA70BAA0DC97C51A3E5A7382728D1CAC983965DEC0
6A04B4FE78B743D063F8E5EF261444784C6CF61CCA430C6CCAA5C56341607767
652EC2AF8097E3888EF2B17E83D8EFBE98E06641AF6DF31EC60F47104B82BE82
924407DF826561E85B98E680033486A4A3277B87E651CAD8B05D348B936AC18E
CE4876BB0B72A1D4089F7021A5269C18AFF4FFD741087F5CEC7E164E02296B61
9AE771CB627398A20CB202EA42363D3B7FDCC2F4A8A71CE61D9A195FA383ACF9
5B8BBE889EFCEE65E1F196341348A56132A92648902252D5B39C2E0901D5126C
8C9C5BDD1CD7D00B08456CEA366B7B69A2F793E8C4823468479824460B58547D
520856C40E33032735CC75CC5144634DEA8E8E70CB1EA61C7C9DD6941AC5EB38
68CFCC743C0D4EA8162293C0C4A7AFCC4D4D91E2FF76E6D14B04D48EE28BA6F7
12577892507ADB108565E4E1E04DE0296A96B4F469A80A21079056BE4DBF6016
F8EE7DE885741A45919F5E87C458F87BE3A8912C3FDDBFB5B7948C554A7AFD6A
3F496716D272C8CC6DCEBC33B318DF582AD5EF5AF616AE9600CE6DBEB93CB36B
A108140F1CB56E67E5C76BA96B451FB21BE494E727D84EA1F8E532DF99551D22
55A5C735EDC975CEC4B22CFF349671A9AEB3DC6EA6B621DE981B220E900F81D4
9CB72AA19814056987A13551002070F2A598F31DC3C1FAAD574EE1F32A025D7E
CAFBFF35B911E8FBFA479CC61D093A5704313A7189F06A0AB209C0BEB17DCF2C
4307B1F2842A455FE42C9CCE55F8AA0721B6FB13044E96193E546FDAE51258A9
C235C9CD484568740E43FC9D138029356C924958A2CA2D2254CA68536B2D5B03
80527CBB23C5DFDAA0A9ABEF0CB0A4BA99B1762C344C5250C135CB72EB7505D3
78C60AD130B944E16C267512E5FCBC926B2BBE001B79CFF96F1808FB2825A5EB
2DDA3801975B40A8A82C991DB30C13E45DF57106173C12A4BF8B7109B7B92338
9589CC49B5065AAA8E9D97F5BE3A4FB6E017879CDBB4DD7923C5E806C676382C
BF863EE11FDF1FA10E62E117507EA86DEC2B9CCBA63AF49421A4438CC7EBAC31
E42E92D044642FE23733687BC3024D64E22FB014A34F47F0D149481A7EFAF4C1
474237C5579D03F52AE9586BD8E2324D907472CC8AD48E0C4A1D91C375E6855B
F9C9A0D378B7884D1CAEFEAD778F193441D49BAE7E1A0A5B4C842D3D9B3BD629
8750A205EA61AD9C70F2E83D954EC88935C841D16AA40D8CA0ABAA4F7A9CD721
6CBE5DA213874D730954D2D937F32459559192006BFBB16A08E01B5212C3F773
695B94103C2EE38A72628FA546C70386883D38846A14F65DAAFAD7A66DC9CAB2
5AF62336511E77B661C57CEE593AB2BA2E19DB21C050B87EE55B809916E0758F
019E175F722DF5FC150D0746EEDC532AB508E3E646595A9A41FA595F928C881B
CCA1DF512CF7D6054C10D7EB66E3696142FDDA112D27FCDC9EA6FF13468BFAE1
E843ABEF39B8367B7C71E2FDD96F4432E6D29398AA1ACF078A3174002D1AA14E
3767ED92BA8772FCE7607ABF13FE6DA444520818DB36237005E46AEF163F3C9C
8688A4A03318DDEC462AAA33B0D7DEC7C4C3940852CA61631EEB08FB1A35814D
78B997DA9D001B4C3EC35B8B89F133B5E810D6857A8CD944BDAE3B825C45AA7C
7451D78BDB66164DEC521BCFBED577BEC9CAF17272C2C81A8B4A547B52E00FAF
0567AF8197C11C0632B35CED964B71AB3D5007DC29C5F6550667A73BDD7D305A
1B15E554D396A619CA30A4E24656D4E410A06EB366EC563D6CECAC94840A724F
C8E64CEA449443D37654E8AA54C3388BC4D217390C3A247544D722243DFE5D1E
7D910AAE89E03B6EFE0CA0A8B7F7C376DA49CABDB2BFFD00E4C0BE4FB9E7F732
0EA384CCA1CE3CB63F9F630C5A7113DABDDBA6138FA9B7B3EA4819E19231CF66
2F69BC9FDE031C41DEBAB85EEE7CF9EEED854C46815FAD87FA131E76D1C9E481
0237FB2787F32C94C452045D9D2D23E8519202D572C89D320429B8E45515164D
6A0E702FA67BC73A4912EE0EA3FE3EE53CBEEA7AA0D451A5707703A26F793C7A
D8EE53BF9FF646762C97F109CCCE588DB025001C841A47F6215999A00A2CE422
88B76135E4BE6DC2833A06BB5E964EE955DCC5F186DC1FD3EEC9E6B481DA6474
E660AB26FD3D2854CBAB74EBDA1EB327282C6F771511933EA1A1F7B08D24CBB6
E7A880A23FC8957D04E04D5DB738DE142B77310560F32BAE5D3A8637D6F83DB5
03D585CDDA2A6D2155057CCCE24B5E0161A22C519CB6F2B2B190D3E08D98139C
84213353F98A86FDA036580901AC1D55B7192868BF91B5024A846F09EF1128D3
0E9F6C6649DC54A75FFFC778F7137A47CD7FB6AFFF9FABF737E42204D7034301
3573FBEE72B232F9E4A7DCB0C8134229D37FE82E65127DBDF4EF315E5D41CE51
397E1C470301D449AF716815C7B852D4BF50F0ED8764E4B846B37A68DE563C35
25EE055697874F1CB5F3B6A0A043F8D287683CE4DFD99C1A461923BA7ED9A732
CCB125ED9254BAFFC7D760670D2EED48AA74666491D3061FB3DB9E4379DEE155
D7FD55E941772DFB4F376903B4537CEB3A42A71A366CD935C01ED19CC679BA93
22B4E4390470845674B92F9DC5D8EA6A03F6DE673981FFD223854730BAE43CD6
91A23C1C4EECF0CC17C5D750583C542903E5D6BC8ACDE3DF6EF89A42142B7AEB
29A7A0233773EC1F66CAED6D6F0B3E59A0990EA058073C885E1C7F587D88E2DD
A7FC0FBC191236A1E9D65FE651F2607DC8DF48F9E35442EB3C4ECB329D15FC77
ED1D8EF209877CF702BD192CC0B547D039B018C5919515734C2C711960034EFF
D01F885AEF98332EBCC6493C0AC70C8B3BB3E8C7295B773AC9060C8B58386023
508C2F677EE79FEFFE4BE2DA2CE4C45630B2C197D131A5D7695D1A4EB1A43246
7F74CC50706B75C8BFE1018E8035A566EA86763F907A0B804E0DA5A9DEE1CA76
24CF0B9848562896F758FE9FC2B333EB04F1AD068B1D79814EBB30D60D4AB63E
383EE38919484C057E59CA924B9FAB3E98E8211E6961FC85E1617731194BC7F4
CC4CAAF830587AE2426B0DB2E5685AC9FE465AA10C3CD96E4511A73D187DC7B5
E8B13415EA2B00E89360830CE55DD99F140583D3F78E3739D013BF28E38D3D84
3BDEB4D495EB4012449C6F602EC6367F4E88E481D614470B3DE385D18B94C6FB
48EA45D8D390A12EE351F863021FFAECD2368A2CAA97D3E7F59852AAAFB7B046
C9F4B8E202171D656DECF293F4834AEEF1BF7A8C9E31FE22E6F4866DCB712EF8
4906FBD0C67EE52C425C807866E7CCA8BD5796582AED96063786440E69228F31
76A6928612BED0174F182C53A22EC3FB0E8BD433AF32E31E4290E671CC7A71C9
75940F15B3D8A2F62CB22F4E33B5AAF646062289DFA743FF64F0CF66129178B1
3C11376A7853E497D27B346D26E8695B91BD1FC996815723338D9D1BD13D5DE9
B840FDD9DBE5D6AEF5D37B121094194A53ED5EABE8002EE8193B76944084C3FC
0509E05F9BE094F22D1E3E96B3937611F7C0F4CCD79EB9B64E48B30EB6886DDB
05EC7BECB4A18767002CD4735DE903FAC10F31C392268BF8F13BFA44246E207A
9E68D404236629BA589683161508C2004FE7BEA29D3BB183BC916FA65CC1FF68
D5CEF6CF11FDD51D86F99B5D18DCB32022BCE4E2282AAAD46DF7133E8CDB0633
4D5ECD3A0B3A269E64BF08C9ACE8492EB0FA429DD494ECA46B5851B807A68BEB
731E925EA05566154E773435A867F5CAA63615F981EBE4DD6DCC2FB5C5EAE306
E4AE5EFF59ED20AB18C97909B7AD8EBAB283B42C6D7E9F87FCE78B651FE10885
FEF3237DD18400FEC045575C11869BAA54F4D188312363A0051173A8AC0639FE
712E627FFE39DF7E8BF3C03401904507B622A3A438D0340D49AC9E1A67B2445B
3CD40F4BBBA355736212C66448944BE18CDAEF32AF08AACD5DF63DA40FABE906
DB1BADEF96FB29C3F86FA86945123FED9C223B242447F267C70FE29D75685064
666A867C01CCF600A589FD7438EF4DC8F60BFF472391BA0522F0858B45F73EB4
0C2A88444EE1F3D05E0E5902CEF07F33F98E9AFD51F40086032EAF7AD76EE9FA
3DA00F9E010E792CC29E3E83997B90B16AF9E044066353DE37B3C4202DC2D11E
D18A0E05A4140FB86747205B3CD8A6ECCCF895E23A7F09D822517D1357EC4913
5499A982E254020BFEEA9B3C2D3F548F7F92498E8D4C3D1F59D5885B81642134
F028B4A17498053A02BD82E7E4028860C34D752399DEFC64E2D9CE46D88A3FBD
E4B8A5C88A2A044C71662AD73465DA830ED6431D2B016FB68C71B4D22853E1B7
2E275E15CF1330447CA598BC782488077C16991AF7602B8C9A427E9AA4FA86DA
413AE2FF234EC06E047BBD3FF15965A04CBB3689B17E38E2311396EC90ACA3F6
DE9DA6F50C8BFE6A310AB8BB24499A51B7CD2784EF2AD81C96A9E6A7B2BE8A47
1F59017BD76D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 5 /diamondmath put
dup 14 /openbullet put
dup 33 /arrowright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E6E371B75D78AA87381B96012E722B1
3E1628DC89D9009FB38D9984AECC3367A8436F03DD58F85DD4971868D7949E02
6CB56141AFFBA6D3A542E3F222158E78F578DE2BF54778D2ED73BC39327DFE8C
CB65DFA3764417795ACEB160747229B1A13467CEE339DA1AC22C70F56C764ECC
79267B775D776A85DA769B409CB0089C91D6A134DDF0E392394477803A32D9B1
BFA16F3D80987AB66184747F6F5A2ED4CDCAB1F713AEC3387148FC4A65AF7C56
C335DDA0BA30BC84A6F1A0174F74032147A29EBF9834A6C02307A8046B536391
4FBE2CE1730692FF22F17421392EC5CFBFE657928957EAAC1A019AFAE3766D96
CC39A78D7CBF8E7049B8763EF63A0122C016C4795189BF4134788FB1DC065042
9927A4D7A48429F8F88B1AC72FB9B6A9C43624290BE0E8C6440DDFBA0CD96B6B
70D8659AE5E0E874FEAF7C2BBCB8F49BD2EE3A375E60ECB0C1593EEFA4D6EBA2
BE51ED502F33E42149BCCD84D1022EFC0ED35400E904B9CF48A6668CB8F15F91
44E36E8C2F5CD51868BE60BA890C88B33B0F28C174BE7AE72526B98A9A628D46
95BB3E54972CB0156B7CC6A0154CE9517FA9DD36B10EF2B94D96A3637EBB3CC2
D90F60D29C79967A43C907A7793759385B7921E81CEBD7DD88594DE4C6C943E3
1168B4A94EF5A590B0D6D3D4526570CB0D0FDDB41897126FA77D6A3A168F819E
FD904D14DB0248F20FCE2CABD79B7C2062F469F443133079AD2C197179920CF6
D8F9437B93291CC07A337C6B7F45F8E2582F73F1B6846C355131B3B2B4F48B23
25B33129B0CBFFD305A12CBB92B35774058C3C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 18 /grave put
dup 19 /acute put
dup 39 /quoteright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 63 /question put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 74 /J put
dup 76 /L put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 94 /circumflex put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F43F9A1290E91C463895BD12E8A831DAD661EF23CB9AD2C26CFB26
71B72D15270CD8CB1D59CA2D9DE884C96BB923B1EC8208BD7DCEAB0FC2293629
2AA1F72C6B470701C381E335C2364CFCEBACDD20CA36182CA7E70AFF5B14B02B
75CBD0738E35DAD8E60CB3DA4DDED557FF9ED386DA52D10615E700751C842FBC
85D89C0E713F556814E051C6CEFE7E83C2F379B88A801DDA565BE73013DD56D9
44D97798564787AE6D5A6A9FB777EEB850C7481B4A353EB9279731512C9B95D3
2ACA3A0D44585E55AFD968135F6492A9381FA2D126CF50373AB7D47B509AE6F5
C4B100BE8334ABE2268DAFB7983BF339540A8D8280F3576CDCD4F21408AA7D95
D50A7C1599E62D4FCAB001D5F9DA84FA530B88F2FE36B36F9968B5CF9FDBFA11
DCA0E08D087C4C5F4D744BFBA60FC22E964CE10AF512C228F4CFC3DB21E38CFE
AC11748F9B23F33426BC4AE3F026AA8178364703A31FFB8A31AB6328AA3B891E
A9410A536479A9A0378B1CE62E0205B073A9C3F004DB440C37234EC8C030E18A
42C47DD0FA1EE3521C98714EC451AB5E544183431A9C5254CA9A7F73A55B8B5D
A98941739E254A5DD0C519CDB28B2F4B9E4850788B0B46E26020DA98EE4E7AA3
9B55089D13329ACB496C86999B89ACF2099533DE1756F0248149468CC0F2C45A
CA7E24A4C93B99FB57A66912299D28DC5EA30C0D4DB0F6CDF4F8F910454D37E2
35E519763C2B61D2B1E6C3DE314A739F6DDBB748D0C6443D23FDFB6D6B162BE3
95DFA7EADEF780AF4D3EACFF2C28AB8FD4530E353E5270D5FA6599BA4CEECD08
BED2831AD39F1E8794319569D09632A4CD65FE1A20DE8FB18109D0F8B7EAE4F5
4715EACD45673984D60AF1EE8E6C93C4F789008648C1F96FA1F8B338EE47E2A2
2305B46D033B7C7A3E634072E1CE2711938D605AAC075BB8E678C339F7B42198
3E61AE2035C3829B1CEC2E9FBCD62C20CB0AE0607EE97E5A017628A9A8A5208E
BECACFDB8FEF5911988ACCD63572FFEE5C40A2025F26C24EC2A87A2745B3933F
41FB3EE69503CAE324705BE07519A307A6530BBD233F45464221B371CAEE0B23
787A20271277CA65E106143B0081D25E339919166E4C5685DB230CEBD10B9AF0
8E23DA4E74DFCE510F5077EF740D30C463127CE5ADC833BDC7BAA33C19375418
91B78E0C56BDCA47D36E0DA51E215709FF69322D42C893A30AC0A0C44A978A37
EC78DBD79E13596918CBA39D1A7B8FA56DFBC0152DADAD834A432D24CC66547C
59DC7F0C6B80BC40B85EAEF73162A69769882CFC0BEC22B159FA7247AF41A886
F7BF1D886DECFC6E509B3A017C7834B1A544B12F93723624194375A2809CC5ED
83A2DE81B12C803BB279C365357848E66AA5C67CDE427A1F1E3DA8EEC5B53ADB
0F70BB6CB4CD118419E5AE7A0C417CE93EC6C64038F6D86D173DE3866CB703A5
B7E042570025A2858D44E8778A93D0EFCB1698A6BED02AA7014FAC6E64110C2C
6A35909BA3264A48984910218E0E1F2541B7EA2CA400818F118C088F3D43EA49
0963426CEDABA6278B3C9EFC1985060B8735BBAF575D8D86C106679FADF3E2C1
08112B3410C6DD545F7A59F287E83C08AD158AE3AC0636BFC3614812566AA522
4920DED841A976A9CC1A12D0B0B5DCE30E6591F5981F108E2A5E9E98E7F4D6E5
435B0F0297ACF9E7FD4AD8D5F07BD945382FD0F175D9DC8005694CE8A36E9375
68560967020315CD9E77CB6A755035B1B05F1C86833EEC02FC813145A0052518
2B0BAC8AB381658DF10814D8C2A0F73A06E3FDD8A67A52C361309B09C86728E4
4F13865DE2D50E0EA7C1C7CDFAD4F1263EC8CEEFCEF44514E52C00E3DDF69890
FB2039F35D4A32526543DF2435BBD4C1D71F141764CFEA370B01BB5859797E98
FD99D07E5C7B5C20FFED563E5B7B8B8F378F4376FCC0454613A1552D1816AB69
F3BF0575F5E6ABFD614D4803C803BAC3E0E0B5F62BE11C853C0925A8C3611EDB
B6DA76781577D0A50B5231C429D99DEBC16A2D5C3DC3F93ACDC60CE0530D696B
570BE98D8B5F595EA77149C97BE36C9693093D4D5074CB75D5B248F2812B3493
19363B5E1F55E207B44235F269BFA1C63C849DF5158A61A9EC604C225BB4D820
B1DB4E227C38ED99D81CE4C7D04CB5F191A36181F60586C124C0DEA19D349207
CF80241D991BBD44DEBFDAAF7F5C4D79582CE63E4D7235723125FDA6A45D9B4C
62FE9472309B1BBD772D15D1535769B782BEDB53BF69456A332658D09023B83F
2D9FA73A0478DEE35D37009E0FF68881B70D4C06637DD859AD5F03765046AE4C
CC91191F5A58F31FA87AAF9FFF384D1BE83F0E3079DCF1708EE4FBA84AB46291
0DDC08CEEA6631ACB17AF6F492E24663E0422B21DD2A015EAB86167F98241577
CDBF8AA7BB7B1925AC2931C2D35985F827C03C8C4186630DA766AE8ADC1AB0F6
03CADAB0FB7D17BB3657792A771CE5E5A3E69465E58CF73BC24E021BFFB4FF15
70574EACF504F3D627C6B2606C8AE797AA8CAB60F364CDC0F1210550193785E5
A4EC46453BA72FDD1F106A1D4115C8E42F6E3DCFECEACC11CB7B2008C173956E
BBCB99AD04298D93D905B3975ACFCE13DBBF04645C86059503439FE846835B8A
4ED0D05D538EBAF59BC1243B45A3FE334D6424B950C8401F3906C080B47C4C35
EF81A14C52AA67F811C672EBCC231FB2FD9FF30E64CB7CDE928D2DDE9EC65012
257DA506C50BF0CFE0C339B9808C2AB401AD8AA06A42B1AD935833B94133FD5E
CB81614C54AA899ECE4676D8FFB2E25209EC86DD8681993C32D596B3A2EB953A
146D29BBEF76F6068BE7A9DAA9F9DF7C9F46AC71C04CEA127335272E1897ED3D
395339FE1A4DA36F9EC01BE61482753B14C6B182E9D446F1AB2C3BDAE5D836BE
1464C962FB52FAE73BBEA8541F57CA7038210458661CB76CA88C806DDA31F02C
62FC98E1045CB3827BC0DCE091CEEA9FCFB0D98464F0AFF4C4A37031EFEDE8A4
D341210C977F074F5B3644BB3F93D7F96770C73499AC0AFC3B92FFF566E7A6AD
F80D431A13D1F870E79B3C0A8801013D3C492590664FBDDC6FE2E418E392D75B
B582D063D005A341DBE886706837075CBA7D7E7BA40D8676C98249E41DC16DA4
3FF9B03ADE9927199CD87FF4AE7AE7B4347C878AD9DF0272752554A2764CF575
C816B98325804045852453611535BB1471EECC1E0DC77F6D3906315A09B88C3F
C7EBE9C6CB9F5B9A26DC034296389C23E8E3AA57514054DEF4A8026F5DA68385
36F3FE0952BD99B512AD723585048D44F06488EFE88B0A62CC7A6A82BE8B2FA5
03F3E3A4A4B48ABF4B835D3E07EA4EDC5BD1C45D2C57297685B8C8CD93DE9E72
7318AAE344B927B5DF5CEA794CC8977E665AAE53027F8707EE6BD0BB9994FCF9
AD534593E04D4D7E285B76F50658A054A2DAEBBD2BB4FD8FC803E7A0AD521BAB
BF1105A77651F118723EF9AF04344AD8C652CED57B250F50AD7B264DC77FA78F
87D37907A069C4146C25AD5CE0BDA86DECECF797B4320E9865E2437173F204E1
8896CA20DF47D2D0A585DD4EF552F40503BD7F3E855C877DC9C38DE7B133D417
92038A14D8A90A3154A16BDFE4662138E4295AF83BA1604D02C18E381BD694E2
BF2B61C3DB8621FDC5FB8A786B1A04B77AC260F4E87542DA5F9F33C123A6C469
D5D3A351F85DD4DB5D5D2EA8955D5540308E63E9F6251B5CCBBFEB1D3DC91299
E792E8C74815E4BC6541F0A17E20CD3D93DA4704AEA33908027941491B69246E
1B040693DC01F1A7E42CD2D9CD4BD3F4DD3C0B0D28184F00034AF1B0135BBA0D
DA3F3F7061C15460E3C1BC8E20988FBC4D3A0057AF461661549339B595FEFC37
C6133A3B605F39A434F87208391CC03139EAB50FBC25DAD85422F8B991833950
1225E575850CFED5BDB2F07977B2D5045B1D100AB5BC1535A37E6033EB313E70
D1B6A7E6F827E214FA6357E975BF427556E0DE41F5B00953841C566FB12ADF9C
9889F88B8605AA2BD138731F91DD48FBC778E349A96E21B5497CF072B9B55E3B
DE8AAE00136AFAAE441D44CA1A1DAF8D551F1383FF25B8CAE0432930CFC34EFC
0E3EE2F3B97181AEDC88F1D875E5523F3D2AFF3865FB93F10DC49A872AACAEC7
DABABE1EB7F65A47E87D61D2DF4E01CB48972C196E0CB34064FB58743EA6D024
41523BB5E453E081CBE7584427F3898D35DBACB955FFFE6FD906CCE3DD6D2642
91D39291C465E0A7BAC58D18474F48B87EB7E6D621E74DFA25C5954F7DD7314C
A6E0A3ADFF008A4FBB7DACF6BB469EF2C4AF5A9F17FC7EF60821A2E6CD4EC3B4
A68B34E3E1AE05E709B098D1AB782C8AA31DB9E1DB1E435130296CE18AC24177
9C81BC5432D45BD58B723A248E734C3993263FF9FEA39D7FE050C93CBD9E2609
787023B59F53FC50BAC5CF5771345A9E83551080193D77945E249D2C0C8D0FEC
89E34B48F17BB622E344197DB475176D51B992F553E0330936F68042F0E53B6C
60D31862ADC31A62B7C26D00BBB4F2ABD00EB31F8D38CEFE81EF8C182AEED102
7787E23EA188D51C8BC5D487ABCB3F3D2F1D6C46C01D15987A7716BBFC8D123A
91F0FC30DC58BFC4DC8BC23C93B85D802243B5C3D9D0D1524F0798BAA41C7E78
8334AF8E3012CB60D7D2C2D09BC04B0CDE55D3B17F7380F7BD827B80FA59C53A
34A786EED1446D27514B7AF91A3EBA4372B5EE22CD13A9420AF7AC8BCB28A286
37D19A5BDCD3ABEAEA5B83E4DC7572D2B81E64979A592DABB769724FD4D28FB5
C07CECB20B18851A7F0F6C0EEBE4CD9E71139BA585E2522B7B64D45E07507ED9
053C41FA39D9B761B9CF15C75EA012DF6567A64831CEBB823469089F02FAD38E
9784C5B1B7ACD6E71D888C6F9DDCCBFCE3E80A6A240B28B825A23F78DC545BEC
B365DC6F875877CB13566C66DCEE4952A6AB22055611AF34065F7640012CFF86
08F875DBC3EE8C931F1AFAC4CAF480424987E20157A545FC5B7AF88E4089FC47
9E0F3AAF08D92F0D499B320F7B1AE8BA3457FE240A98864329ED81EF1F87A016
F8D65FD1E1376F56E7F8DD46CCB6E39F8D6A77E0DED8DD0785D410416F14A7AA
5B43A7C0D1519309EC1C192AD3318AA1B1F6D7C8AED19692FB538C274E3C6468
B23DADE8957058CEAE6FA43D331E8EFA87ACD3BACB5F519506D6D17D38872043
02AD807EABCFF2185900BE5F13232AC05F1787065F3B0F59A292CAAC7B81B987
9CF5F7FABDE131B1D9A473003355178EF9DF481E000DC79A60949BF1C63AC24D
6D3CA187B742BEE46163A70654FED1D8E2F57721EEFC031D0C977C6E6DE5D997
BFA3F3C5B71E5AF1BA9457012E53E3A508743A3A74D51468AD2B899192BCC71B
F1F3F54039FCB0383A5AD4AAB50618A5DD5F51B17FED4C745FD7A4F1F934FC9A
F5B69D6112E573EB826FB3C52D2417F61FFE28E4358FD801FA4DFAB6B8CB083A
14F2BB7C9625F4B09A46B028B8B5766BE9FDAD4D272B61745F38E363D2F74528
F7975EEC391570541112A8F4CB0646C18AF378ECA74E21518A354953B0BE4D6F
5908A5FD3BC9A5741232AA42A93F27EB6158A7A32EC17D21CBD4D21998E50B9C
039628FCB722A8786DC85F2AEBAA3F961002465511C6AED161B4F093CDD3ABFA
97A3ADB64A82DC51D1DD27DB56FE4B424AE1F825D238F45CE05B68CF1F6C881D
25F667A7163967B42BB930CD1DF1095EDF12FE624E8FD5A7EFC85AD21EC9FEBB
21F2A23ACEA62586566C6A5890C3D7CE83F234BF27CD4F9D6D60195E1A026A09
D9185964DEBF1C49559702B4DD082849ACA344BD237FE0997EF22ADA3DEBCE9D
19DC732E6ED5B33AE5947FD018E5C3CD3EE8C6B4F3D3896619EC27D963C11B58
E5E4CC194AE79EBEE8CA471620FAB18C92230E371F7861F70FE2E55960C21E1A
D076B45362012A2303D1DE5275633A59944E4A07E7671796AB0F5E7F4D41B171
CE29CAE9562DFBE4E7131CA27C8706331D4DC3AA76056DD23481B9B34FF935DA
538EBC322AD0FB3C545167927D334E4AE553D27B2505E28C26611716223D843C
E27C364EF7DED7E3AFD1792DE806BF03647B4D791D0D7CEF6B139F0E3FC4C678
10D69794181DB1A8E4FABF0ACD4DF388FB805C554FFD87845706A6731A857A40
37023F5ABA844B5D5D0555C06D1EEF9A294D2DC81E4F6754926C96DF3C6359BD
80E7CCB94BEE4474D7CD2234517CDB9A1FFAB816624A43790E99C22B2BDB0731
B6050181CBFEB50346D0BBDB31A4ED61EBE0016E61B724F0E4047CDC594D9D3A
9DA454C01D9CADBE402FD017A32077EDA92A41160F05C6140976738655D0B9E7
B576102833621E085B808928936A10017DE76076A6F21F152F6DF777A283A00A
0F96FDF94FC73A5006939397F4933828AA14198BAD9F41840E0A614890267159
AF905338D1826B7C7D1B6B6FE2F8781566FF2A910D334EAF54E36EBB901562C0
EAFBABF563EAAF7242CDD206A1F5A80CC9092C18DCA57A086D759B8335318ACF
38355E77DDB041939FFFC73EDFFB79E86D56C008FF8C5442C1678D161C81CFFA
68E105D79256AEF878CDE9C594920C56044334B78A8B6ACC50C79C53390B63DB
96BDB95F3B0FD9B1FEB32347A3491A2B108E49E2CF3FE2C8819973FA46C32155
17B539F77395B4A01417D77CB7D4819864DCD239035427BD92A3E7D30BE9F4DB
847F46519D1D4C62196D5B07C3D4693B9120BCC4203091CC1C7400156F6C6E04
1C331AB98DE215B5C532AC21C002DD1B8D4F34E1BEDCB0FD5B0C7E5FE3B0AC18
43495CB564BD2693F6680F4FBD367A2B4C518A009A78914F2F0628D138E7E9CB
1088FEA987A2E8BEB09EBDF14142CAA4FE5DB4B301757461A23C6F55AF1AE297
A4BFD085EC97A56FEAAA6777EE040751C3C28E5ED26C54BE5C09315B41752748
48F2E1AC322E51594D2E818820689E87DDE5FFE5AF422C91AC39A18DE196F6AC
EC43EFE8327C22A1925436E6F882D4974846ECC1C9D46C1732C8E8081A035478
095089EC59F4EE500C2C5AF1427197049118FCC7649B72AFC49F69AD9F03A8E0
A59462D4EEBCB51FF1E22D26269E69507BA75CD8B5E489A20D9A3864382E3922
FDDB4203EC119D44D8B9DED02ACAC8C7ECADD6EA5BB59825E162CEEDA75F72A5
1525D0CBEA8297C24F1ACA9704215BC5EF3089A2120A019F88E5B88CCC4F118B
63205C8A02B303D5B03A1F61616EE0F0590A57D0B59449E5397638DF6B163BD5
8693D551F35369E0474CA50E68F6BA783DAA837269D42EC177E6B246A2331A30
B63AEDF2AAEA132C2563DDC7E42E376A4BF1814303F8D864E09736E5C2F4B07F
7B8C999924305067408A9DC0030EAC13325512BA219CE6C7B49EC03F1A15AA9E
28B842BEDAA324CFB23937B9A3787B4458672E19F9BCEF1638205A6CEE2E6F6E
9E6F2826A1FDE30E27C1236F1ECCE56A90552DECD500B83EC9CA9E9546D8F81C
6E5C24B0E2049ABCC46C2C684960A1085B38B98B3E9092F6512446F45E9F922A
336AEE077CF1C6125CFEC36DF85A09999AFF59231940B8803B98C87C1EF20D2B
521237A21BCEAFB028E382DFF75B5F86EC5D7125B98882501675B1972B2D1CA2
75908961C51A70498D416A3F8D8D2AC6066B682FEB75A503D897801B987B95B1
F692343D2AF708A1185D8B47764CF5CD2279B5B5DFD4F7BD5C89F7E95810AF3C
A4172BB1DC645EF4B42E3EAAE328991404180A5B7C0E115F44DD687036FE4852
D41F881FD9B7420E604B85A11CE5A8BEE185EA981CE85E4ABD8437638697117B
D5022FDDEB78408963D950641001D8F4DCEA1B7C382059AAE1C5257A1EB2E4DD
3E53F3275B15ABC8E5ED6A8274B42EE13FE179563351F4F2254914DB003C5D21
197F247208B3BA8086C966952B7BCDEBD45821F411300AAE152CBDA25C43377D
501A01691FB64B2E24730EE12920C5632DD0B500110AB705C89A60413B3820D8
DB9535D6507AF4DB4857D2B36771EB99CF603B9A8AEE999216619E9210B91171
DBCE6AD329B951007A33A32310880C72E3508EC072E90BDEA29404E70C976893
70010DA74383321108EE9B978611C3D7359D3BA2ED4072990AEE786E2B5BF3A9
74D207837D2F54627FC287DC8EA608BB5AD773DDEA5C92A30BDAABA8BA4F3B3B
4EF333896D03CDE06F58F85B95805065D566221F01E8E8D6BB237A54AB3A77FB
499724BC35D5C5EA5F2472D72C591658A653D8662749CFDAB1C7AC96CAAFCB53
A67A6F03A95BEEEFD603D3AA82D1443B321DF5EBD470704A0A05C859F982E9D2
7A10B1F867B57617441C12C31219EE88240C4AC5FDA2FC8B07492AB9CEDC6813
B6B710D7F9466945A0948D95C7AD7627AC165F492271A4EA7A3CA09177CA113B
620E77496E6C5512C27A4D8B9F302161AF9B8471039849F3522974A6E083ABCA
0E8A022FD808B48EB9E1C6AB376B648F70002F45062C572B2F74DA18A49D33EE
F05BC3FD869F2C61D6B9F62C2DA67EAE6FCC8B690290973D99DD7066986BFB92
FA6A07625BA11F49983E28460E27BA784AF3FD89DBA919DB152547184566E0B8
CCBC339ACDD1C4438E0BFCB8017D7C5233B5A00B93158E0F4E6A595EA39E84AE
43B498D350040FBA4CDBF3C9223FDFB1654B21E389FE2E41AB5156592A5AA708
7542774D9FEC8403C1B93890C0C7D895DE9C59046F4CFD301CB4AB853ACA790E
53561CDC3A29967BF67EB4504EFB0F994A0F36AAE1EBE132C52BAFB91EE63048
DBDDD53EF8224217F1FE6BFA3DC89CF88501623F5C70B6CCD2B04871E8A9B6F6
D5F210BC1C84A94506BEE2015F8CE3D5B53D17EE0315F2C86949EDFE7A35BD05
445A59A52BABDCAC448AA41D599A1484DC58FD9BA863D47645B8A718653DBE8C
D759DD8C8DA2EC97203EC64FEB217A32C363DFEB652DF0C3DFEE52D3AC296B91
5DD237A1569A86C889CB105A2684ACB25B316E7C5363BE6D0A360A1766B7904F
13E21BD075174AE834F174423FB1A8A50C06C73EE8B98EAD3C32C0A57E7A3288
EAC8B6F0F63393F6EF2299BF1727D7BB08303FAF3E6CF9E08D4C28C9F0E34C67
0EF94E534E4B05EA16440BA15B7ED1975A5D302680F40C949FE4EA029E120BA9
C7766D73E684FAFF00315486F39A0349A2DDEAAE07CA270299DD03EB9ED45AE9
EEE8D0A68AD0F071C07920F626D2EF0FA5D580580B94EA8D76E4BD6BC278197B
73F5A1B1820DD6256B937F8C985266FA8325A8AF967053223ABB50B9F4BDE1BB
FAC5A8F7944E75B38CFFC9E40553308E8005730AD8EAB5B5FC1D1974975FE731
2E69C9045975C495C1F0939D7634D2A2B7136459D9D5BD616FF3FA3608DA5C07
2E051F920C6F1ECEAEEBBDFBCF1F4852295AB6BBA0A1BE25BD63653516264FE8
4840169B148EC3CAD58E0F7F7D24D8D031EC3475680CD3BC76E85E5C88542D4C
2177277497EC0D4312D23D43F52DAFEB39076AE6F026D8F4F5E8A670BDD0BA1B
4D688EFB051D8CEF02EB3FD2E3D8B66473C7801680961E7C368C97327DEF8B9C
B874154622C4888C6C0304B730FB2DC8B35CE88F37E71F7A724B1F014D0F1A22
7AD3A5B27C5E872710A587C8A05CDCB8D8003601D119EAF4A3ECF4682E820F94
ED76D4431EA7228058DFAE938B05210914402886AA362A52F17FF11813517F0F
1D19932A0562BCDDD59E95F9D5F7EC549433E2F7FFB14951A7F920CEF5DE544B
F46B5460EBF588996F6288A5FCBBC2932769FC2488683750736DDEE7EA503CE4
5D97F52B342CBCFDDCF8AEA5C9DF4093A868C7A16FE1D89E291E9CF68FE99A57
426ABEFF553A539F05BFD3EE4C73BB6E627A6ECA9C40143FFC1F36697FBA38A7
9AAC4ED5D58E51AE29BA9723BE64F1EAFDAA5380C7B6116F2D454E75BB99CBA1
AA31DAF93F8E0870DC726AFCBC56E73CF28247D02DC279A8D6075B09B8FD2767
C1FFCC58000C5F8199C61FDE79F26E2020FA1CC742766E3673A30557A3F81240
99BD715F8528B3620BC1C8B82B6C010981E351F3F613EFBA6B2F4A77A615E5B9
A98EDDEFDE6312F023C12224BEFD5290D4893C72225923B364E207EFBD318D1E
734235610CA2B0C9E933F41633C75B76817A1185FC11909391A7486DFC979849
62B989FC4CC2EEEA7DADFDACEE59ED716EB2208364408C8829D21F150966139E
16947D30531F4C24B5E1BFC3F84708818B93884E686BC80E4F7B776CA975DFF2
40EA33FA38CB9F2B890D4A2E47EF446F6F1EDC6A662141FE70B77435F1C02C1C
9F07EC565901F2D5A987E0015336FC6A3E83CB99A20EB3A60CECFF16BEF0A761
150312D1268AA23BCA901766B5155BB0695CB857D7D128D97731E668005F3187
03C1B74A56A977BFF1CE44D3BB8366EC46C7FDAABDDC2C5E272537411CEB64AB
4DCBBB1F060C6FC733A157C78BDBFF535880E53C4FDA1B2D663A1D1DD87B89FE
868254652DBBACFAA32AD8EC32894895C204F6F81215488652EC4040C8282C46
644657D8362D5D4D2555A2E8E2985A8ED0E5FB943F99A5D39F27FEB8BF7C96B7
477FCD41EAEE981DA78EA2747343A09842F0B50BCAA7B97EFA1B21909B6F9EA1
A1AC8BD648A021A2CBD77298724C02D99802BD4177A1FC79B3C7334DB0DCECC4
3845FCFEB768331B78277D98DA96EC6F0A807F1019C59362EBD7517A61AD26AB
70AEC5B89C3DCFFEBFAD48E928508D22DF96783B29C085D965E34A21F9276871
A9564B4458B14D051F85739E6F247DA13DD63F218B714EA4F45997DDD24B1B54
43F74944E659763FC8964DBBADDB2F72BF581ED89A8EFBF7C748C5AFB357549A
6C9A7E2655E75B1FC16D5A933A93FA7CEE7D3663D51C19783F38C89A523D0CAC
EE89B0BE143A7EF6062112604DFB234F1ECCA57367BFC3BD4F74D9F488A9B1E4
0D31C73FFCDC7F02D2B99895A16BC3D3989B442AFCAF574A801429F080EF9586
7EDFE055F5150557608791503093FF6374154D496591B36F69EBE7FC66D5E12B
4B0F5C8602F551EA037DAF557AFAC3BCB63BCA12489229454122DE4F38C71AC4
F818C47EE5BAF349D466B17D8FFC6A82E7E164AE17C33E6F9F3EE4DF8CBB80E5
F2B7A6A3E10A5EBC601382E96AEC9F4BD312AC2CC9600B10C1ED9E5A58AD4DC7
8F457CD7A00DA6268DE27B8C4B6E8B4F05C4A762A42B445F19E7A3241AA87152
F6DFD11F8493179FAFDFFED72300FC267CA67E9747E373D14ED1CCF6D7457BCB
FA3B57D90D95ABEC03837ECF93FB5743248E61B73EA9A0771BE9F81E6E4FD3C2
1FA10AC69ACD9AD856DCF21A095215C21C9523518DFB9D2A11D4855766BAEC9C
E024200A7BE8E61F5F509381D536A3096D7E3A6D972A7237F1F32264E9DD4EBC
E44877487687CA091C5B1C8288BD3C905DE32F4F701BB60E92DDF4F4E746F648
D41F2E94C4733AE7FFBFB005B4C9F057F07E5CF772EA4FFB5524AF9C90B3A4A7
D0DC4A2DA33DA9842F0A3D6765F49C24DA24A04590D8203F4FF5440DFD97A155
0D5FE32645684A925D1CAEF857C2F54BA01FAA62024EBDB435234197B864BF70
AFC8CEAF039867A06AB714AB5F97078546E946C55F95A2E355EED728AAF51BB1
D88950B8075B90D598F37310688158C985CC84E7A9B90730C258518193E0C871
675E5309B2FD26894522943CC76391381681D7DD454DA7A1B7A791CC8FB20F0C
863F209F9212AFAAC9710131F80448E80CB3E644A3C73561946AEAF34BBB694B
273527D495C1FAA175C41713EBDD8917B97CA1106FE2A2DF803B3E6AEB2039BC
ADB13E543F2691AF3E219B9BBA6FC8C0B5D66E8742052A67CCC6E376694BC0B5
67ECA3C2EB6BBE1AD828DC0FF234B26880C4846F507B057E52F882561BD031A0
55232B1F97D517C0B55ED57627887F72930E93059B605379C70FD0309C10E6BC
324C436303E25FA6B4D7FEE47D0297B838027584797D9D30AB2ADA5D5798BAAF
C7D56657CD41ECEC288168D0D41FDD319E533B5510A9F4F49AF1BE69F6DDA35F
99BEF32B7241D8071E452CE8EAEBE3D4C1EADE7CE9A0CD1DC5BBEECCC00110DF
F2D3A1D8FD9E9F3281E25DD7B1501344B963C2233052E5D340AA4FCE835B457A
277EDE9E668641A6FA2488496E87BCAE7CC505D715CB421EEB8E48C93950DC88
1278ACFD0163EF8FF6DDDEA8E1534A1083D20DBCF891234D1EBD77D2CCC3BFF4
2CA18AE72F3DD6E15FF46E95DD2B92E2C41571075799778CF07970A02F61FDF0
D62D06EB30F5B75CA7765D27D87AA29F1F9947D06636A534AA4E4611A8A26AA7
57E5DF2FAAAEC1D69944CD7A9D76A876C50729FAE6710040C5C3A895A12667E8
E421AEE3B9F7A1A79CAC0B1936259E12ED758C1C77736A294BEB2221EFA30F90
293A0FBC820693DC462466E8F4DC9530C788C55AF703C3EE9AB5F13DC027E137
DAB1A28AA983B5ABBCA7061E82418D50E6AA76031A871900C85933CDF80D4841
275F13E6DCD3CD2CF3D978793B743B850123D4DACBECAFBFEF8E1825252F5596
BA4DD949BC71FD1BB040ED153DDBBABDDD46D3D5978BB1C7D3EA0E51B869C84F
45CB33ADE5DF07ED6819CB51F8624C9CF5FBFBDE7381D3DE92EFB1370D7B190C
4A3A6CFA4265F87C454A6D0A35F04EED61D2523BC706ECE3E63240887B8832CF
062B513DC28C84648A2A2BB06610088B867687CC55FB13EFDD747778FA0A9FD7
AEC3E1C1ED6F2155E364A70BBEA476A4E14A642BA839280F6582B2F11B4AB9E1
A4143CA0CE7666FF02D22FCDD33FA4A1E55F7851D88E36B00A4C6DC1F619B2B6
BE9F4381BB511B7E44AB019F1EA05F6C7C4CF25FE1D13058973E1F4044D7AE4A
B61C8A1D7A5AA40D76A353D7C31710B41F49C0C1CDDC38CD3AC4A9B0590E01B0
40E3043A8CBEB6795C5CEB1257C83BAB16A3EBECA5E2F14876A4F6DE7098422D
76BBEE81B8A6ADD8D3F914ED64ED9BA7811773E0FD456628303AA21D97BC2962
251EE4BBB4DA7552C98FEA1ADB17A74E04001665C04A6E5CC9E715F7794E7A5E
111F01065A947EE293C0E9A3F29CA47F80294C3736867F747E01C198D7D448BA
09B487E86EBDDF67B518E76F82F25A38C618EC9E407B637756F7B058047DF041
706D219F5A1F92ECB19CA6F0D66956681B748E325FC92D974C271540017C2133
5AAA70381944D3A98720547D98F55EB669EC216669AFF05E9C4D880288D0F678
40857FACD5FACF7E940CAC7A1E4367C0DA32C4B6411A0DFBBEF916013F33845F
E94D84B5BACAFD5396A6ABF9313E5045763F5996BE59734A9AFE11132D642C4A
6BC63A34EF8D733508F0EC5A734B36D85709D8BEA9CBBB7D2C52A5854E68B32C
C646FBB72CC7F8F1394BC3D27D808AA3B1E10DF7C51E9C11CD96A86B1576EFDA
6B3C6B4474525AB031CEBF75C6F428452D16F0CCCB483672B469688DAF580361
4B9A588E2E24187A0E3AF39891DC5606B7698DBE72BD8BF9BD57FDDD40BCB33D
6269FFCAB259ED2A31248B134D9A513A5A5F8F39BBA87C3FA8113E418243AE74
E445080C66D97B8E5865EA9ECF67AFBE79225A182E58E7B29324AC7AA214DB49
778FD81A7C1E9744EB0D40CFCC82216891428202039810B05D29D12849534CEA
010ED06C8A53EFC08584F6A2A8E948AE28CBE0000AF81DE98391EE79FB30A787
17994FB1B122F5457D425BBA821AA30F40249F4ADBACEDA8A006AC9F7E697B07
07BC732BD49BCA63C756DE23277D28A0C175462DBFBB2A8D2BECAB93840AEA16
B5462E8B19C2DCD7726A8BED4C9F7E19CBFE1F60655379919F428F4DB6F4E474
2416B44550CC067908AD1FCE67A86AA39737D9F59E29BEAD4CE8E29CA692D867
2593C3A9885A00703E5A19AD90216A0A3AD2865B8AC51FB099DB304C331FAD9D
545A0C7DF62B76DE6A192F550A43DD6EA92E3B9C5868352ABA7CF3CF9B468247
81DD26ACB84C7CAE53C2375B748B376EB2598E14AE5D8EF7D602B840A37EFC2C
4EAB3D33D41A3A05F04BA49F87BA84FA3B8D6FCB285FA5D7E21A60FEB064055E
7220AE275DFA8AE6E70BC83460B4DA5FC04F0167A200F62686DD62662EEA59A0
AEA68010485C94A8C33927CF341015A3CC6A2D8F849E41746EF79506299F21D0
38254311703E55CED3DA87FC7C7B45282A327925B03E597B7221B8433BCD698B
FF4B38264F481855EE931A2FFCC57A302932C1710A4578082F05E75E47AEE463
6C206C791474B15897ACB4A91352B6E9EC6EA382C8450918450EE1926AB1C64B
F51C00A703658185A387170262EC7863B49D02B6EDA6589AC8A06863D146D777
6537292013B3C6BB81ED09F4942058FBDB35EA07B0E34D92C4358106FE75963B
4059C7EBA2489237A6E66C3E378D847043A40951FAAA8C501E154E9C25D83036
BA32305138DE161F22430F879CCF8C3FF58063108951B528837FD1DA9EF28D02
C2CC3B72A27AC95C803AB1F21CCB4989FE02BAC1FD464C92A3C69CB247E468A0
C754BFC304F3D1E1060A4B08B6CD24EA66A6338C3F53A401D4F82869C7571B85
A1F54102FE7879CD24B6C8A89D46E99BC55EA5DD2E1B425C49EFCD4F0526EEF6
E13D77A57BBC207E69CEB3BDF07732679EE22D9F51DAEDF587A4BB823DD16E70
EA99EB693597CC82F78142793F371F7C65B8372BF9D44462A7A0C53EC221F077
93A260E4749DF762E0C0BD5F861F7C3E774DC9075C3EAF4198E01FF3C6B5D408
0F4F2F0AF3EF385E592D0B247FC708AE63B6E1FCD5A10CFF78204F0F86AEDD59
2964C27698BAA7179664926895741E11E099E29142775A22DFCBFE6680C19303
1F4B0AEC213400B78B7543435EA90AF1E42D689C1518F1150372607659910973
71A86BE6BAD3E032DABA5451D04826C2DDA2631A1F2D8C4E9149137EC4C31BC7
3E6D67E39A6B9EB771C9273685CFEE03034A9DA3CF8FD5E741A18AF6D183FFA2
E307BDD98956BC9F56D71F7D83BB518A6051D2D8E09700248A70695F1F174BBC
5149EACB7B5B47BA2EABE59174906A29E897ACEBB16C6FD5C204D52536B306DB
A333F0DFEC9ADC1842023A138C2EB0150A183541B76D9B6EA77EF046138F5425
747FF49E0662335A2DB9C80E2236A2447A6988E105DFC5E7FB9AF36DCBBAC3DF
514FA36336F4C2EE9D7F1B12502488C6A32874C8001BF430FC6F97310E02F5D5
35F6F2F94843DE26D450E79659B495D4F075ED7409E41BE4FD6C16597E4C347D
7332084EF2B2DB91B9D8B0216B922EA1508C98EC32DA3B38091AE67F149A3AB1
873E99073A9F4F6E0CF2A50E67E9CAFECD4FE394BFBBF30D5545F15028F87577
B9699B4D95992B3DD034E8D89E3C1EDAB7481AEB369882E82B3E288E83007D4E
3FCABBE8FBB11DF092A8A68FB309BE9F5D3D58F391BED1ACABDEF4E73298887C
52E924465FBACD72C7B92AA0D0117B22AA3E802BED026B306402E62D24610C07
CD6C9DAC80FEA0A29840DA64F101AB3BA06652A3B920665FFF7A8CF738619469
ACE7FD542DCC4B4A27F10B9CE0B78001F2BEDA1FBD3B824BAFB2DD6A187B8022
AFEEE0994BB80056C8BA61
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 63 /question put
dup 69 /E put
dup 86 /V put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 111 /o put
dup 114 /r put
dup 117 /u put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DC6B86AA73E883ABDC43AA6155756145B9EE8EFC505738B7AAA434E093E
029F4BDA397FACAB37996C354110879CA5EAC9D735A9EAD4C6090650B5D5023D
FC9947DE3D2582C88B2C8C9C6213593ED5EFBFCB8EB161A9C9F572701A3C80AA
033903CBED807628BE32BA603E03194E76D374D3813FEBD09ABCAE0CEDC276B1
390CAEE8408FA4E01108DF54D34CD31F444F24C67742DB868CC2967CDA1B8562
C4DC3AAE53445277C899FE86E54B8BDB1490AC76FF84E6E695E526BF8394BE7D
685F4AE35AA17151913D70F35CD7820B221FE0B71A0CA584024C964575599D83
F428992270E1039CAEE78B2D136545062399ED51E17EFE2DD72FD72ECAF8623A
C2C6E1DE8EF99678F333A0A25549721103667E88138D473DCBFDA8573A59C59C
5287D92E1A8CB5A195036AE42DFBAFB1E18A1941C494C795ECF17CAA969792C8
628B6809C79D5B58F56106EE7EFA0BDED029D2273032E1C8A5CD07991064AB2F
20E7735CFD4B13C2A8CBBE519A8F57C66B98A31ED82CC4A183ED86D278180D66
D97CE9B52FE6867C09D913F35AB9B9F6931BF820312DBDE76CEAF3D3F2EECA19
9594CF093FB8D49DAB28DA0EDB9463F81A02C55BD1C45D2C5729767507D93B8C
0D596E1098DB1CFB42CB821E8FA5B5B93BFB454C7CD598BCC5F92BA5486A550A
868D0C17E5861E79939718243DB1F2F6B23D7BC51D926CA86263840FFCC3BAF7
98B72E5F9191183CA5F1FCD9BACF833A9D58F384DC27B11B30790AFA8C1F0D61
5CBD7F3E30A565B9703D739A46149AD05407515A3F397A287343D7C4CB6C8137
FD441A887C7DB8DAF0F445E1DE2BB3A859D465B74109BA18C85A32C8C988D247
6DC190297FBF224E92AD47C87239667707D70B5D344F4E93013C35939AD543B1
A8AF20D9DF0629D03971CAD27426CE3536F737B960CFDA0206EA1DD152DA5891
2B07455FB24A043124FE60C9C35B3565570C5AAF132A27B8098A928F14B7E5D0
E619EBC509E1E61A0F1A69A7A6028305B86D25FE25B380D2DFC3330B70F99A47
E67E22527BD17C135A5311F9E7264E646D1EDCF553CD612C2889FE41EC7553D2
E0616DE75AA40C0171FA981F888E736BE0F3D7F6438FA76FD02D322CF2A6FC61
1ED2EC97FCD26F6DA6E9EFDDD829D6FCFBD66F76F6E5E4D192A584A8CFF3DF3B
F895FFCD2FBC3152977FF27D05B3656FC546F64133AADE7A8ED6135F0B1E5BCA
B170AE703571A817E2A75AD7C9CF2A7827563357469FE34F6F87E141E181D826
EA00D46FC974539970EFB2D13C85D6FEEA1B50207E9F18D93CDF9AC655D0DEC4
0661E300811EAF5EB7123C92A5F8A656B4684E2ED3C9B3F98541C5E6FBBC5DBD
23F23FB7C7E6AE15D9CF22EA2F3357F4A161C2317347FD3DC952FE14918CDA8E
9125741E24E14E3E74A2796BDF8606B932D06E9995A1FECAC1191EEE535662D9
2B07F4EBA18FB4CFED5E2D516A4350D296BC197E9B6C1B2706DC46F7F8D829CC
9695A77009E865486E5EE1319968FC0D479941F62F3D55A9D81FBF62CCC99525
D028DCF0F801959BECFDB55D6E64436B8BB1651A07DD65109ACD78FE4437D5EB
2F420607DF22AAC16E8B9A5A05FEF278CCDA700F1189021D601511A73B98D3FD
14D850E349E4549931CBCF83A570E75DF6ABE26DE755A05E8B3AA7D811F402D2
8CFDD0257BE9AC6BF7CB079CEFAB860C7241C3425690CE87022DED7F3A5A05E9
FA2558A082AEDF8E3B035DD4598E9590DDC2A7874BA451D7175D4A90F08ACA40
853D545DFAE177B8DB3E629D2C04D14C4C65A43095F7F0BF8E2E5795683F27D2
649793C85487C0571E75403D111C5EFE83AB5351D0DF6C6C6E5D31AD786B2146
0F0E8C1C2FB569BD40573E459F7196192FAACB98CA898135460B120AFAD7B14E
4A7B135CE4C0818154A0B50ECB2AEEA335B5BDE570753A182B0BAC8AB381658D
F10814D8C2A0F73A06E22F01985BCF3D9493ADCCB3711D7D6290DD4760DA10FD
81DFF6C5C708439E4EEA619DFC4DE6248DB94527953842A891BFA7101FCC2ACE
B0BAC18B87248FEAFEE0CC2BEA26EE8E974027A88C9F96CD5FE57EF13922C88E
534E7E3ECD40951A403428DDCBC56237C10C35F9C4FF74B7425C2118FE177FD6
094EC7065BED4490E8F11832AC295BB1D4ECD9FE817B07AA754B523DC7D796F9
9D4B3778E50274F69BB81ABA1EEC1B49E103C4F99518B09E9F6D1B78E72E7E52
019EE8FC129BBDF9F2B5F42E39023760290E41AF5A67734E96DE61B14A92BE67
83A7FE49E9118C94F79ADB280E5CC38352E8611FC9A7E353E233A79CC8664828
D05A6F4AA8AF7610E5F27F13D8108D4964C7FD5E57B5DF662797B4D500F009C2
ED828B06E5091738C6451EF07BB69EBDB7A49D24D31A31F06EBC65738BA28F0A
C50C8835A568748D569E5A19DC5C6CDBF4F946627EADDC9F2827BAC12E0E45B3
10AD8C11FEBF0AD365B57F677A92DCCC2FDC7D9D38A8E9A887E9C50E6AA899A7
0DC8848152E951C0C3F6AD7B57B980E5D47C78F097A9AC68499A6705A30F015D
9A88C7B5CBD85E47B494565EC8255433C2F1C95528EB4E2FC01066E1C578BC1B
886C07064267C1B2123FA24C9748A2AE1EBBD2FE4DC35FA945B109E02BC9D0CA
8F2F54C2617F52F09F53B087A3E5284B1C41859808C27C7DFCCFA2E355DAA659
FF0ADB3E256D563F1029C4A51B6CBF12528B1CEFE9861E6F6513AF5AF0347DB3
F3A49FE278046EAE7601B1C0BCE46EC223C08E010249256A76D5CDE0830034E3
3D21349215168A4A7FF0CD209841979AC728CF236B074DBCCA06B97E979DC0DF
7EE8E51C4BF6C70BC794C6BBE8A2AF265B20B8EC24B0F3B41C828B96A9FEEC29
F590EE857E0B057BCB8152ABA14FA9FEC58A694C18087396447D853942609B7A
093F085573A7EAD1994EB10B66ED2BB0C75888011D844489AF7B2B19EF904BD6
64C21F135196583E3A50F6D110323B8E205BE83098F89FF38B30D840A9079480
F30EB64479F6B4AAE4015F53DD5994514C074D8D84A638CDAC6597B046DB120F
12EEBF5F137AEA0156823F456E8A209831A15E53350BB3D21682EE46D6807A54
C1269E2705F1D962A2B102BE5627B6AF283BCA4AC2CC66B957FED7FA64E06F90
502CDCEB53080DFF5AE9A2BAC879B6A7E1A6BEADB2CE70ACBC2940E23F8C860E
AD0EC4977851FF7A77DB5CDAFEEC5907086772F4BE1CBA7691480D037E3EB2F1
C355CD20AAC23DBD644FB619C4BADE3C04DBB378346E452755F1EFCF5AA03966
1D654C26A9063ADD11DA1A90627DAAD32BE22402CBA18B54F146201A5AEA365F
F544567CDE0C04E61950E0D8DDB2F5155AFEF59366DDA3EC3B34DF5EBB3885DD
E34D4E955242048519B1ACB17388B0B4F055081C696B4BF20053A03A48C08AFD
C521C001131291CE3041BE02751EDA6746DB68A74221C45C41BBB82586BAD966
01742BEE389A2119B00654B0CD42FD8ECC64EBB58496E641BBC6082F06FB1E57
92373D98E20867A3CC7CF485C4046693A4EE68CB62DB464CBA2E6281741D0F21
6C213768F2831C86F1A51A4D89BD7F3DD5439BB5077ACA26DC2B91714559BC69
D21AC41A0DD01995CAF7E4DD5CD5F0B2C7022D09EF96BEA7BD0C33950AB07985
B3CAA32BDADBC5C2B87A611D37D0B97480AB0E996C004492617BC791C0782886
B1F1CD8AF63797A6C4E05A1B7ACA5DE8F64880D68EA7199964389F7FEC73B233
A87C498ADEC2E15EA1D6371C6A85930805010496557C5F640F538BA322CF91A0
F8245D373A0D84229C222646928BBC646A0E380BA8D7629A38538EC46B44504C
83A06ACA40379F79522113B5E7745FEBF0E3EDF2FE79F7C5252BD20E14DA249E
7541C5DA28BD64C17FFC3B25D50416E699A2829A17CB67F39B241A972469D7FE
263AFC4D9F546D47B3F2BEE28A992CA955A91B6DCCCAA9CC18DA22764149E61E
28F8165E399559FD1B824F47A4F3FFB3D2EF757A43F649622631FF776AC2B2D7
8411D194A831BD1334C50007B0DD54052D3751C27161C663B3A2B1EFE2DAFEEC
4789FCDD601F1382646AB01BBF29395F7A88DD58E4399947862E01F0F2FE55EB
03B905863E36F27B199CB7424D7E05DFF5BC50584365C2B65E34B7F2D40027BB
CB7147DA3BAC6CB26C91399A77FF9E35AE4FE6F25530E3195F396ABA97120075
534BFAA802EC9E68F6D7B270FDFC6BA1D3C86614CFF193385A4BEA0158C2F3C1
51472ABCBFDFF1DB3C1141A9240C096EA124FDA518C35898918933DC6AE94585
98466D63D55120C68CA0582F7BD59C27D94844C8A20706EC351A177B807F4F1A
8DE6FB49F87742C4E83F34D5765040174FC71B033A807E2BBF31295D36E32081
6AFDF638CEFD916EE2B2348CFAE173BA11611FBD554B8671A17294BACFF77C44
53D2D142D08F27D9021BE29C953B5BB0B4959D936BC67EDA97E7F33F9F19CAEA
8FAC8636673A031C4EB004A2D4687ABC812BD26A3A2F94156A2BF5D1D2E7F4EE
B150EA61D6645C606ED7EB660F47F619ED79E9A955413CA98EE1F6DB140367E1
FAEF95BD835A2DA30463BA481FEBA71A4AF9D00298860FC2710DC1D4DC137A2D
86B741C2F3100DB2B71896ADD14E0260A8862606F21754979D9BDCB445B3BD32
290CA83FEF10D74B0888ACAB75514A63ECE73E9CCC43761B0A7EAF8BB186FE7D
32921D212D1970538E58DA5D766977BA70143E5B3A3F67E464D8057C5E41F045
DC25F83A0CE8D463E40B1BA3088306C67A5BABE4841FC1C74459066DD563E529
BEEE655F3A84DB73AB0D68A4407A2D0AC3ADF3C1EE80584A11BFDB6F15CF9473
40515EDA14ACA0FC1CF748E182B16BFB2320D9F200728EBB9EE6AD40272B6762
CAF2BC17CA7C1B67120D76ED303B79FD9CF1F940275E0D1131AE42E17CE80628
86716A8842E31989BA7033F5095DD18464CF9B48E649F55E6FABCB96948C6A0F
572235951FCCE66D2085C3D9D0219E0FBA88AD3E0E74B0B2541C46001FAE545B
67EF5EE7D15FADED7F802663E34B6F638AFD2C4D631B83E2FD13AACCA5D4262D
F004327F39B363EC4C6A68505C3A9A65F3D4D87E7F5FCC88D74D13A6406A9A44
53DA0201EEAA4FC17E8510C62D5B482E3BB144AE3A58ED257F35A778E6D21A28
446E9D710D0901719F072158DFF0F1974B69B47BA85E8E0009F5C0B9BF44653B
7F2DCCC9A636456EC050B6493683FF775C38EA0EB5C3A0B2632D12E3C3328115
F70A459B4BAE63A362B738306CA1BDFC61C38C4DB0F40E6DF7BA14F6797F715D
2CD07CC7F0CD1A3820386F4492D8CFF24B8C3D79DDF72A642D76575088A7E617
BEA1396FC11092C05EB549359F46DDD69195EB83733A2989B927635B6E700DE1
CBF93DC7E933DEC5A0694491A374E754FDCEBE0316698FA09AC4D329A3E706B0
E94FE1C9BB94FA0CA7AD35EDE78340CD099BC719686B47A59FC42C7ECA809E13
A8435974DFDE0AA2274A4A160B6CA4495DA90FBA39397439809E1C13708A4D61
4129FB85095C6C9CABFF9C3B6295E8405429B9938704FFA3B60B359868DDA591
DAD76529BAB81863A9F1813184D7C5C6C5D0CECEC517CDC40A8EA2177F0A3E1C
D9BAC598C2DBA13809562C0596DCB68532C7AAB6412BC0FF9BE844A4226859D7
CC0489E1CC5E68BA942BC45B8D618CF32A0EE25F5A4C1678FBCD55AFD5FB3054
BE40DD14AA95D92709D4F4E9364FBE938A3469217C7A5045B0A8C1720D404BBA
ED5D3506C617333A701205B18496C3CBAF8C8CFA1E437D21D5B454D9F35F9036
DF22AD1EE2C6C25D34999AA82C11C6414FCA2E34BCE0707AEF8529F3324B501F
13C8913E29245F95BDD01E769C0525630B7C1CBCE1AD69AE3E77BB5F7F16B836
F78FFC5CA0CEA8581276DA33700E5142469902F8290CB3474C704F0A9F1062B1
BD80DD1E287FBC583C761A6C47D41A98DA2964D930F085E78560D880D0D94727
A72A85DAC516958233F0C4DDC95148DBE5D08BC2022BD3D0EDE19060E60223D6
B461AF814DB0A4BF74809DC78D2A3BE52F182633C428423544442BD71A04D406
921CC06280A90A8815CC806FE291F00CD0D0B213444AE4B393476A2B28561B60
E4392DE44B1AB8169FB98B249B7368367E682EEE5D840875B6F20E0B327D65D2
C4F4073E9F2E58DFA6E8053AEAF4EFC4C2A6A1BFD4916FF8E48B64DA1EDFC7DB
FD4B2F079D58C79A5E916C545E00C9D44C73AB2262D4759F783E420378B33A0B
0E22A0791E601AA00726E56420A4E88E501CE4A2DAA7F5DFB80438838036E602
917A55CA15AD2DA84B54BE5847FA21D1D3159784008721738BFC2A4E21F999A3
AC502330DA4B6B4AB279B17798056AD722F22E79E9C080048EAC4465DFE97B6E
27C28D36BFC87739DA915F197B6733860AB29A0D095212A89EA502ED9170D48C
CB749E7907E8782B0FE26C906F582E4FC0F6B6CFC5598499049240BEC1D9B822
78A23AD9085C323F02FB89CF55C7109808773D4071FF16FD56D046C9FFB9DD75
5EBC58CFB91B728A1AA96CAC445CF5BDD64743F6D290CC38802350649DDBBD73
3E26A426A373218F5012A8BEEA6601F8B75E08375C398D5C76CE118B91FB77B3
8D86AF0AFA9397B12DF0ACCA4B5CADBB00AE619172CE7DD9B8A55BF9DF675F10
0D6D5D0732ABB192896545871018FC8FDAC850DDD7C023ECC19C8AD999CB0D58
F49A8528754908649D00B0516E1EB3108C53E594D9334A635901E1BCEF735432
20C69F56D99421781E256542BD3B536E7FD2431983AAC4923D10D4F05912DAA0
4696E57FA37CD5C4E31E06A5BBD63669A4000D74645D90C297D4356D041A8181
F5573880E40D4C5E859DCB07C6824B28BDF85F487E0EE633E64E970AB7C62DED
FC7CC1B6D059FDD40B402A0F1A971C08E4C2A4BFB96407DF9EFAB685D3C71462
355F2C70C63FE12D99A9CEAB6F2357F7571D97AAEE846AF37470251708349082
C568B89E1EA7DEAB0F9B86024FD583C84C9579AC2B5AE47EFA81971F9F5293C0
957BC8CA98EC614D06F16446DECE3F56CA49C1BE6D1B3324B190EBCEED945BB6
11426553E8C37A91BEE6CD7877FA0496313EE2104879B1802744C490002D7CDC
6DCB67B7FAB8AEB1D7756B9A4FD692725FCF0FFE7CAA7F938661C5FB8F0A8B46
45AC9663D880CA509A123FF0A365DD4A01DC8852860E6FD3A4396D153C6E385D
8C3F8AC7759D6D3CA76D4D5F8ED501200147757A4A6304B07108C50EFF8B5232
510AE7E199A33D57133C11F6E658797E861EE6F645C7441F748F65C4737B5CB2
697CA65ED85C08D9695FE8252ACD479F34C0AC568B2AE7C7202212CD6430EBDB
9214BF6014446FB6B46B0F04626CCAD5802CC41FC4947AAA2E98AA0C2F779F32
517FDE22B80EB178C890191C3185B8696C2463886DA7006EB5C04CBB3DE152A5
76221CC144F0788CB6B96722D47D15D4A20812B57210D97162D1AB2B327A6E39
F345315D639EB92AFF3D1539BE01D2FAF27A3DDB6690F669C10FDBEFB7703AA3
26A670EFCA205F07081FA99628846315B8B284CA6BE5691491B1613606CA931A
93AE63182C0127C31328EA9654E5232901A420C36672E7FD2B0216012D0FF47E
5BC5BE19FDF1BF037370E417E92F341756516177B5714C67DD9FDBB96F4312D5
2A6C07385E34EBFA3779CEA87A53A7C41CF377A0040D319D2FB060DC16C204FF
0337D58A928D840CC5EED57BB07237D8CEB316B4EFB7FA8372553C12FB78853C
579879C5916250E75CE5894C919BE1FA278AD38DEA1CF59F7F2FEA8E680377DF
8547EA41E0F4760B80FF36668EC5CEC22A05C6B7407A97122A14EF5DB071E9FD
953ED557D65F835F2DA5D0DED0072983E3B8D62568558E9611A498EFF3D6B032
782DF20308190A45BFD90658E6B7BFC6A78A018949B6D89B319A2DEB8F4BFE17
E1C21B5B2AF2728AD767482445600B06F24ED25D3CBD7F8BC68EAFB98C6E75AD
C29D879CFA26D9FBC03250B6F76B9C26AD4B43C8DA00ACA0D2AD0F73894E7DD4
199644C94BD2EB3DFEE3257C1EB26D524009E6C4D46529B0E498FB494407D965
5BCF5B134255FE47C4C210A73C333AB32412BEA82989E764F7E5DAD469090E76
913EE58960DBBA0DBA9248E5CDBEC1CAF94F5108891084EBEB2FA33D3D1B88C3
D53BCFC905E4E4555ECD87CE1B0A1D9F05CE28A72AEC188F620FDC21DED820DD
CF5A3834FC39E09E7817AAB0CC58D03DDF92059680D3B07EDF200969019083D5
4074279A35F1E152FB49300289672AB711032FA3694AA9B3D068B037E23E3EBC
46DD2E3D477F9E6B19ED14569A2B3A2264F0473BEE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /acute put
dup 39 /quoteright put
dup 45 /hyphen put
dup 49 /one put
dup 51 /three put
dup 58 /colon put
dup 67 /C put
dup 70 /F put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD50D9C98DD94332DB4C7155F8A52013F9ECB7CCE3CFB3E667C57B022A0A753
A45E41A9D8229D5198031ABA3DAAC142AEA5FAB6694A6433629E15AE45A67FDA
34DE10D995ABCAF45FBB3B6B73E80D05F4C51F8C29D4B0F67C8A86432A6C5E86
F0126AB25A5CA2875B48C61CB8112A4CF9AA08F8B0157396CF63CBECDB8867CC
AC10F060630C9BFBAD84B1FF01C814878F0C177F552BDC9BB181B14581C6E968
DAAAB2896FCFB745795C4D2C87CC15BAA041EF80C5BDC12EC1F5786BB41A5A21
073EE0A49723BBCE7DA340F1C454FA5D74812C7425D1EE1E393BBA647136A38E
1DA4A94728957578C7D38CB7BA46AB7D9B9499B894F2E9E40245BE1D7DC6F824
BC9477CBC0F708F0CE573D3F01E65DAAE1DF4E6B295D72ADFC1B2DC969ADC4A7
29B58F3133DBEA5CD1A74475F36D7ABCC03EE7E2A10D1FE691EEBC3E6885BB72
A570030B0854D6E51FB67798552D9960FE820FFD982A9179E5056B3C085580A0
082D1D73E79869B92E19E91E073C92BA72B9139627CB442A5D61F8B2457CB4A9
374A70E9629E2F5899E98544669D49691BF3DA4697DDAE7C674BCA1DA029B62D
14BB3CBEF2EF0BE5730920EF10B660FAE6DB545806ED3373D1986CACB83CB656
6BCAE7E0722C076B98A02665CCB6E27DB388D3BDC7D98C11C3B919A562A4C282
793E6FC1A4AD017F35CCFF41BE917BECA6A744B5E98E1C1F16C89792426673E2
C001BAAEAA48530546225E08E0E49FB80798D137D247376F8997DC7039D6DA29
A92C362D1C52F56FD4F160DB57E4015CBD6DC0AEB498FF959D9F8DEF38049FDF
4131EDB302F00FB60B0B69D72F80110801576C4227630F1DB2D387351409CC63
62535F99A965BDFA85026B5E773C90E3C5BF3FEF6FC0952128AAD22A35764FFF
1BADE172FE191E2280CBA23A0A6599D822B2F793745AE83A72268A3359AD7444
78D406947F546B7982088C9BF865CB1C5B123E79C6756A2C1EC8333781A86215
8A00804CA318C71D983247C751C8FE7F4893F5F098219D2A452259FB76006968
18D3D3CDC71BC492525126AAA93F9DDBAB432A9A473B2FFC54A4351338B147D8
0D91AF9003FADC1E3F8F9BBF9F6B91810C0D041935DFB4AB4B9A75FC71E730B6
062759954302D64C0151FE6552C4F11A8386AD05554513DFDB787D7472CC0EA4
663AFA647B887BBED57607E6050CC2C925ABC869548691D5EABBE7CD9D633C1E
B64593269B074CF77479FD3D944FB31F6188DEDB3D464DBCB64B9DA3E0B375B7
2CB59B52D19791ADE5A18E7232A66AC3FF0124F781856CBADD56D21A5C6AF793
8C402D9E800E226F01D4D77DBC9D209AAB39CF7A01DEEB8615B3E618451C5950
87F2406D6E4B4A19BC80F638158D16D58F82154C757E29AE3671D6C171524782
AD3E721A9816D8E28B0DBA7A458DDD01D7DDE583D5FD3AE3CD8F6B5CF7CB0AA5
4E2548C2DE3413519D2E6E76E4CA60812F71F0CD563164C3C7C1583E5C3AAA00
A0DBDCDE369E1E4949649254FB56C61358997D7453E3139B4CFCC98E621A0413
1892665B8526682DFC5BAE936CF17B361295D2F9A595BFF01FB5C81D72067BD2
2F312A6C60DDAE7C5D258D69B4C240BC30A1FC996881BC4E149EAE15688DA9A7
F18262EBAF705DCB8724D916FFA656BB89F3F382E2EC3C1E177FDFE9B7482EBF
CD481F0C8E8B03DD3E877E3C31C65A3461C290EA7FD097CB590646B1694C804E
30A139C77C2B9141BB71054B0E9EB6B881C8D44F15EC39E2A86CB88A1ED00E65
A41AD236C3EDCECB1F53A60BA64A4F0E834141C4A1F25426CB8DF07FE9672301
AEF1FAA17C5B39F4A2B675F53B0FB7CB708D824F8CABF9C0130ECC681BF942F7
D8365487593C3369FF5A69F942B80864B8DDA706523E1CB1CFD8FBDA82FC2990
0FA761FE1D9393E011FC20B2E39C1683D9248772098FA014810BB16DAC940618
3C5B9DC53F5ED038D2ABE53A2E9FD8278723D30F2A0899387658D1BF8755D951
1F7D792CC1C0660C98F41399E5B8DA9F537DBE0F57EB5B6612AE23952DBD93FA
4CD4E4C4EA5A73332FCAF6E77D6826B68BFBF3F265B1D104ADF966D4A2AEA7F2
AB180136CE0DA46796FA5FF2C0F137848BEA1E360A32C5286F22AF9F80812EAB
8C212DDB83267D080F430102C85866161743E233D706A6A199A0E67683E80A26
BF379AA384C5736C6C4D6A928B8AF46458A37A02FD81F7EF00C20995D3BC3485
A3A2199D1ED1CAAF2DA725EF1460B1CF9773DF4D22A193D8B8B2376827211420
9944CE5EB8ED8F9C67E7F125B5BC68A5B794C12E35B0DBDFA72719476D3EBC67
268ABA6A7F67045D6D3D67D2D84D3669F9744472E57D27A500F8C730F33D5E70
DF90D561CAABF99F8666C2532236B0E6C0C23BBA46C386646723159FC99B1E28
E49891AAC5B183F1C6E611C07ADA71BD02466D324E540EA8C1DD91A68936FFBF
97C97A27B8411B01049D6C9FAA13FD40C3A0E0B3839EC7A0DF4BAA1FDFC81995
E82C2B2C731B19E45A917AE171379D914D5B99403AE05863F7A7C308BFBB7890
3584C20874977CAD4324D3169746C48CAA2941441CBA55FF16AC36BAEBCA947B
3E76288CFC5E34B3996FDA73F9CAE853ECA33588D82FF2EEB0DEE75F4847E789
FA0DE0EDA13B6089023AD8E73A1604342F9F892ECD0BD21AB3997ADC43FDA578
E00CCA7D6215F0E0947D1F83B7530116C8920C5DFF5BB14C8FC2937B683723D9
32D54B8519D033DF33D3CDA3962228B5F8AE78308C12A08433960BC65C402B71
66EFD69804A95E7C27FAFA8943B3D52800F2A992CB251D3CF5D226E87A18B690
70CBEB00E08ECC85F2BCF616D612A8B99F8B1B8B7C99231AADA2661B47AAFBD3
29C263D25DCCEC13CA050385DC4B71AFF493CCB89D9326AC6F9C9DD05756511B
06FC83AE03AFC19CBF1A99760E0E16B3D0B41E0CBFFA2CBCB862D0A3EDD5E6EE
C88C8E46AE9BC294D1647D089471DCD368C966575D797E2DD56C7CC8E7E42BBF
60588D53F8DE07EC87DD7573A93E883C108A0134EA25ABF6D92F7D2A839D252C
3EC5818A4786CAEBFEE01D833937AE8DAC584C0416F12D2D000F01459311EAC8
1F5B34BB3FAD972BE0691CDAF45BB4C720EFE91537B453C6A0DDD84D6C9E6FF1
CD17AA6E1CDD3EA41CAC0E38FF2F876B779DC3E8C5F43EDD3FCB2F0CFA6199D9
64C7BF5349D331279D5FD06320B35A6B61EC73DFEE3A681B4BFDCD917B1D7FEB
9EC40687254177DA5265B768E50242C3276A0F6F08242456FD0B982A46AF6C00
DC7C97791BA66FFAF5C71BFA7FC8E2BD8C36FCCE813F2030F5F007E693C1BC59
04C3D791016C451927EA2A2360DE97779A91E7C262B53E157242C261B2CD18FB
44405926C103484D6272B23D28496EAC7CB340E0630C11005EADDA91BE3F1E52
B3A0EC965CF38B3EAC55A5A15EDA089399E9E9BE9776524C1448EAAFFD28B506
A2C31E7FD53BD4FB4618353D2B23954D4BF6F2C210AA4AC0D8B2643548FE9186
1BA6211B1DE40C45413F82C198B127B404048E73F4D42B41D57E07E147C9BAA3
04E8A2812395969AC033AFDCF2D5989FD9D8D44FFF299DD2A2E4D3B9E76488F7
A8AA619F10B2F49D9134106B21B1FEBE1AF42BA582968548D1C5642ED56C08CA
A0BDBBEEA526BB4B30A999934F0668A693B7E4FAB27E9F5EF854EC2BD569B0C3
D4BA8B78FF461531CE3F8EF8725367B5CA8CFF4FE7BADC86536DD241893B4FDC
53590138F574C2E165F1E246F438672FC2E7FE0EABC1D83B986E60E4FAA92CE7
A2EFA23E2E56AEF872C50D830A0051E7FA52A9CFB26989926FC06001C3EF1704
E65D87BE3A7131CEF4FB414F97E5795CF463E6BDBEC6A123C2F52E8692578DF2
622440D0404031DF17F5471152DB4DE04936346C7590787E2679DD3F355C4D30
7954BCDE90AA2C156F5A2DCB89AFE3D71B5634F1543F0F5A2749CB54F53F2AD7
FF8840205A36A01928CBB7840280E2B07ECF6840BD1EBE31D5B77E98C1C6B062
F375D987BC1084FDA994C7FB5A54F498A649BE77E77D31E4B55EF6967A8493A3
C10F6BE406C47922C9A639181E31A921B675E494EAC2E380DA75905EBA5FCB42
3C7FDB8A93B563703CCA9FA04367E0AAC7F4DB4541B0A4551BF59CD332ED15E3
F124B091437DF19171A677E3C9007C9571BD104B11F6BDD6EC13210C75C14D91
9A9FF7D47CEE2424ECB185A7EF35D69B3EB4A484F27399EF868411BBD984DCA7
04A568F4B912BBA8E95814211DB88E54C0DA789CF43C167E5F076A3831E0F497
F4EE32FE12A354E8396D8E18E567F334317509DD0EBECBBC5733B5A3B11328AB
22C5ADD53E1979D61F317F45B43A0CF0D6C9777B20E1D14BB586E746A7464B8E
4B53E2D76DA456C4C166AFFFD9BFEAC7FA0E8BAB631FC59F64D8098AD9E8B9ED
F296140D43DC027555230044A0FCBA8A4487A98607F94FC229D31428FCAB5BFE
65FACD4675A7079BC8FBF280540CB192AB8E7578B616F908AA3ACCAFB8038ACC
2F87D6AC31B672023462654857E308EF2EA3FBEE1B88CAEF2D8C689414559460
426F092BE8C30FD0422E5F17889C92C6A438013716AB2A3841101FAA5DD38FCF
CE25129B6BF8D07C05504B9B6A89CBA54B96C650A1D7BFBC67DFB46E473F0E66
D5B583D6A465BD29E6D7AE57AD660006F452F0352C0247F0A67756E77FA4DFD5
B9DDC0D5843797A1014F6681944FD427CDB373A27D14449E1CF3223617232A81
65BBE28DA3B8C7638F27C2494E52DCB87DAE0975329109C6A52CEDEC123FACA1
724995215F314C55F57EB46793EFE72FFB072381130508919C41564EB262008F
EF62E348A5A023C96E0CE7D4629A2E843FA2B472E79AB7E3FF65B1BD934F265C
7AB137305CB9249659BBB5CAF17B7449EBB320FEC3BE22348705703BAC042C1D
422395D67AF5E41354F9DAE41A0A9977E88971C070FB383DED125851E20A7C98
A2F7FED9517C45EACE00E6936DA8FC987830E13AF01AB0EA6B0BB1F70F6D2465
4DFF892508E9798E5E98F3C5F3DDD2F2456516C9433DEC2D0383B789254F9888
C013B6B0569174CDB8350FB30A8578110872D26B04D25343291A43657EEEBEFD
6A1F3160C0E40B5259E7208DAFE9B4154D43A509669014E5A8FDB8E38E0F09E4
2E9374D74529871ED97992B6C9A847D29FECC44D3E7273719C10CAE007ECEF21
8BF51EAB85E0842F822466AB945217CCA991D1A9EE5DA082E4972E52406DD2EA
AE572A785CC6FAAAB4A28C0146A9B45EAA69AE3538A3F3EBF8872EBF3CD22872
C70B406F617951BD6C1F6C3317BE036BCFBF9BC5039CA8A788AAF6F33864FD1B
67B08F761306F48608F839E3C5E1BBF250109E01220D710CF873EFE498D5A123
1578B88F406D696115290A7D9D47254EA66416CEA4BCE93FD1888FD454D1ED72
859E9AC6959E9A4035BCBDE24481D690E11964FA4B9BDD5E4E44EB521083A813
5977DE9D6AD19103CBD2277376D5C33DAC11771434CC1407B7F94837A6FCE739
D0BF26435673C111A5D8815A7E52E05CD4306B5B9F8204EEE5CDA3AE6063172B
4F8CF32269275F6A26D4E659C80E8053F86E53BF6349A8C2D961808DC421DEA5
0DEB3ED5CB282B125CD7E04466CD8A4C57116BF35472C4EA8F96C4DE30F3E8E2
E292D184A578E277CD62CFDE926994D036E87D9D0242C4F9E81E902A339788DD
728C7736C1176519DBB4146ED4D185DFDB714B1387A979CFFF9B1F7D42BB5D3C
F54C5B3D9954C702B429FD6682B9792DA8AA5B849B959804F513E145B4C72E40
8327CB5E128F198F933801F8B20FFCD443F3AC35EFC6E6B394B95CA3E45D9F0F
5C6D745CB540D4AC9F555B386CB490
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (sans-coordonnee.dvi)
@start /Fa 155[47 39 39 48 8[75 86 2[53 56 69 72 58 1[73
88 62 77 50 40 76 71 58 67 75 65 69 68 6[25 58[{}26 90.9091
/CMMI10 rf /Fb 222[91 27[45 4[71{}3 90.9091 /CMSY10 rf
/Fc 134[48 48 1[48 51 35 36 36 48 51 45 51 76 25 2[25
51 45 28 40 51 40 1[45 2[45 25 1[25 7[51 67 71 62 71
2[57 1[47 4[62 69 66 3[43 1[71 1[25 25 3[45 45 45 45
45 45 2[25 30 25 71 3[25 19[45 45 5[51 12[{}52 90.9091
/CMR10 rf /Fd 135[55 2[58 2[43 2[52 5[29 2[32 48 1[46
1[51 10[79 16[69 5[49 4[29 52 52 52 52 52 52 52 52 52
52 48[{}23 90.9091 /CMBX10 rf /Fe 241[42 14[{}1 83.022
/CMSY10 rf /Ff 135[62 1[62 65 46 46 46 1[65 59 65 1[33
2[33 65 2[52 65 52 1[59 26[76 2[85 8[33 6[59 1[59 3[39
5[33 19[59 19[{}24 119.552 /CMR12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-246 -482 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -246 -482 a -246 -482 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -482 a -246
-482 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -246 -482 a -246 -482 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -482 a 0 TeXcolorgray
0 TeXcolorgray 276 -90 a Ff(Chapitre)37 b(1)i(-)g(F)-10
b(euille)38 b(d'exercices)g(n)1960 -133 y Fe(\016)2005
-90 y Ff(3)h(:)f(op)m(\023)-55 b(erations)36 b(sur)j(les)f(v)m(ecteurs)
p 209 -198 3343 4 v 209 -40 4 160 v 3548 -40 V 209 -38
3343 4 v -246 350 a Fd(Exercice)e(1)f(:)p -246 365 536
4 v -246 510 a Fc(Dans)29 b(c)m(hacun)h(des)e(cas)i(suiv)-5
b(an)m(ts,)29 b(donner)f(le)i(r)m(\023)-43 b(esultat)30
b(de)f(la)h(somme)f(des)g(v)m(ecteurs)g(sous)g(la)h(forme)e(d'un)g
(seul)h(v)m(ecteur)h(:)p 0 TeXcolorgray -246 631 a Fb(\005)p
0 TeXcolorgray -155 569 a(\000)-21 b(!)-155 631 y Fa(AE)26
b Fc(+)97 569 y Fb(\000)-45 b(\000)h(!)97 631 y Fa(E)5
b(G)16 b Fc(;)p 0 TeXcolorgray -246 784 a Fb(\005)p 0
TeXcolorgray -155 722 a(\000)-44 b(\000)g(!)-155 784
y Fa(B)5 b(F)33 b Fc(+)101 722 y Fb(\000)-46 b(\000)h(!)101
784 y Fa(AB)20 b Fc(;)p 0 TeXcolorgray 1060 631 a Fb(\005)p
0 TeXcolorgray 46 w(\000)1222 569 y(\000)-31 b(!)1222
631 y Fa(R)q(S)25 b Fc(+)1464 569 y Fb(\000)-27 b(!)1464
631 y Fa(R)q(T)27 b Fc(;)p 0 TeXcolorgray 1060 784 a
Fb(\005)p 0 TeXcolorgray 1151 722 a(\000)-45 b(\000)f(!)1151
784 y Fa(AB)25 b Fc(+)1404 722 y Fb(\000)-46 b(\000)h(!)1404
784 y Fa(B)5 b(A)15 b Fc(;)p 0 TeXcolorgray 2366 637
a Fb(\005)p 0 TeXcolorgray 2457 574 a(\000)-32 b(\000)h(!)2457
637 y Fa(C)7 b(M)30 b Fb(\000)2738 574 y(\000)-39 b(\000)f(!)2738
637 y Fa(C)7 b(N)24 b Fc(;)p 0 TeXcolorgray 2366 789
a Fb(\005)p 0 TeXcolorgray 2457 727 a(\000)-43 b(\000)f(!)2457
789 y Fa(E)5 b(B)25 b Fc(+)2714 727 y Fb(\000)-44 b(\000)g(!)2714
789 y Fa(B)5 b(P)33 b Fc(+)2970 727 y Fb(\000)-29 b(!)2970
789 y Fa(P)13 b(L)p Fc(.)-246 1036 y Fd(Exercice)36 b(2)f(:)p
-246 1051 V -246 1196 a Fc(Les)c(segmen)m(ts)g([)p Fa(K)7
b(L)p Fc(])30 b(et)i([)p Fa(R)q(J)9 b Fc(])30 b(on)m(t)h(le)g(m)m(^)-43
b(eme)32 b(milieu)f Fa(I)7 b Fc(.)-246 1309 y(P)m(our)31
b(c)m(haque)g(prop)s(osition,)f(dire)g(si)g(elle)i(est)f(vraie)g(ou)f
(fausse)g(ou)h(si)f(on)g(ne)g(p)s(eut)g(pas)g(sa)m(v)m(oir.)p
0 TeXcolorgray -246 1447 a Fb(\005)p 0 TeXcolorgray 46
w Fa(R)q(L)25 b Fc(=)g Fa(K)7 b(J)24 b Fc(;)p 0 TeXcolorgray
-246 1600 a Fb(\005)p 0 TeXcolorgray -155 1538 a(\000)-30
b(!)-155 1600 y Fa(R)q(L)25 b Fc(=)98 1538 y Fb(\000)-45
b(\000)g(!)98 1600 y Fa(K)7 b(J)24 b Fc(;)p 0 TeXcolorgray
-246 1744 a Fb(\005)p 0 TeXcolorgray 46 w Fa(R)q(J)34
b Fc(=)25 b Fa(K)7 b(L)15 b Fc(;)p 0 TeXcolorgray -246
1897 a Fb(\005)p 0 TeXcolorgray -155 1835 a(\000)-41
b(!)-155 1897 y Fa(LJ)35 b Fc(=)87 1835 y Fb(\000)-39
b(\000)f(!)87 1897 y Fa(K)7 b(R)16 b Fc(;)p 0 TeXcolorgray
1273 1430 a Fb(\005)p 0 TeXcolorgray 46 w Fa(R)31 b Fc(est)g(l'image)h
(de)e Fa(L)g Fc(par)g(la)h(translation)g(de)g(v)m(ecteur)3295
1368 y Fb(\000)-45 b(\000)g(!)3295 1430 y Fa(K)7 b(J)24
b Fc(;)p 0 TeXcolorgray 1273 1583 a Fb(\005)p 0 TeXcolorgray
1364 1521 a(\000)-40 b(\000)g(!)1364 1583 y Fa(R)q(K)26
b Fc(+)1628 1521 y Fb(\000)-55 b(!)1628 1583 y Fa(J)9
b(I)33 b Fc(=)1856 1521 y Fb(\000)-31 b(!)1856 1583 y
Fa(I)7 b(K)22 b Fc(;)p 0 TeXcolorgray 1273 1760 a Fb(\005)p
0 TeXcolorgray 1364 1698 a(\000)-45 b(!)1364 1760 y Fa(R)q(I)32
b Fc(=)1612 1699 y(1)p 1612 1739 46 4 v 1612 1823 a(2)1667
1698 y Fb(\000)-43 b(\000)f(!)1667 1760 y Fa(K)7 b(L)15
b Fc(;)p 0 TeXcolorgray 1273 1958 a Fb(\005)p 0 TeXcolorgray
1364 1896 a(\000)-44 b(\000)g(!)1364 1958 y Fa(LK)32
b Fc(=)25 b Fb(\000)p Fc(2)1747 1896 y Fb(\000)-31 b(!)1747
1958 y Fa(K)7 b(I)g Fc(.)-246 2181 y Fd(Exercice)36 b(3)f(:)p
-246 2196 536 4 v -246 2341 a Fa(AB)5 b(C)i(D)33 b Fc(est)e(un)e
(parall)m(\023)-43 b(elogramme.)33 b(Calculer)e(:)1421
2492 y Fb(\000)-42 b(\000)g(!)1421 2554 y Fa(C)7 b(D)22
b Fc(+)1681 2492 y Fb(\000)-46 b(\000)h(!)1681 2554 y
Fa(AB)25 b Fc(+)1934 2492 y Fb(\000)-44 b(\000)h(!)1934
2554 y Fa(D)s(A)20 b Fc(+)2191 2492 y Fb(\000)-42 b(\000)g(!)2191
2554 y Fa(D)s(C)-246 2758 y Fc(Quelle)31 b(remarque)f(p)s(eut-on)g
(faire)16 b(?)-246 2984 y Fd(Exercice)36 b(4)f(:)p -246
2999 V -246 3144 a Fc(On)30 b(donne)g(la)h(\014gure)e(ci-dessous)i(:)
837 4781 y @beginspecial 14 @llx 14 @lly 327 @urx 242
@ury 2504 @rwi @setspecial
%%BeginDocument: exo-4.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: GIMP PostScript file plugin V 1,17 by Peter Kirchgessner
%%Title: exo-4.eps
%%CreationDate: Tue Mar 29 21:54:40 2016
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 14 14 327 242
%%EndComments
%%BeginProlog
% Use own dictionary to avoid conflicts
10 dict begin
%%EndProlog
%%Page: 1 1
% Translate for offset
14.173228346456694 14.173228346456694 translate
% Translate to begin of first scanline
0 227.28172474074503 translate
312.79366078181749 -227.28172474074503 scale
% Image geometry
417 303 8
% Transformation matrix
[ 417 0 0 303 0 0 ]
% Strings to hold RGB-samples per scanline
/rstr 417 string def
/gstr 417 string def
/bstr 417 string def
{currentfile /ASCII85Decode filter /RunLengthDecode filter rstr readstring pop}
{currentfile /ASCII85Decode filter /RunLengthDecode filter gstr readstring pop}
{currentfile /ASCII85Decode filter /RunLengthDecode filter bstr readstring pop}
true 3
%%BeginData:        18896 ASCII Bytes
colorimage
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcE4Z"TJH"rqh9HYQ'+~>
JcE4Z"TJH"rqh9HYQ'+~>
JcE4Z"TJH"rqh9HYQ'+~>
JcE4Z"TJAppA0@?YQ'+~>
JcE4Z"TJAppA0@?YQ'+~>
JcE4Z"TJAppA0@?YQ'+~>
JcE:\s8E8uQVU7mkPbC2s0DZT~>
JcE:\s8E8uQVU7mkPbC2s0DZT~>
JcE:\s8E8uQVU7mkPbC2s0DZT~>
JcE:\$2j[L?L7?=@/KqSs0DZT~>
JcE:\$2j[L?L7?=@/KqSs0DZT~>
JcE:\$2j[L?L7?=@/KqSs0DZT~>
JcE:\$2ra!g%kL<n,!$7s0DZT~>
JcE:\$2ra!g%kL<n,!$7s0DZT~>
JcE:\$2ra!g%kL<n,!$7s0DZT~>
JcE:\"TGMfq>>gDXoEn~>
JcE:\"TGMfq>>gDXoEn~>
JcE:\"TGMfq>>gDXoEn~>
JcERdrr*6(r;QWmr-4(trIP!Ns*t~>
JcEUes8E*"rr2os"oeCDM>mI)s/l<O~>
JcEUes8EE+rqu]krr;h>M>mI)s/l<O~>
JcERdrr*0&pAXa]r`Z=Qs/Z0M~>
JcEUes8E?)rr)lrrquUrWe(2Ns*t~>
JcEUes8E?)rV63YrVuXrWe(2Ns*t~>
JcEUes8E?)rqZ!]qtp@_]Rg*`s*t~>
JcEOc$3'u)rqcTmqa\;Ms/Z0M~>
JcERd$NC#'s8Vons7o0tJcDeNJ,~>
JcEUes83?+q:9iZrVQIlT`+iFG(K[ss*t~>
JcERd%fZG*m_/Ams8,fhrVbPqJcDqRJ,~>
JcERd%fQ2#p@.qTs8#`grVbPqJcDqRJ,~>
JcEUe&,Z5'p9Yd^rqu_h1n1+%\Ujdas*t~>
JcERd%fZD)fqA!:s88TJS"DpUJcDqRJ,~>
JcERd%fQ(ulL"K@rr&QJS"DpUJcDqRJ,~>
JcEUe&,c4upRr57p[[tMc^U?[r.4mOs*t~>
JcEUe&,lD%qqS"<s8Munc^UK_r.4mOs*t~>
JcEUe&,lG$q==4VpA4[ae#98'r.4mOs*t~>
JcEUe#6";ipRMr6r;Qlol2CR3s0)HQ~>
JcEUerr*?+h4aB;qtB^Xr;Z`oJcDqRJ,~>
JcEUe&,>hemHjKAk2>M%p$V,DrIP!Ps*t~>
JcE[gs8EPbS=#XT%ssM!QIu!1q#:8Ds0)HQ~>
JcE[gs8EGpgYC>uVpa>Vh"psHrr.KKYQ'+~>
JcE[gs8EQ&p\=@Rq"+4Yo_n[ZoD\`?s0)HQ~>
JcE[gs8<Ct-m'cO'gXu>3O8AYr.4mMs*t~>
JcE[gs8<DK]=tkjYctFBXR5iZqLS[Ks*t~>
JcE[gs8<AVlga!(qW$u9h=gaFJcDhOJ,~>
JcE[g&,Z>(p\"Hu&ut$^p\t3knq$hCs*t~>
JcE[g%f?5$oC_\'V=+?_r;$'aJcDhOJ,~>
JcE[g%f?5(s82`bn,E7`p&=LTJcDhOJ,~>
JcEUe$2sYtrhKt6rqubHs/H$K~>
JcEUes8N&s"Q6$ArVhBJW;hA~>
JcEOc#PRoco)8FbrIP!Js*t~>
JcERds8E3"UC4O-rIP!Is*t~>
JcEUe$2jYurSaR@rr;tKs/H$K~>
JcEOc"8VW\o`"jjq18RFs*t~>
JcERd#QF]$ZQ7*`r.4mHs*t~>
JcEUe$2jZ!rSX17rr;tKs/H$K~>
JcEUe$2jc!o'P',rr2\Ds/H$K~>
JcERds7cctmATUSqgndGs*t~>
JcEUerr*-!q<@hUs8ITLWW.J~>
JcEUe$2aYunGVqKq>^;Bs/H$K~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcG6>!ri)rJcC<$o`'F~>
JcG6>!ri)rJcC<$o`'F~>
JcG6>!ri)rJcC<$o`'F~>
JcG6>!rVlnJcC<$o`'F~>
JcG6>!rVlnJcC<$o`'F~>
JcG6>!rVlnJcC<$o`'F~>
JcGKE$iTo"s8W)lp>,Q?rIP!"s7ZJC~>
JcGBB$NC#'rl&gPs8W)sJcC<$q#>j~>
JcG<@s8E)XH.RWIJcGBBJ,~>
JcGKE$3'o&rr)lor9XE6s+14Bs*t~>
JcGKErr*9)rqcS`,3Ae#q=oO@JcGNFJ,~>
JcG<@s8E)F4Lp%CJcGBBJ,~>
JcGEC#QF]"o^MP@qYp3hp4<6ps7lVE~>
JcGKE$N9l!r;HWoQm:_mrr.KKJcGNFJ,~>
JcGEC!<2ur"THM,\GlL+JcC<$q#>j~>
JcGKE%K?>*s8VrgpZ_VSqXjK4s+14Fs*t~>
JcGHD%0$.upA4]W,2i:mqYPjDJcGNFJ,~>
JcGEC!WN&srW^V0[/Kq!rIP!"s7lVE~>
JcGKE&,Q#!q<db>q=jFHmcFBCrdk*#s8)bG~>
JcGHD&H;OXVk^21.[Qg%U=TADrVhBJJcGZJJ,~>
JcGKErr*GfYHk@.8qF7NX4mUQrVc_Hs+14Ks*t~>
JcGKE&H2J)o(;_Lq>0j_roNnFqYl'GJcGWIJ,~>
JcGHD&cVI'@rlg'AnPXaD86,Mr;HVGs+14Ks*t~>
JcGKEs8ET.Yu"e$?=Zo7;bDlGrquWkJcC<$rVqB~>
JcGHD&H;P(rqQ<dmbmR6r;Q`bkP'Q-JcGZJJ,~>
JcGKE')qk.p>tT)Ztu+QCRs_as8W)tJcC<$rVqB~>
JcGKE%fQD*m)-WDRmonC8nOIhJcC<$q>Ys~>
JcGHD&cVOpn+?JPp@n:Rm.9WAq>:/Bs+14Ks*t~>
JcGKE!WN&srsel%V]k*IK2>d;g@tIBJcC<$rVqB~>
JcGKE')h_*q!e:]eNTkMO()drh=pjHJcC<$rVqB~>
JcGKErr*H,q<mkBrpT[UqWR/8qu-MFs+14Ks*t~>
JcGECrr*B(qO\A`rVPE285YrArdk*#s8DtJ~>
JcGKE')hV#r;Z<aeN0Ppm+%4nA#n_gJcC<$rVqB~>
JcGKEs8N#t&bk\dg\LdAr;Z`fiTTk4rVcZnr;cG?s+UK'~>
JcGECrr*H&qOf4os8W)pf7?1eW8mXNqZ-VHs+LE&~>
JcGKE)ZK^6rr;Nd`?VP]q"OI.N)F#^j8&`Trr)`jJcCH(J,~>
JcG<@"S]7LqYU6ks7coujmD3sqY]pLoR[$qs*t~>
JcG<@"T6Z\cMRS?%/otUP>"K5h"^mKs7_*EL&ZZ~>
JcG<@"RO@P\(pr^%/TVKP[IU^fCAk?rr.KKL&ZZ~>
JcG<@"Su2FqXa[c%/oS_rqQ$[nFZ\Rm.Gr0L&ZZ~>
JcG<@"S?/Jr;HTo%/Bl$p"=mY9pac6rqq?IL&ZZ~>
JcG<@"R&p1oC`%]$NBntb(3]"R-OPHJcCE'J,~>
JcG<@"Me&ErVc]p%/p2)r;-0Xq"!\DrUkaAL&ZZ~>
JcG<@"MIE5rV?El%/]u$r;-?EKgJt/fDL4"L&ZZ~>
JcG<@"N3o4rr2lr%/p2*s7l65OBcIph"ZI#L&ZZ~>
JcGBB#6+BJa?fS"rVm>ss8MWcs8W#fp#PN;r;Q^!r;ZfqpOW@)s*t~>
JcGBB#6+B^cVXQ:r;RH/r;ZZiq#'?58Q(lGqYL-equ$GEs,I&/~>
JcGBB#6+BgbX)+)rVmW/qu-Nos8)9;L0%u[meZq_s8Muqr.4m.s*t~>
JcGBB"oY`"qF'Q>rser(qs`Y8o(W%Yq"aj`JcCc1J,~>
JcGBB"oY`#qF0W?rser!cA55$T]Q"Gr;?NiJcCc1J,~>
JcGBB#5thtog%R8p&>Kun'-hnF/IplrVlfoqgnd-s*t~>
JcGEC#Q=?deGWgkrUp1"qt0dbp@RnAlM:8Dp&'C@NrOV~>
JcGEC#Q=?deGWglrUg*urr)QHN`Sf0h"LXDp4<7(s*t~>
JcGEC#Q=?dchLbWqt0mrrVQ3?N+?1Mf_bRFJcC`0J,~>
JcGEC#QCZ!io,!Crq6<jrr<!(o)/:RlLXoJn:CV"s*t~>
JcGEC#QCZ!j5G-Frq69krr)a#ro'535)@kgrdk*0s*t~>
JcGEC#QCZ!h:uq/qsj[mroqq%<`bdIqYYpENrOV~>
JcGEC#Os`Y?!0^4rq6:#rqlThq"jUSp$1o3p&'C@NrOV~>
JcGEC#Os`Y?!9g7rq6<jrr<!(qu-BMN_iH9hLY]es*t~>
JcGEC#Os`Y=B%Xuqt9surVHEis8W&ff8*I9V;Hk(NrOV~>
JcGKE$3'g[B)2K,__V&Ss8W$*m-=30nG;bOrVl]fJcD):J,~>
JcGKE$3'g[B)2K,__V&SrseqnV,BU1bP;#2q>1'gJcD):J,~>
JcGKE$3'g[B)2K,__V&SrsAJ]Ug6l_cLh&5JcCr6J,~>
JcGKE$3'<Df(o@Gh\bJArs\\srVPLIlL=cKnETq&s-E\8~>
JcGKE$3'<Df(o@Gh\bJ@rs\o(kcd-4JC=2ks82G>s-Nb9~>
JcGKE$3'<Df(o@Gh\bJArsA]%p#2i]@$K4;JcCr6J,~>
JcGKE$2sb`rVccrro3hArseo)rVlc]p@@D?qt9UUJcD):J,~>
JcGKE$2sb`rVccrro3hArsel%qu-KUQ;^S:bP;)7JcD):J,~>
JcGKE$2sb`rVccrro3hArseu-rVZNGUiL.>eb/k=JcD):J,~>
JcF4!#kI6Qr9NY?r;)!EQiDR~>
JcFC&%K62$r;?Nml\eD6Ol-(fs-Nb9~>
JcFC&%K?>*s8VoejIod^R,%=bs-Nb9~>
JcFC&"8r#nrr)j,q>0aMo(VtWp&"ags8)G?s.KCB~>
JcF:#&cVb)q>:0PQr[CSjSf,Xqtg2@s.97@~>
JcFC&(B+..rr<#tq=`=#@:u"`oDS^hrquZkJcDDCJ,~>
JcF'r$ha>oo&9?9q>'aUp4<78s*t~>
JcF$q#Q<VY?:0%bqYpKqqtYgCT`9N~>
JcF'r%K,nRUh*kke+Wb?rr)hIs.KCB~>
JcF'r%Jferr:p'LnFchVmIpL0s.KCB~>
JcF'rrr*9'lCC^HIan,krV;$ET`9N~>
JcF!p$N0YZTjq_nhtm<NJcDABJ,~>
JcF!p$i^+siVWNBme$GQpOW@;s*t~>
JcF'r%K-,%rr2lVQW.%Kf(]/ps.KCB~>
JcF'rrVd-#n_KjLCS0DVrIP!As*t~>
JcF'r(Adh'rr)Wgp\spPjR`?Mr;-Bls8MrnJcD_LJ,~>
JcF!ps8ET,oDSUSXC"MIanPf7rr)cnJcDYJJ,~>
JcF'rs8*9'rr;rnn(aXM>E$i#rVlg!rr)fpJcD_LJ,~>
JcEai%K$1sm,mO,p@J1[rqlPCs/H$K~>
JcEai%K5Ld<'tudqY^9grVc_Hs/H$K~>
JcEai%JA\U>uHF5qYgHnr;6DCs/H$K~>
JcEai%.a)hqWR_Hp%eFPmeq_:W;hA~>
JcE^h%0$+eSk;h>eGB1Dq=oO@WW.J~>
JcEai$N9elhP4k!O1kMkJcDVIJ,~>
JcE[g$i^(qnF>l?p&=aXq18RFs*t~>
JcEai%/]u$rr;JU9hKu`q#,dDW;hA~>
JcEXf$3'YVR9*:SgA(Prs/>sJ~>
JcEais839'rq>^Sqsre8p\ar?s/H$K~>
JcEais8Dus$2j\qfTo95Ok9D[s/H$K~>
JcEais839'rquEXgSIn]T\K6ms/H$K~>
JcEais83T0rr<#rqu?WfjlQ:7rV--drr2ZhJcE%UJ,~>
JcEUe')h_,s8D8e>t0+[pAP!fqYgEmJcE%UJ,~>
JcEais8Dfn%HF^/=bk/jr;Q`pr;-ACs0DZT~>
JcEF`$h*okn)NHqqtp$SpjrILs*t~>
JcEF`%K?7eV-d)ZebB+DrqQDBs0DZT~>
JcEF`$N0\\Ve0+pe+!D;rr.KKZN#F~>
JcEF`%J]bsq>BjRl1k&In+cj4s0DZT~>
JcEF`%K-2(qs0YQ:4UL]s8;hHs0DZT~>
JcEC_s8E<!i07eVK\6)!JcDtSJ,~>
JcE:\s7HWqpug`*p\Oi>s0DZT~>
JcEF`s8*3%rVlcXYAHaP^@M8Ss0DZT~>
JcE:\$2jS^[Wbc+`ps%Zs0DZT~>
JcEF`&bYnqrr2QPo`"UPk4&<JqYL3jrrDqIs185\~>
JcE=]!WMuqrXAP)>=3S`p](6krVQPEs1//[~>
JcEF`s8Dor&,l=nWG>aqeF<;5s8Muqr.4mZs*t~>
JcE+W%/9bqjlPt-qtg']r;;-G])R9~>
JcE+W%/]+^>Y]XhpAOsfrVD*F])R9~>
JcE+W%/fCrDI\OKo(i:`r;2'F])R9~>
JcE+W$h<uirql?Vi;3<;mXbDKs*t~>
JcE(V$iTniO[DZ`d.mY@pjrIVs*t~>
JcE(V#laYeYAIluao-ej\,Us~>
JcE%U%K64eoCVVHp&+LJs8N"Ks1SG_~>
JcE+W&,H,$rr2/N;+ZJeq>^Kordk*_s*t~>
JcDtS$i0%eCLisdp\b'jrdk*_s*t~>
JcE+W%JT_trq5sTp@7G8n+Zd3s1A;]~>
JcE%Us8E?!r;>rjAk-j_rIP!\s*t~>
JcE+W%JT\qrVc`ko=ej?L!T^Ks1A;]~>
JcDhO&cVaumI]fDo^;GPmd0uKqu-MFs2Y.i~>
JcDhO%K>t*><.#Up\t'drVl<cqZ6WoJcEgkJ,~>
JcDhO')qU=EE@"ili$h]r;-0as8VceJcEgkJ,~>
JcDhO')VA"rp][HoDA1XrqtsQrUopaJcEgkJ,~>
JcDeN%fZ7aXBSPL_=RR!pU[a(rr.KKaT$b~>
JcDeN&cVXjZ#=01_s@'qrn+UKr;HSFs2b4j~>
JcDhO')qe*r;6NgmH![3o_Rb4q"jOVJcEgkJ,~>
JcDhO')qh-rr1rH;bMnuqVjt4]_VR*JcEgkJ,~>
JcD_L&,lFjX(bRhf(Sg"8?qR\rdk*js*t~>
JcD\K%fYS_rUSn&kP+QBn+QYSJcEgkJ,~>
JcDhO')qh,rVlipj.TIMQB`jf:o*jbJcEgkJ,~>
JcDhO')qh-rr;rlih^3sR\sXj:RghNJcEgkJ,~>
JcDhO)ZBI-rVuonp&=sen*oiArpT.Jqu-Qko)JI^JcF*sJ,~>
JcDYJ'Dqe/rT9\S9M.N17Zm9@r;Q`qr;Q\Hs3^js~>
JcDhO)u]X1r;HZpr;,TXDcoq>:K*D@qYpHdq=s^\qgndps*t~>
JcDMF&b>npmJ,i/n+#H;r:p*`rV?;@s3Udr~>
JcDJE&b_qc6:sd=6[7\is8VW?rqcVFs3^js~>
JcDGD&B&9m>?b?9HJnc$o_%#+p@s4=dJn^~>
JcDMF&aoVbr;5mOo_8(GrV69\f),;ps3Udr~>
JcDJE"n6"_4[qm>5mV;irVX#rnbN-7s3^js~>
JcDMF')q`hC0t(E<E<%>j8Ji-?InlIJcF-tJ,~>
JcDMF&cD[mn`090oC2VQi;<NEo(Vg.s3Udr~>
JcDMF')q0YD-K7f77]d4ACC.G0'rH5JcF-tJ,~>
JcDMF')Us]EE,n0;H$b"C"E(-421RhJcF-tJ,~>
JcDMF&cVFgp&G$bnET-1qpOrtp[R^'s3Udr~>
JcDMFrqm<&mb"Xo8jPX%;9Z'fmeZm5s3^js~>
JcDMF')qk)m,#=BIT0EP:Kboj/?o'OJcF-tJ,~>
JcD8?%fZ:tqXa7Mq"4ISnGE(XJcF7"J,~>
JcD8?&,uCl`0,=VDE$#.lgO]KpOW@ps*t~>
JcD8?%fZ:]\V+9eN'Y5Mn+$#JJcF7"J,~>
JcD8?&,uLpip5mto'cSSqWInQq18Rrs*t~>
JcD8?&,uM'PttRd:JOki=&IHGrdk+"s*t~>
JcD8?%fZD)\8bhJ>>nj6='3K8JcF7"J,~>
JcD8?&,uV(o_7qJqr@G;lgFfNrIP"!s*t~>
JcD8?&,uV*Y]YPH?Uf^2PEtA1qgndts*t~>
JcD8?%fZM+aGG(RF@gCjE.lI-JcF7"J,~>
JcD2=%Ij/]mJ6GJnb)bXq"+K9s4.."~>
JcD2=%K-)"r:d0>l21>RrVl\Fs4.."~>
JcD2=#lOGem-2nPYjq_[!;h?IeGk%~>
JcD,;$iBeqlLsc2qu?Qgrdk+"s*t~>
JcD2=%K-)%rqj,Jl21DUrr;tKs4.."~>
JcD#8#37A@s8W#qJcF4!J,~>
JcD#8"8;6`pjrIls*t~>
JcD&9"ob_Oiqr\*s3^js~>
JcD&9"odL<])M\[s3^js~>
JcD,;s8E3!p"oWBrdk*ss*t~>
JcD,;s8E3#eT:3Wrdk*ss*t~>
JcD,;s8E2tlZU\Oqgndps*t~>
JcD,;s8E3!q#:$ZrIP!rs*t~>
JcD,;rr*#opAXr?s3Udr~>
JcD,;s8E2ro]G<.pOW@ls*t~>
JcD,;s8<2R[(3NXo)AW>s3q!u~>
JcD,;s8<2PX0\h3nG`E<s3q!u~>
JcD,;s8<2JWiDi#lMgd6s3q!u~>
JcD,;s83+U;L`j`;Yg<Cs3q!u~>
JcD,;s83+V;h0'd;Yg<Cs3q!u~>
JcD,;s83+T9m^kM;>L3Bs3q!u~>
JcD,;s8<1*\,-'l1$nmjs3q!u~>
JcD,;s8<1*\,-'m1$nmjs3q!u~>
JcD,;s8<1)ZM""X0^Sdis3q!u~>
JcD,;$3'`]l21;72td1@rrN)qJcFg2J,~>
JcD,;$3'`]lMLD82td1@rrN)qJcFg2J,~>
JcD,;$3'`[jnA?$2>-t>rrN)qJcFg2J,~>
JcD,;$3'$Aa1\cEU\t(As3q!u~>
JcD,;$3'$AaM"oHU\t(As3q!u~>
JcD,;$3'$@_RQ^2UAXt@s3q!u~>
JcD,;$3&(-Chd`AiVWV*s3q!u~>
JcD,;$3&(-D/3oCiVWV*s3q!u~>
JcD,;$3&(-CM@N=iVWV*s3q!u~>
JcD,;$2p'0rquM$Mu<R*s3q!u~>
JcD,;$2p'0rquM$Mu<R*s3q!u~>
JcD,;$2p'0rquM$Mu<R*s3q!u~>
JcD,;$2n+srr2h.Mu<R*s3q!u~>
JcD,;$2n+srr2h.Mu<R*s3q!u~>
JcD,;$2n+srr2h.Mu<R*s3q!u~>
JcD,;$2Q`am-:W&des)qs3q!u~>
JcD,;$2Q`am-:W&des)qs3q!u~>
JcD,;$2Q`am-:W&des)qs3q!u~>
JcD,;$0rs"/M'B9rVc_Hs3q!u~>
JcD,;$0rs"/M'B9rVc_Hs3q!u~>
JcD,;$0rs"/M'B9rVc_Hs3q!u~>
JcD,;#Q3uXnF68PrIP!rs*t~>
JcD,;#Q3uXnF68PrIP!rs*t~>
JcD,;#Q3uXnF68PrIP!rs*t~>
JcD,;#QFVtrVZTlrdk*ss*t~>
JcD,;#QFVtrVZTlrdk*ss*t~>
JcD,;#QFVtrVZTlrdk*ss*t~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcD>A!r`&qJcEaiJ,~>
JcD>A!r`&qJcEaiJ,~>
JcD>A!r`&qJcEaiJ,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
JcC<$JcF[.J,~>
%%EndData
showpage
%%Trailer
end
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray -135 4986 a(1.)p 0 TeXcolorgray
47 w(Construire)e(le)i(p)s(oin)m(t)f Fa(D)k Fc(tel)d(que)1174
4924 y Fb(\000)-42 b(\000)g(!)1174 4986 y Fa(C)7 b(D)28
b Fc(=)1445 4924 y Fb(\000)-46 b(\000)g(!)1445 4986 y
Fa(AB)t Fc(.)p 0 TeXcolorgray -135 5138 a(2.)p 0 TeXcolorgray
47 w(Justi\014er)29 b(que)501 5076 y Fb(\000)-22 b(!)501
5138 y Fa(C)7 b(A)25 b Fc(=)762 5076 y Fb(\000)-41 b(\000)h(!)762
5138 y Fa(D)s(B)t Fc(.)p 0 TeXcolorgray -135 5283 a(3.)p
0 TeXcolorgray 47 w(Construire)29 b(le)i(p)s(oin)m(t)f
Fa(E)36 b Fc(tel)31 b(que)g Fa(AB)5 b(C)i(E)34 b Fc(soit)e(un)d(parall)
m(\023)-43 b(elogramme.)p 0 TeXcolorgray -135 5427 a(4.)p
0 TeXcolorgray 47 w(Que)30 b(dire)g(des)g(p)s(oin)m(ts)g
Fa(C)7 b Fc(,)30 b Fa(D)j Fc(et)e Fa(E)5 b Fc(.)31 b(Justi\014er.)p
0 TeXcolorgray -135 5580 a(5.)p 0 TeXcolorgray 47 w Fa(F)43
b Fc(est)31 b(l'image)h(de)e Fa(A)h Fc(par)f(la)h(translation)g(de)f(v)
m(ecteur)1921 5518 y Fb(\000)-44 b(\000)g(!)1921 5580
y Fa(C)7 b(B)t Fc(.)30 b(Justi\014er)g(que)2641 5518
y Fb(\000)-22 b(!)2641 5580 y Fa(AC)32 b Fc(=)2902 5518
y Fb(\000)-44 b(\000)f(!)2902 5580 y Fa(F)13 b(B)t Fc(.)p
0 TeXcolorgray 1858 6547 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -246 -391 a Fd(Exercice)36 b(5)f(:)g(V)-9
b(rai)35 b(ou)g(faux)18 b(?)p -246 -376 1207 4 v -246
-230 a Fc(P)m(our)31 b(c)m(haque)g(prop)s(osition,)f(dire)g(si)g(elle)i
(est)f(vraie)g(ou)f(fausse.)p 0 TeXcolorgray -135 -84
a(1.)p 0 TeXcolorgray 47 w(Si)g Fa(QF)13 b(K)7 b(G)30
b Fc(est)h(un)e(parall)m(\023)-43 b(elogramme,)34 b(alors)d
Fa(G)g Fc(est)g(l'image)h(de)e Fa(Q)g Fc(par)g(la)h(translation)g(de)g
(v)m(ecteur)3563 -147 y Fb(\000)-39 b(\000)g(!)3563 -84
y Fa(K)7 b(F)13 b Fc(.)p 0 TeXcolorgray -135 62 a(2.)p
0 TeXcolorgray 47 w(Si)88 0 y Fb(\000)-39 b(\000)f(!)88
62 y Fa(C)7 b(H)31 b Fc(=)363 0 y Fb(\000)-24 b(!)363
62 y Fa(R)q(A)p Fc(,)31 b(alors)g(le)g(quadrilat)m(\022)-43
b(ere)32 b Fa(C)7 b(H)g(R)q(A)29 b Fc(est)i(un)f(parall)m(\023)-43
b(elogramme.)p 0 TeXcolorgray -135 208 a(3.)p 0 TeXcolorgray
47 w(Si)30 b Fa(S)35 b Fc(est)c(l'image)h(de)e Fa(B)35
b Fc(par)30 b(la)h(translation)g(de)f(v)m(ecteur)2022
146 y Fb(\000)-39 b(\000)f(!)2022 208 y Fa(N)10 b(G)p
Fc(,)31 b(alors)2450 146 y Fb(\000)-38 b(\000)f(!)2450
208 y Fa(N)10 b(B)30 b Fc(=)2728 146 y Fb(\000)-30 b(!)2728
208 y Fa(GS)5 b Fc(.)p 0 TeXcolorgray -135 354 a(4.)p
0 TeXcolorgray 47 w(Si)88 292 y Fb(\000)-26 b(\000)h(!)88
354 y Fa(K)7 b(M)35 b Fc(=)391 292 y Fb(\000)-29 b(\000)h(!)391
354 y Fa(M)10 b(D)s Fc(,)30 b(alors)h Fa(M)40 b Fc(est)31
b(le)g(milieu)g(du)e(segmen)m(t)j([)p Fa(K)7 b(D)s Fc(].)p
0 TeXcolorgray -135 505 a(5.)p 0 TeXcolorgray 47 w(Si)30
b Fa(P)43 b Fc(a)31 b(p)s(our)e(image)i Fa(T)43 b Fc(par)30
b(la)h(translation)h(de)e(v)m(ecteur)2001 443 y Fb(\000)-26
b(\000)g(!)2001 505 y Fa(X)7 b(W)13 b Fc(,)31 b(alors)g
Fa(W)13 b(P)g(T)g(X)37 b Fc(est)30 b(un)g(parall)m(\023)-43
b(elogramme.)p 0 TeXcolorgray -135 642 a(6.)p 0 TeXcolorgray
47 w(Si)25 b Fa(C)33 b Fc(a)26 b(p)s(our)f(image)i Fa(D)i
Fc(par)c(la)i(translation)g(qui)f(transforme)g Fa(A)g
Fc(en)g Fa(B)5 b Fc(,)26 b(alors)g([)p Fa(AD)s Fc(])h(et)f([)p
Fa(B)5 b(C)i Fc(])26 b(on)m(t)h(le)f(m)m(^)-43 b(eme)28
b(milieu.)-246 1006 y Fd(Exercice)36 b(6)f(:)p -246 1021
536 4 v -246 1166 a Fa(AB)5 b(C)i(D)33 b Fc(est)e(un)e(rectangle.)j
Fa(I)38 b Fc(est)31 b(le)g(milieu)f(de)g([)p Fa(AB)5
b Fc(])31 b(et)g Fa(E)36 b Fc(est)31 b(le)g(sym)m(\023)-43
b(etrique)31 b(de)f Fa(I)38 b Fc(par)29 b(rapp)s(ort)h(\022)-45
b(a)30 b Fa(B)5 b Fc(.)p 0 TeXcolorgray -135 1317 a(1.)p
0 TeXcolorgray 47 w(Placer)31 b(le)g(p)s(oin)m(t)f Fa(F)44
b Fc(tel)31 b(que)996 1255 y Fb(\000)-23 b(!)996 1317
y Fa(AF)39 b Fc(=)25 b(3)1302 1255 y Fb(\000)-43 b(\000)f(!)1302
1317 y Fa(AD)s Fc(.)p 0 TeXcolorgray -135 1454 a(2.)p
0 TeXcolorgray 47 w(Que)30 b(p)s(eut-on)f(dire)h(des)h(p)s(oin)m(ts)f
Fa(C)7 b Fc(,)30 b Fa(E)35 b Fc(et)d Fa(F)c Fc(?)i(Le)g(d)m(\023)-43
b(emon)m(trer.)-246 1818 y Fd(Exercice)36 b(7)f(:)p -246
1833 V -246 2011 a Fa(AB)5 b(C)i(D)33 b Fc(est)e(un)e(parall)m(\023)-43
b(elogramme.)33 b(Les)e(p)s(oin)m(ts)f Fa(K)37 b Fc(et)31
b Fa(L)f Fc(son)m(t)h(tels)g(que)2342 1949 y Fb(\000)-38
b(\000)g(!)2342 2011 y Fa(B)5 b(K)31 b Fc(=)25 b Fb(\000)2701
1950 y Fc(1)p 2701 1990 46 4 v 2701 2074 a(2)2756 1949
y Fb(\000)-45 b(\000)f(!)2756 2011 y Fa(B)5 b(A)30 b
Fc(et)3034 1949 y Fb(\000)-32 b(!)3034 2011 y Fa(AL)26
b Fc(=)e(3)3330 1949 y Fb(\000)-42 b(\000)e(!)3330 2011
y Fa(AD)t Fc(.)p 0 TeXcolorgray -135 2170 a(1.)p 0 TeXcolorgray
47 w(R)m(\023)h(ealiser)32 b(une)e(\014gure.)p 0 TeXcolorgray
-135 2307 a(2.)p 0 TeXcolorgray 47 w(Que)g(dire)g(des)g(p)s(oin)m(ts)g
Fa(K)7 b Fc(,)30 b Fa(C)37 b Fc(et)31 b Fa(L)15 b Fc(?)30
b(Le)h(d)m(\023)-43 b(emon)m(trer.)-246 2671 y Fd(Exercice)36
b(8)f(:)p -246 2686 536 4 v -246 2831 a Fa(AB)5 b(C)37
b Fc(est)31 b(un)e(triangle)j(quelconque.)p 0 TeXcolorgray
-135 2977 a(1.)p 0 TeXcolorgray 47 w(Construire)d(le)i(p)s(oin)m(t)f
Fa(D)k Fc(tel)d(que)1174 2915 y Fb(\000)-42 b(\000)g(!)1174
2977 y Fa(C)7 b(D)28 b Fc(=)1445 2915 y Fb(\000)-44 b(\000)g(!)1445
2977 y Fa(C)7 b(B)24 b Fb(\000)c Fc(2)1746 2915 y Fb(\000)-22
b(!)1746 2977 y Fa(AC)7 b Fc(.)p 0 TeXcolorgray -135
3123 a(2.)p 0 TeXcolorgray 47 w(D)m(\023)-43 b(emon)m(trer)32
b(que)607 3061 y Fb(\000)-41 b(\000)h(!)607 3123 y Fa(B)5
b(D)28 b Fc(=)d(2)925 3061 y Fb(\000)-22 b(!)925 3123
y Fa(C)7 b(A)p Fc(.)p 0 TeXcolorgray -135 3260 a(3.)p
0 TeXcolorgray 47 w(Que)30 b(p)s(eut-on)f(en)i(d)m(\023)-43
b(eduire)15 b(?)-246 3623 y Fd(Exercice)36 b(9)f(:)p
-246 3638 V -246 3817 a Fc(Soit)c Fa(AB)5 b(C)i(D)32
b Fc(un)e(quadrilat)m(\022)-43 b(ere)32 b(et)f Fa(M)40
b Fc(et)31 b Fa(N)41 b Fc(les)30 b(p)s(oin)m(ts)h(d)m(\023)-43
b(e\014nis)30 b(par)2206 3755 y Fb(\000)-31 b(\000)h(!)2206
3817 y Fa(B)5 b(M)35 b Fc(=)2509 3756 y(1)p 2509 3796
46 4 v 2509 3880 a(2)2564 3755 y Fb(\000)-45 b(\000)f(!)2564
3817 y Fa(AB)35 b Fc(et)2842 3755 y Fb(\000)-41 b(\000)g(!)2842
3817 y Fa(AN)36 b Fc(=)25 b(3)3160 3755 y Fb(\000)-43
b(\000)f(!)3160 3817 y Fa(AD)s Fc(.)p 0 TeXcolorgray
-135 3976 a(1.)p 0 TeXcolorgray 47 w(D)m(\023)h(emon)m(trer)32
b(que)e(:)p 0 TeXcolorgray -19 4143 a Fa(a:)p 0 TeXcolorgray
99 4081 a Fb(\000)-32 b(\000)h(!)99 4143 y Fa(C)7 b(M)35
b Fc(=)400 4081 y(1)p 400 4122 V 400 4205 a(2)455 4081
y Fb(\000)-45 b(\000)f(!)455 4143 y Fa(AB)25 b Fb(\000)708
4081 y(\000)-44 b(\000)g(!)708 4143 y Fa(B)5 b(C)21 b
Fc(;)p 0 TeXcolorgray -10 4334 a Fa(b:)p 0 TeXcolorgray
99 4272 a Fb(\000)-39 b(\000)f(!)99 4334 y Fa(C)7 b(N)35
b Fc(=)25 b(2)420 4272 y Fb(\000)-43 b(\000)f(!)420 4334
y Fa(AD)23 b Fb(\000)677 4272 y(\000)-42 b(\000)g(!)677
4334 y Fa(D)s(C)6 b Fc(.)p 0 TeXcolorgray -135 4468 a(2.)p
0 TeXcolorgray 47 w(En)29 b(d)m(\023)-43 b(eduire)31
b(que)f(si)g Fa(AB)5 b(C)i(D)33 b Fc(est)e(un)e(parall)m(\023)-43
b(elogramme,)34 b(alors)c(les)h(p)s(oin)m(ts)f Fa(C)7
b Fc(,)31 b Fa(M)40 b Fc(et)31 b Fa(N)40 b Fc(son)m(t)31
b(align)m(\023)-43 b(es.)-246 4831 y Fd(Exercice)36 b(10)f(:)p
-246 4846 589 4 v -246 4991 a Fc(Soien)m(t)d Fa(M)10
b(N)g(P)43 b Fc(et)31 b Fa(M)10 b(P)j(C)37 b Fc(deux)30
b(triangles)e(\023)-43 b(equilat)m(\023)g(eraux.)p 0
TeXcolorgray -135 5137 a(1.)p 0 TeXcolorgray 47 w(D)m(\023)g(emon)m
(trer)32 b(que)607 5075 y Fb(\000)-26 b(\000)g(!)607
5137 y Fa(M)10 b(N)35 b Fc(=)909 5075 y Fb(\000)-45 b(\000)g(!)909
5137 y Fa(C)7 b(P)13 b Fc(.)p 0 TeXcolorgray -135 5275
a(2.)p 0 TeXcolorgray 47 w(Construire)29 b(les)i(p)s(oin)m(ts)f
Fa(D)s Fc(,)h Fa(E)k Fc(et)c Fa(F)44 b Fc(sym)m(\023)-43
b(etriques)31 b(resp)s(ectifs)f(de)g Fa(N)10 b Fc(,)31
b Fa(P)43 b Fc(et)31 b Fa(C)37 b Fc(par)30 b(rapp)s(ort)f(\022)-45
b(a)31 b Fa(M)10 b Fc(.)p 0 TeXcolorgray -135 5421 a(3.)p
0 TeXcolorgray 47 w(D)m(\023)-43 b(emon)m(trer)32 b(que)607
5359 y Fb(\000)-45 b(\000)g(!)607 5421 y Fa(C)7 b(P)38
b Fc(=)871 5359 y Fb(\000)-45 b(\000)g(!)871 5421 y Fa(E)5
b(F)13 b Fc(.)p 0 TeXcolorgray -135 5558 a(4.)p 0 TeXcolorgray
47 w(Compl)m(\023)-43 b(eter)31 b(les)e(\023)-43 b(egalit)m(\023)g(es)
34 b(suiv)-5 b(an)m(tes)31 b(en)f(n'utilisan)m(t)h(que)f(des)h(noms)e
(de)i(p)s(oin)m(ts)f(pr)m(\023)-43 b(esen)m(ts)31 b(sur)e(la)i
(\014gure)f(:)p 0 TeXcolorgray -19 5701 a Fa(a:)p 0 TeXcolorgray
99 5639 a Fb(\000)-26 b(\000)g(!)99 5701 y Fa(M)10 b(N)30
b Fc(+)391 5639 y Fb(\000)-32 b(\000)g(!)391 5701 y Fa(M)10
b(P)38 b Fc(=)25 b Fa(:::)16 b Fc(;)p 0 TeXcolorgray
-10 5847 a Fa(b:)p 0 TeXcolorgray 99 5785 a Fb(\000)-26
b(\000)g(!)99 5847 y Fa(M)10 b(N)30 b Fc(+)391 5785 y
Fb(\000)-31 b(\000)f(!)391 5847 y Fa(M)10 b(C)32 b Fc(=)25
b Fa(:::)16 b Fc(;)p 0 TeXcolorgray -11 5993 a Fa(c:)p
0 TeXcolorgray 99 5931 a Fb(\000)-26 b(\000)g(!)99 5993
y Fa(M)10 b(N)30 b Fc(+)391 5931 y Fb(\000)-31 b(\000)f(!)391
5993 y Fa(M)10 b(C)27 b Fc(+)672 5931 y Fb(\000)-31 b(\000)f(!)672
5993 y Fa(M)10 b(E)31 b Fc(=)24 b Fa(:::)16 b Fc(;)p
0 TeXcolorgray -19 6139 a Fa(d:)p 0 TeXcolorgray 99 6077
a Fb(\000)-32 b(\000)h(!)99 6139 y Fa(M)10 b(C)27 b Fb(\000)380
6077 y(\000)-31 b(\000)f(!)380 6139 y Fa(E)5 b(M)35 b
Fc(=)25 b Fa(:::)31 b Fc(.)p 0 TeXcolorgray -135 6273
a(5.)p 0 TeXcolorgray 47 w(Exprimer)385 6211 y Fb(\000)-41
b(\000)f(!)385 6273 y Fa(E)5 b(D)33 b Fc(en)e(fonction)g(des)f(v)m
(ecteurs)1549 6211 y Fb(\000)-26 b(\000)g(!)1549 6273
y Fa(M)10 b(N)40 b Fc(et)1866 6211 y Fb(\000)-31 b(\000)f(!)1866
6273 y Fa(M)10 b(P)j Fc(.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
