%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: somme-vecteurs.dvi
%%CreationDate: Fri Aug 20 15:25:33 2021
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMR12 CMSY10 CMBX10 CMR10 CMMI10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips.exe -o somme-vecteurs.ps somme-vecteurs.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.08.20:1725
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 59 /comma put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 117 /u put
dup 118 /v put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A90B8A9EE5C613CDB822F07B
115D4C174FB7945535F2F9C2875C9675143B8D98DEFD3898170FBCB19B4C29CE
1E6883E0F68B5D42751BD7AD09E3EB745F0A6338BA2148B769B5E1EB21109414
C1615EC1A1FEAD5831938F74E26E1F6BF51136E5C76F823D29D35078412923DB
B3A32176ED7935058ED16528D28E50E37BBEB1D1554503645DD681BD9CBEC596
5E246EA09BF28E98FB55C1E009C35D0DE1F77393EC792463AD99F06EB05CC098
26600D42045A75CCED6ABF5FBA7CFC21560FCFE13CD0B7F53872A09449E7A748
4A5015741939054CF994DDED17AAEB074E76FD2DD48374C2B47B17CECC15A13E
3E24ACEFB8A3BE7B6CD98585D1FEDC7BDC64D393EE6FA025BCB36A327A1EFFFD
BB4759AAA590C2543421E8F43CE29CF765EE069256B54DCEFCF183A6DA582752
68D74D923E04993FDFDC22CC0F625344E0B5C66E23DF1D01DA22C816555AD02B
D0DDDFB684C574B22947112D6A6617969BD0CCAF841020A970987823650A53C0
61019C1F9ADDF9C2EBC66BDAFCC45012E5C6AE4A0C74D840485D724E24366615
5070D8FF348EA5DEBF1619AE1903E3588B140A5281E000E27502C698E137694E
5E192B647F90A522697D106D03664EB33C4D4A0832511C06424E432E594ADF0F
228FCA3C801CD318BE86AACC6943F2CB426186CB530B8B0B769C8BC0E1823858
F63E73D04E15D00000FE104D0A74D98EC2B68E9A19D0810D069468234FFB639C
7CD7CE35AC41F3CEE5CEBEC15A43F1B0182D177FDC34EB3010B613B12A53D24D
BF8FEF359092B660595A0F3F2653898DD0BFABBF859B95B28034E354AAB58D14
1C3AF3257F51F54309E367E772BC795FB0F5A887E77A47761657846E9FA09514
8630F4027429C1E665A0E5E2C1EC29060DEB42EE98F3A89415961742294CE312
39062031EC8D4B30585137C0F2FEA9113DE270DD12889601F302540DCF387A95
321DFA2C5A76B5554A6F96AD2681D85FD2DC91786E3BE57F9FE7B86D7D100CC4
F1F4B793DAF4EA2351D78BDB660774755EEA5E988114B4AC5E6D741369093E8F
5F25CCE55F8950904D55E23AB6E6A9E4E5DEA380F45787A654E61D120BC97887
38440F3D1AD7B6F9297A31FD509805FAA1BA36B0C98D584E96F06DFC040FF0E6
942938CC60264403F06D98C5568377C2416A56854846497F241AE72B7D1E987A
162D41EE2835E781D2843BFF4F2511AD56B7186E178233C324719581704422D1
C1BCAC542F616177879502A6A095EEE6833BA1DD7FADC37A9CB6B5676B755EE9
D895EC74BD36C110378378D7C9367B41FBF01CF1142BD72F608C5BED21A826EC
20ACF580BBDBAE69F1944258A042D83F4EA9A68DCB7E2E4B9D6CC38104A7B9CA
46D9F65D093C7625BBBC9F488E383D60910BF01F62041ECE84BA3CBE76884DC8
926117CCF42D82F344DDD1D528C43036E857C9F9D316217EA027E6B208DD6903
FBE4473C39A1D80C6ECE55FA4A1F37ADDBC85F424C48D4F13EFCACAA18AE96A7
C56547F6C5EC7FA143FD0ED51DC9B0D605FD4225776F6A1401560F1AC6CBC38D
44C78995157B0DA66DA24FBED926A510CFC579628AA505C89AABEA435018F44C
28CE17A2B4A23C17C475EF4196009A89412F53DAEFF9799D5890834C3DFDC97A
6A2F1DC824446BEA309B892FDF8245397865AFEC9214891F82268C7C79A0CFB2
E309EC33B2692BFBA3575F6BD6DB181216E39C0C8D55410BAE4A1773EEE02DD9
B54C19D93C2F78A484505F5CB03C7DF8023258B237375EBA1F4279A29103BBB9
1BC44F7F55AB66229F5056CA814FA0EDBF77A7B2F675F4831FB9D7FEA8AB90A7
3EDD3DCF0088CF296AA2A23EF34459256956B539C977DB7B9D7951A563271782
C360AD03437A6471D03D3B41A445734A2F923F4E4A0125B1BB2175000E663937
A3DD4F3D1D89E308E95F9124FA1EE6135439FA4A0C4406344FFC2DCA63896155
371AA7D7C6DE297675A23148C83AC80884CDD04F9737439A9DBD3CDF6FCC3B75
550628367D4D90C738F7B80C837BB6467E542174DFF49B80DC1610E19CDB4975
3C63BB3D38DE8BD6EC065F08B87CD7C3CADF51B93ABC6D89790588CFBF22086F
3DE7D332348225441EE138447A1098077419A1587D4B24ECBE813C564D571FFC
1FAE59B608347AD1982640B844E9481BBBC2EF7A3BAED7FDF1767ACE6635BE30
37708E4A989EB54B9DBD762B99F7DCE68C7F47B5CB0D665A20FC317CC488DA99
E7DAE21580AF2F38E540C4D2EC34C230B946F3DFF01BFE87B764C298F0D4DEDD
F16C8B8E840B3FC9A9683AC41B7C2769BA35F10E5FB676A0A7F9DBF31F2530A8
43ED3484913872DDA2342B37939FC9A481D77E9B449ED65FA5A4410C4F723633
D6D46A744867230BE15F3526D3FD8490F2424CDB145DFE9E6AA52C1D1678F152
B143817A061CD64B3B5401A20C41FCAEF291B3BD0D05D844B89A9D8F670BA90C
0322F859CFA712D61E69FC06173DC29DFD5FD1BDA1D89437B0AFCE12EC0D10DC
5325C956CD99B33F542B275CE9AF8F1FB90440D396F707CC76B86E8C0EC220A9
3C6ED9FF73D120AAB4C3D247FD61F359F95055B70331BA6D983DF25FF50167E0
64F55E5AFC9BB9F5DB34E08404DEE41178946EA58D42AA1F840B2528132829D4
0F408ABE518E8C84F18FF6C1DE35259AFEEA0841DF825E065AB8CF6D00A8C599
50E7373F30BBB80D2491D984620FE8EE28263F41B77ED504361F51545262241E
6CC2EA7536632186A47412E049E7593DA92E03611F7536B17A195CF1C84938A0
17F61D0BE332F46997FE800B78F97E53502E8FEBCAE91675D17B6A703646CDCA
9747A4FA8106071F412314303032DEE87B8B6D62DA36ECDEB0D18651A6E8F42C
7A6891A6F05A891F041455702784CD6F8A730E5C4B8656D6B4D39AD92BBB759B
B764193C468E73CA731FB55BBC0C51C910C572B3241BD87AF816DB76EBE303D1
BACD8EB52E7F49BC8963B12E4EC3138A14C9BD02E007810B40D86A5CB9B3068E
95E6E68CC0125A36AB0B22A87B5CAF33D56EBD5C51CCE624F82596780DCB058A
54B2D5B28F08565DA9233B4F81AB0038993045B264298C18530238BB30E3D2CC
18F127486DBCC605BB79A4663554D76AF2754F885D410224E2CA23F5160126D8
AB49D32ED181E329AC8D5110161D461F4543FC41B22857309D3B66A1A9C8B5F6
7463918DB6613231BF3D5112CB16A03BC6CE361B27A9ECD231B6114D402DF0F7
FE5D5659488F4528A607AD3C548B4EDF77133AE961A71C0900DA4988C1E17C53
0BCEA3DC640E151DB7988C3D7BC0AC3D48263363D0183D9845D1F6ABA3500A8B
FEC59D8FDC7893328EA41CBC26782C3B683B5F7591F80826D4C9A713281E3A3A
45C9F143D55ADB03F4DA8DC615F6AE60C96EEE51CA5919C624513C28A94524A4
91F18CFB3A221E8FF679B066E4183BEF2D8A75895B456B2E398AF3EBF8BE89F4
AAAE02EAFAA55C79F1ADCBAF72D5C9887653DB8D3B96800548C20FFE95924DD4
44FCA7D24A334D48223D306718D25057E8555F5B5872278522EA633FD3A80ED2
21A5EE731C813CED5D2C4F4ABB84BA307F231BD11DC6C3ECA47424B7BF71AC77
C0C21004DB08F39BF89FC47474D0032127EDD7F5C72611F9982BD7D8664D78FE
77328B7ECDC65B948BA7DF11D6887771954E27366D7A3730E7D874A0E77886CB
BF57FFA55197E64950ACA3878BFC410BAF237824E10183DCE6BF386ED88B6A5F
67E0EA96D8AD3AD6026EB43F1FD34720385B83F92621774FABDD13756C22E48D
06B88E70754834372CB7DB2DA254F1B39CA53A611E4A9A1F2517545E5754B970
62524389E71CF05793E09372FB181524A717CEDC883764B46FE57CFE55241EEA
D8F13D58116F75C57448C26FE5DE10ED62D99A0D8C321DAA5FE102D0DB5E7D99
4019A88757F4573B20F8232E06932CF0B4A0FAB035127028CFE54C5305736C2C
AB58263A9D59B400D75A60C96930B8E5483B443AF200807B4DD33269A639DDF2
05C56A94D09F79AAA496D0E0815D19E794463F40800042D191BF25EEC622D24C
0A2126FF5565DFD1939D0B1B9CDC681C23D5B4290FC0DEE5DE137D43E0271925
AB58E9494F503BF6F65AB2FB37DF46686DBF46DF1373800ACA4AEA4D2A4B5FDD
35CA288243DEE9E1A4F88552D540DCC64D40D45CED1C75803A3FDEFCAE1A92B2
DC1287C285DBF00023BB49ECE66002D175215808C2F8D50CAD1745554FBEA046
D16577044492FC8F0C9308F8DED0D474284773E8EAC26B8B167571208A3ADE39
EB9C04199DF787DFF82E3A5461BB5E7054FF2A57A43ACB2F7C0C6026FB169796
97F73730D9613967613FF108E42002D19BE29B10E311A92865CDA667A808FFD5
80B9E4DDD4641B69F772F7E84CC43AB9BA1C4E83ACD07CF82F4A2D2BA375121C
3C382EE69C972D86D8CF0FFD41DCA806DD3DEF0E96B9924020F29DD28FFD4A1D
0A3C432A22563CA5E35609700D716FA1D822A5F31F5F99679F5B57FCBB386F0A
0E7EE6BD4A997A2EC71BB454D9A51D8C505EAE085461B1E17C2194D6A80AA591
96EBA2C60AA6FB4880AB29140B7BD378DBD6B0A0FFF56ED8099E4EA44A67ACFE
BAA482FE69C7A2B432FC02E3916A79953440B67D436F043870A52BAB7D5C3D41
6C83EF3F80C853FAA511DC23F1D542E73A7311C83D1420B6EE3A74DA9B46A084
9176530E95154469103F353E2B530E3DD54698CC8FA571DF7D80E8EC7DFE7231
19C79732FEE1F6ECFBB0ADF27E9D37DB1A381FEFD5506104BAB56BDDCF4C0F32
5D1C6972EABE0A892AF33614D4CBEA1E9294D0C4F143D8DA14062CBAA4E0BE1E
28C8C27E733D0D7A46CCD605220333587092977AB82D3BC76477BF0166234651
CBE2DEC387CCC1437D8EAA0E3FD71015A11F652D337DCEC8DA0E034D6D3296BA
FD495A31AA3D7D09026B1F2E65A59A58FE7673521946C329392D560E64E031DB
6E067E95F437201D92655E75064E25A683BF7B8C632C3971F55286C40B8B7B84
055D35FFED4747A2A1EA3E84692F1A382BCD7A69C601D82CED94617C83AE0DB4
5BBE03245E86982087DA8C1896460E06646948F06E2837A19AACDCED0701C826
56433AC40FFD831316C5CDC8C76D590C2A73D26550AE25E3FFFEC9E94ECAF77D
B083539E44BE53C4D8056EE628F68A7753DEE14B34D88F597165EFD6DE3D1B27
AA993CF6B283588E06EB882279C5A2E526AAF5C7B6A9594ED42CADA6CFAC3DF2
28491AB7027880463CDC799BC2DB68C1CC33BC4E6B275E45E3AD3B64EF1851B0
33016B13138DD19F4D0F5737AEC23AD671F4C00CBBB409AFA0E9BF44FF00D3CF
FA0CCEBCD5EDCFEA819FF89FAF23DF5562DC7FE3D5E37EC0417E7FAA3C12864F
66F31F7C8A7D68565D316912F5E2A88B7EE350EBC2F88D71BF6A54F58F257572
485470BE0685D70E5568C9D929E6869437001DBC020ED2476275D5384C7A0447
0834FC8815C08AB4FF4109B5EC3DF32DFD7389E02BD2EB3D9CEFA0CF83222AF3
D5CC963D9EDFD707F08897D5428FF84CCE4421F3CC4375C6183C3971F9C74D93
B2539F24B556BC307FEA4A495DC310D3E9B0D8B526A916A2686560A3AA4EB447
100EE2A3D820438B8F2F5FAADB90B719BD7A581D16D1EB09D53A4955E35B3906
F0A53745816E44F095CDB7EB2BFF0D5314B92E721A210074113BBF9275FBCAC3
250F618869467672DFDDF5A63DEE6A9985E427373A5B749118BE4A619BDD4D1E
7CC801C240F7F7061F8AA494C1BD37AAFDEF3503FEEC9FF6D33C22D1A558336C
B91ACEF02A0FD969948B04F42F1B00B2BE3CB584CA6F60C1902D7785BEBD43B1
18822B1059B79E2151D874ED7DD95F14B7478F502D9407CDFB275EECCDDA5AF9
1C9D1632C3F30E2E6D37B5DF65B40DB26D6A5B0EA9DF4C9DBAED71FCE4B568CC
C83841BA44553496E22DCC888E1FEAACE1D3C3E8D5E714F8CBD0E3EBE075A774
AB8AC468CED541D45C249533277F60E7F4AE226492B05BB66E2A51781F8437E2
585A2C4E4E52827AA4CDCE52BFA2EE45824C852BC1C84A31E7197289161D369E
10E26075CB3BC23E6A76AA5FD46E0CD8EC74D258BB65001CDC74D44D5F9A2306
21AE28B44EF295799F2A0BFFA7F60325FFF798CB2301C7F8E91B3608C4965286
6BDAD872EA35B7A266A0D6A7AE0E9DB5921FBA6809D20DE47137ABE9051CDC60
01C5924B1FF2FF845C28FDA6D4B37E03CC0374334ADB994EC04D3E7CC943D879
EF8D84F2EEADAA30338E2D69289D1D80F71A718F74F694A5E8EDC1E408445730
E31E6BF595E6EBA1FA8CD7C481EA4302E02F05575B692A33A6EEF20A477B6953
1F147223C47AFC59161F2EDCC43AD22863BBF3EE1B8EB88A9824433201AEBFCD
1A9F31AF3B8F979E8E6834D319D2E8DB6F13790DE0A3DA5BF2382DD2FFAF7FE5
5D142E34A6435C9B7CDB325CB59F401FD28F16D373CC302503514006B4B50A8C
FCFF0D62AE0DEA03747105733A5293F02405CF3C7BF9E43639BF66385A173076
08DBC129BBCC8995D532336D8C23DB03434D3D0A475626B70451B8BC0BD25E79
FABFC092A2DCB165F5E8CFBAA79BC14A2E37277477D2C5ADD4C3C5629CE9608B
08429C8182161B2023C73A5D98B69EBDECC2159C5DEF14794B6792EDB3789FFB
E2EDC4D704E39DA489AD4231F36B008DD148D568202533E431AE07F2AC0ECB0F
5664E8C075DEF25433CBE9421C4FC8205283BD7C1EB838EF30520F99312C0146
F6F97CC42E7CFB28FECB754FCB8D58070074AB98DD10E18696EDF05347935373
3012808FFB3E62423AF0CAFBB9766E21A69173329B9DF7E9067579CCC3A4086E
08F3854F28BB102B757A0F1BA93E2BB749C4FE048F3235F8C4755F332FFAEF2F
24FCB313A5545EB966579FA92778B6661AEDA1B2C39143647BCF993310ED636C
C56A5E59457BC14E533A03D78D14F9C4A051F16B261A1028F0C9AE3AC89F00E5
EA5DCDFE48EEAEFE9E4CB24C5E2B5C236B6D7ECCE3428EA12C3DED82B96AE259
94F972B08A6DB5992B8485EDFDA0BD8920F47EA3BF4C901B5A595D476F9C6560
CBD82AE6942A1DB75CB52C879EFFD8CAE7357E27445DC6785B4AF69DD3646416
712EF06CCF29388F7EBD2F9629CB877784FE7C265B089E796D2903CDE09D27EC
C07440E679F95FACB7847F3B49283151279BE18B8D8FC4E2315F06FD1DD6B7F0
C9AC4DB2B18C20BEEE23D3BF10C3C2355CE52FD1C1AD052EAFC78B1E894FFEED
F2CC51CB72F814AC8DA8D79E7699261D662915EAE961159392D3D540EF1FF0F3
CF02B522786521D52792AB69B298D1CE29BA570100AC12FEB5F1FA3359DDAA69
ACC51224A686E511989FB80336175FA60FB417A9C0D030F2F68C4545F5A32696
21DFE2C1A09F416BEA443B93C66EEEB5AFC6A148597C7FEB6B336CA872ADD98F
E5BC88F27E5CB61554CC7ED8417AADAA25AE5CBDAABA3F35AC4339704AF1E740
89F0957BBF3A93933015BDDB980C233511FD4D61C87C1E4326E70B9D16290E57
67BC3A712F4825877574ED83E4CC8CFDD32AF2C9530F3CC139B40CD3CA7B5897
1C80A7F078F2D9BA44C9720351CDF32A88862101D9F4558CAF106948CB10475C
DB4498392020DAEFC478179B515D77308FE37603BC9238D3DB09D2AE82A35D59
8E4E3AFCF2637C4E4CA62B242E7F26399603FCEF0D6F133F400FD0DAF4A987A6
93BB39F37EE286E3DDF762CBAECD5573D96D657C81A85024DD9E50CD9F54798A
C0163BA4EF9D720D9F0D106C3B2903AA92BA8B56EC5BB895E33FCEAA8F86CA9E
C3CECB989C3DCF1526AD31B6AB4CECED28E1D9E249FBB7361BFB7A71FFC6EE2D
3E7EB62E5AB13032FCE487ED57E507690859310DC1FDD0AD84C1CE8D8E289670
1E5056F39B81574FFBFA93F0B76EA4EE6AFBC7C409ABECE7CCFF323409455456
E3EEE5892F65F2CE0F50B913DEF145E46E78261C612A6F51A26342C12165DD20
E9DA0598DC0CEDBA913614E10EA8B83C8472F1C65C2246FECC731EECB84E67CB
A4EA6912CF05E4C452829F55065BC62A2EFD24DDDF2B86BED09A125791824794
96019DDAD5F6EB90F1E78B008CF119EC994E18384187A0A2348A470FA5A1441E
888D93FBE1714AF1DD50A90B3CC79FB8E54FDA48BDD87DC466D2207CB0D8E08A
A3DE63946A53E7F0EF9F88AEB452CF4AD9F16896B4CB00BDFB4B6E5BED0492E9
9AA9B64BD506B3808CF3123146631FFA56DBF2A6EB2FA0274879075B88E9F375
16E3500C2618468AF653CBF12DF5F95B223597CE3087FBE7ACD9C920A58E7714
21DB746CFBC62EFC4A6FCE941DA144CB3B7EC09DA7AE055E6FD43D7B6663118B
45C7138EA5B6D48D4D9E5140D7E9F923659B6A9F9409F0F595D36046D37ADD86
7EEB469A1CFEC6524C0A92F61C7140D81FD37C6EFEBA860116398C103341DF25
1006BF7EBECDE09A0F35C9DAF9CD5CDF9D4742BE7A0A9A9C9D30AD7F1CCD6F1F
4D3B829BC729BCB7DB8119A166DF5BBE109F045D98A222108539597E58198678
0C722880F498F59ADE76854FA612DA6A50A2F78AC82428424B192672E406D39D
C96C8C764511B6C81D742C5D3D8A4B1149152518918D08CC41BF86C7754F7DA0
4EC217C6904D94B4A343B8C932A241B0237194B0B25522C6CB23494F45B1A378
73351C09CB6897EF6FEAC839A9162E013BF9D7FDCB755B92099E9B8ED6CE23DF
813C4C30C562F00B2650239A66CFE86E22043664892FD032831558555921ED54
4892CD1859B7B5A9C06EB53C2CECB471632EC71CD2AE11A00287C9F5EAA533FD
C793661A7B914454D94F6CC4381C5A4D6B6058FDEB3D5E0AAC15A70E11EE9855
5BF6C990EC344668A4D0344364B6F98D7548D7148F672FE3057E489093369FFC
3A94C8E610006C5A8AAE3CC2CD1DB28B6D5A836C64573CED8AE96A7C8CC33556
8E381AE0CFD91D6C2167475553819FC7493C0E6144F93CEB93173C0DBC4CA761
58069D27FB0F713B4CA6236C25E0414E0487B4E6FDD1FBEB5E6F3716795A67CC
96F255A219100DB3C49012B16B50599D42073A9E7C459A4074C5DC0DB2B07BE4
B6E1250A8E1357D853DA671D8D6A5823166D5A49AD37BCFC96A7C3DB67555C3E
913F408F39CAA1E06DFDD4B92017846D135703459252817E08966DEFC8823C1D
0C707D61C5B03BD309EB05356901C8469FB20999129844DBE0F0E7B4EDE1CA7E
FF1D3E00CF3AF6284AAAD67F28F2F0383F43ECCEB61AFAFD35E3EC09D6401A41
87807665993B62D4834BC8E5417477A97A7FA3A0F8FC0350D98D04EAFA970408
E77F14ED99AAA77373F9CA75012B48606AEA187FC3EE8BA69032A9534353CF2C
2145B5C5B004678184AE1640DB17FFDE6D30FB7C6CEB4DBD9F7F1842FB381A11
AFE9A330F73060F3DB3B582939C93051F91F2208D8742EFDEECF04DDAD21E7C7
51837ED0BA2C2901EBC080522258B1AAB4FA50EC240C0D99981AE195B62DE141
272CA558FF9031FE7A7143DD96D7125E33636184BCDA9564699D29296074E167
5801BA3ABD21A88CB6E865B1321579C445FA05FDEA30694776F7F20C897E7298
43AEDEA74B515544C1FDEB610867F0F21E8077BB573460C988D1D0838F6A6859
8030D30D851A05B2BE179C4E0F00DAE4FCCC45B5549827D318CFBD0E2ACF9D73
D36CFA26E389FA412EF947AA1560696A4E3B9669A342FD69217AB4E28FC6D942
6386710DBCECDC5FF286A83E3B6DF4DFF1CCCC18F9D379731E5859B331713F20
205615B14596215F1E391A2599736808FDAF0FB604322079FC3074F207E33BC7
60C1163AF13E7A2F840C73294FD6273F61B5C977256BCBD7A36366C57285CD73
E10ABC47333B2A0E60948099D277990C573A49ECB535590F457EAEACC4391D1D
9E86E34824171B6F5FB592996788EBEC902B50125E379C8349424B395BC33851
3A95EBEE8240763AADF98B38D2160D52ECB97248FEDA6BD0F9792DE49E689422
D3C7EE1B796C2239456D03EC18D87B8699B76B7B406FFE93B6B3C6039144EF76
2464734B6738B2FB09A11E5CD4735EC3BC4FF404801730FA95E4CACB04481DAE
C0A11F02D11C65F8A1B3296CA8F4E11333E4F074D29DF85049DC3354DB1EB12A
DBB682EB1C3D113FD7B8ABB8F07727152E8B1B44729A61E94DCB0692FA01BAB3
388390BF249E57C8527BB22C00E144D1DB154A836DA3D781E17EFD68DE05937E
970DCEC9D4D868D7A13236A431A9F4EF8B25E26B65D5EBA873A102A80E6AC8B8
D12F4D3EA2FE60AA803084E42F81CD993935C8A3E729510AB810587453626E17
051D43E13A9834F49DDBFE6C515C6FE87F3410074F9FC2A4018CF12154101594
89EF8CB9357AB5A1D2F6A6B1CA942B169A2D15B6EE4EB42942A2C274B6143FA7
14DE8D9C50E77CD20F276076CA4E4B0FF551ABBAB26612FEA3318CCE048AA66B
EDFFAAE93E70AC604F9E8345F462B5A3A38F8C4FEA66BD2C6569AFB469400DF2
DFF50FEEF7CE932AC0AC0114E0D60A55D8EE106CC3E064D4CDC19D96E78BACDB
C97B11A1C67D936326FBCAED663653B1F908DBE44977D82C32F8AA9D3A20F514
70ACF6E8AA7759AD50E4AECD861004A74D249CA1A39C5439C8555F0634B85C84
D06792065ABB6EF67DB3E8623B66AF9BA5AB048C8BA07B727460C68573181F43
24577823564968E9F712FC4DBAAD88D35E75378D73BAA8C720367FECF5AFD9CD
115F454288B6ED7475CE269618C7271649343EEEBC717D96847A75D60AA6F721
F8C260698171ED1B20C54E34902B0706C496B1B262955A7E9947D5AE6331255F
42C40D3FCDBDCA46D2EA8B5C52BF5EF90D254C8EDF98779EBD89EC5CCBD54F85
3025482BD60BA7691D735B78AE1038E4C8BE1D3177B20884FEB62D3B21CB407A
78FF85238F22E1F1523459D1B799A7DAFD6533EBA8993AF5FD0F15DFF516B040
55A1885E4FD31CC3C456ABB6F4909688D6819821909FD1167FBCA18349A10AFC
BB3520537EBE8202B7072C14D35B37750315F9CA3F13736FA3171BAF1FACD4B8
C19B66DDFE32DF1B42AD4DDE43E23C245C35258EC02BBB9DDBCB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 5 /diamondmath put
dup 14 /openbullet put
dup 33 /arrowright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E6E371B75D78AA87381B96012E722B1
3E1628DC89D9009FB38D9984AECC3367A8436F03DD58F85DD4971868D7949E02
6CB56141AFFBA6D3A542E3F222158E78F578DE2BF54778D2ED73BC39327DFE8C
CB65DFA3764417795ACEB160747229B1A13467CEE339DA1AC22C70F56C764ECC
79267B775D776A85DA769B409CB0089C91D6A134DDF0E392394477803A32D9B1
BFA16F3D80987AB66184747F6F5A2ED4CDCAB1F713AEC3387148FC4A65AF7C56
C335DDA0BA30BC84A6F1A0174F74032147A29EBF9834A6C02307A8046B536391
4FBE2CE1730692FF22F17421392EC5CFBFE657928957EAAC1A019AFAE3766D96
CC39A78D7CBF8E7049B8763EF63A0122C016C4795189BF4134788FB1DC065042
9927A4D7A48429F8F88B1AC72FB9B6A9C43624290BE0E8C6440DDFBA0CD96B6B
70D8659AE5E0E874FEAF7C2BBCB8F49BD2EE3A375E60ECB0C1593EEFA4D6EBA2
BE51ED502F33E42149BCCD84D1022EFC0ED35400E904B9CF48A6668CB8F15F91
44E36E8C2F5CD51868BE60BA890C88B33B0F28C174BE7AE72526B98A9A628D46
95BB3E54972CB0156B7CC6A0154CE9517FA9DD36B10EF2B94D96A3637EBB3CC2
D90F60D29C79967A43C907A7793759385B7921E81CEBD7DD88594DE4C6C943E3
1168B4A94EF5A590B0D6D3D4526570CB0D0FDDB41897126FA77D6A3A168F819E
FD904D14DB0248F20FCE2CABD79B7C2062F469F443133079AD2C197179920CF6
D8F9437B93291CC07A337C6B7F45F8E2582F73F1B6846C355131B3B2B4F48B23
25B33129B0CBFFD305A12CBB92B35774058C3C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 18 /grave put
dup 19 /acute put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 58 /colon put
dup 61 /equal put
dup 63 /question put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 79 /O put
dup 81 /Q put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F43F9A1290E91C463895BD12E8A831DAD661EF23CB9AD2C26CFB26
71B72D15270CD8CB1D59CA2D9DE884C96BB923B1EC8208BD7DCEAB0FC2293629
2AA1F72C6B470701C381E335C2364CFCEBACDD20CA36182CA7E70AFF5B14B02B
75CBD0738E35DAD8E60CB3DA4DDED557FF9ED386DA52D10615E700751C842FBC
85D89C0E713F556814E051C6CEFE7E83C2F379B88A801DDA565BE73013DD56D9
44D97798564787AE6D5A6A9FB777EEB850C7481B4A353EB9279731512C9B95D3
2ACA3A0D44585E55AFD968135F6492A9381FA2D126CF50373AB7D47B509AE6F5
C4B100BE8334ABE2268DAFB7983BF339540A8D8280F3576CDCD4F21408AA7D95
D50A7C1599E62D4FCAB001D5F9DA84FA530B88F2FE36B36F9968B5CF9FDBFA11
DCA0E08D087C4C5F4D744BFBA60FC22E964CE10AF512C228F4CFC3DB21E38CFE
AC11748F9B23F33426BC4AE3F026AA8178364703A31FFB8A31AB6328AA3B891E
A9410A536479A9A0378B1CE62E0205B073A9C3F004DB440C37234EC8C030E18A
42C47DD0FA1EE3521C98714EC451AB5E544183431A9C5254CA9A7F73A55B8B5D
A98941739E254A5DD0C519CDB28B2F4B9E4850788B0B46E26020DA98EE4E7AA3
9B55089D13329ACB496C86999B89ACF2099533DE1756F0248149468CC0F2C45A
CA7E24A4C93B99FB57A66912299D28DC5EA30C0D4DB0F6CDF4F8F910454D37E2
35E519763C2B61D2B1E6C3DE314A739F6DDBB748D0C6443D23FDFB6D6B162BE3
95DFA7EADEF780AF4D3EACFF2C28AB8FD4530E353E5270D5FA6599BA4CEECD08
BED2831AD39F1E8794319569D09632A4CD65FE1A20DE8FB18109D0F8B7EAE4F5
4715EACD45673984D60AF1EE8E6C93C4F789008648C1F96FA1F8B338EE47E2A2
2305B46D033B7C7A3E634072E1CE2711938D605AAC075BB8E678C339F7B42198
3E61AE2035C3829B1CEC2E9FBCD62C20CB0AE0607EE97E5A017628A9A8A5208E
BECACFDB8813888A023B8731F38AC5186F78CE942D14E03FC5B06D07494973F5
249B89DF0C0C2A31A235CFC12C3E168EE1B0AEBB2ABAC2B90A514D97941B1255
3D8AE43A964D2311F07753D0CE4ED2AD6198A473F1FB4186349B1F747F1354E7
0E1ED37284DDD65E8228EF2322AB847F88919FCAF407C96C3AA0B2F20F09BD34
4F8BEDA3DF529A995E2CE2872E1D93AE15DCE2969AFA5549506F9B6EF43641F2
DAF9BB3C19BE207736ABCDCA86705A16F55D895A66DF69692F9DA83B1BBFD606
B43CF881BAD3820DCA4D00D8F5612DA38C110B0A638CBB9FDE2DD6A4C64592B7
9F511EC5A8780B2773D4D497725504E4DA6CC0CBDF95D017F79A2B726FBF53C8
631A508AFC683214FFD76351756539F7AE03D9BA8301AA84DE6A7EC96D1D35FD
F7B2A3B17CE469506B7159B809BCC79613825EA23BDAEF4AD2A14DA08B0530C9
6D9D5DBBBD6D42C75AB4F8790D4FA04FE263E9D7F4313861B4D82AC088771B27
4BFBF372840036E3D1E71C93111F531B0D8E13CE2A3E35B2226BA59807A4E5CD
33130AE0161D50A52F478FC3F8240DDD4F45B8572E9CEEAB277EF3E6A05DCE65
C7B986B1E5CEDDB6D121FB2706AC4CB76B7BFEC5FA6E23A2EB89333E771C7F5A
BFF5C667E681DE349EB88B977D1563974260980EFA1C84D5348740B8A4885ABE
1FC79E819624404E8EDA64581718ADF5FB27AACE1891306516C3DBE9C2FE3866
5D7F1307622B5904278692A0A0CDF281B44754D45D2DAB998509523B60945125
8BDE73600693418A565FE5D23B8E450E5B4AB4D1E16A539437E08C6451918CCB
28B1A30ACB16686869E6DA64126869038DA257DC2063A50DEA9C8CD10A4D19EC
D6F6661979BDF422BC83B4B51D1A0AE3CE120540E9B6542452C6B23574478290
F37C42140BD42106DF4CE93A8514A29CCA5AFD1215D847550DC0F06DD1F83FA5
0BD6E8B5A1C11402138F3DCB54A3624AADFFC21A73745C87257CFF0651F978A0
9800A142DAA73B7F1B157999F47494CBF46A09BAE5AF23BA3B7CCA7EB679B33A
E706C89CDC863328DB0F61E48A4B60BAB9527FBEC13EA4183B335FFF6AFE1B78
FE6D542317CCB8A02DE781041612CDFB4D6D316D623EDC569EC0FB5A2FAFDDDF
ED3BC83CD5AD0E88F6356BC4188D77F202487188A7BAFA2DB019208D8AA8F24C
3989F5373D791DE5EB694B6128E36279CAB1761330543806F1086EA20848A86E
FAC3E4E7E3F92748D3F08206A8C49732A6B0DEBAE7BF7A16F17D7096A98CDCC6
C83A858307703AE49E44F80228219EF4BB5F370DB50A77DDBCE25F0C65B2D601
69538A9AAE70077118C37AB2FE439C8CCB6A455735E0487FE3DB5446B8B45E71
B791F80AA53B258E61F113F3C24ECB37431DFDAF370FBC884CE0BA977B67D827
45C61B76CD0D6E5B7B7C4BC127FB7367DD9F74FA88CE2B8E062552AB41688E3C
BD8FE38468C5C26B018506C9EEE35D436FF0F966C5A5312C2FC5CB81A8CF4E6C
DEA9EE0EE9B47583F873352C798763F1AFC03983BD8E285B2D357DF1CA63B933
3E6FFA6A00F88F0C9FCF40E7E8AF2520D352FEC31CD670D02D63BDAC4DBEB2B6
BCDFBB7A9EBD415687124BC908E05065257FAC9F7EE6EA843C6E6D3F6A30D879
8F3063FD8E9C9CB839631F3E2DD4A25F8D21A4BE1404DC599682264B808F53FB
B44FF8C272FC14639FD1503BCEFD6CF1D19773AEA75BBBC22EE7D737A28C69EC
FB83ACDC25907F2F3D86DB68BD28D6A2FE2A41042AE29BD952EB785F8AE37DF7
D6057C8F2C2F86FEEE11A8AB47534734C69C09F6B2A5FDD8C040820689AC0789
F9C7B7A3FD279B72987854302CCC9E8ED648ABB8B8195337FCA53E11FFDF8BCF
E564B66B451F4B65EC1EFEA85254D1D90E38138B3390BE0645A187A7BDF4C273
63BE4D70DC6BD22A4C211AC173579CB9C8C51E88FF61494BFAB442C8635F082E
3976B95DE6244F1D5EAA1BBEED508E7E03D49BCEE6D63D4B7715A8D7B1FAC326
FFFFA8094FFE52EEFF539E3EF6F916B537D1EE3D88940F645C48E611F1BC41DF
08C4156958647305BB22B5F1626083FB8EF288D4A22D7037073D9EDA2B181D5A
EF433EE05D77A7E138037B75BC23893B9DAD21E9C431EED47FC02CAA84D03E74
15C80F011017479CB302D0E9E0B41C410E3CCD67C0F7C8BC7CAE640158FAFF1F
595A46DA8FDDB208E93DC074ECA733FC592110BBE62804A32CA327A5A7518240
DD39B826DF54472E42300CBA463409FA862C0155DD3FEFDAB6CE7415179BBC12
4EFD17DDA190E9E93C8DF8100CD1497FFF1E8C00E7541B2D472CBACFDE575386
CCB586A0B134060C4B8514599C565CAEA48390E036BC43F6371C96EDEC11B233
FA978926D96FD8B535A7CEE95FA0AC92AC8228C8A2518CFEEC51A39F1240EA0D
7673C78E33FB53B888EA6B0D67A2B03192D10B7CC8B43FD52165C16C8AEB2DC8
EF9E085CB44907874A1B286BFDBE1F4A5DB234458591E0C05D070BE32059DC33
368DFCDC51836569D2A30F9CDE995E0623FA802591976CA249933194B7D1A858
A2D3905179698218DA16BCFF8C5BA43CCF6B0D2F9224B430B18E5009776A6F90
B6F787F6BE5A1C3C4AEB59EC58F8C3957FB298A96DA2A9D473B679BE12EDD206
9EEC272D66C1F8DED6676F8C9E0B72B887F52BDDCEE1E967D5A7DA4B6B78338A
916CB5B510FD5693DF2ED6EDFF110AD9468A0E4A017BC06D801AA613EF09BCB2
58EAEB5620FCF91935C560B0467C9C3A47B945865DBE21D65023C7EDEB14401F
3B9806CE5DC67D724632C4FD3FB17DBA69AA525E881FCA16B5284E95F5973AA1
543F24AB2C5C78A6FA89D6C59AAEB45CBFEE7495F8C6A43E3FD3BEC432A66C8F
36F2FA45500878F92688BF3527E91A1565649F2E2EAA6A5E9AD0CCD91CD062C0
2112CF08D764113083271E90149A0A5794FBEA570937EBDA1B4BEC315FD8BCF4
C472D05C304A5BFA67ED80CE2A528175FCA78855CEBB993EBDEF237943607554
F1F1B427889905301E953122435223380027E644A0E03BA0BA8BA4854CDC884B
369C15E72799C4C1C3FF9AA5DB214D8A916E6A669BA6F98B9B6BBCB8D4454554
E52BC8D4D98527B5ED5B7E5005F73C09B2279ECF72E1EC79A8E9E3CB4833799F
8C044D724E2704024A20FEC90BB44F466FD8FC14843BFD7FE104150C417CE93E
C6C640356F6DC524D3CDF776EAF4F2E0B0FECCAE3F3697DBDE641718FA634F98
D626A09DEDE5FF9FAE6ABF0B9D711D2293F1AC2262A65BD0C0DA27B1061118DD
07BD4F953BCE443BEE925A42BC7A855C906D22203321C25F0E4927B5D413A210
80DCFDFED080F13E5F04EBCDD52CADDBC8CD3907AD5C9639AF827657675426D6
E14DD40726C5DB385A63430C0CFA1EFB2B4F9BEC48808524500F3A6571A34330
527AEEDDD98B55CACEA45DBFBCB4AAC84D8D4D853ECCE85EFB1BE3CCA1D2A24F
F1F66969EB93566C6C3379B07E57FDEE9948B63EF43F752BBC05463966D80567
FFE0C04BAB504A2188715740D8C6953A5C3B4BF2FB77B089DD7998DC56BFAD33
EC558E055D4DEDA1E64E8F09EEBBA3174FC9E4AA439B5444E681285BAD2E72EF
2576E07C8E2C059F663C074204A86CF39438BE57EE2B88E3ABBEA52875878C15
860E34B8C610A9F41A08DD3CAC1D3739916C5C80FA4AA96FACCD7C5FCE92DDF5
71B4CDA12153BAF9CA35E0857CE27D9DBB964B08FF799C165A5AA15FC9831C55
14EC8973364D61A508495ABD862B87693063C3D2441E9AE2C99191341CBDB3EF
582E76177FC90933ECC0CD625669C2B475D4AF161550CE951B444E2E55F03DD0
73A89462B914FFCE730A98382A8DBE9BAD44A646CAABBF95F2345B137238BBD9
5F8074A479C977200639A541F49334C1EAB9CAF7B95D8F139A0980EEF27FF33A
CBA97A1116C6900B31EA7DE2617C955A3304F7CB477E160678C781B76CD55094
F8249CE005B47518084E0C891AE07B52BE6E03AAA2FF869F3F104189B49E90FD
6AD32DFBD414336C760CE2F662CEB5878759F252D81295C0F004B67BFCD0B3FA
18DF9626EB725920B285FFA0D36B93EB69739FE9A151275D118A0B9C18388A8E
8C81234535A9CECDF6A6A089FA6AEDA4EAE5A66FE286E18556AB11D8620FBBD2
55B9FB355F91DA8DC7628DBEC9B9448BE96798204B8A791BBE837CD6EA496E2B
27A5ADD1B5EBD1BF8FCE68D1F14B78CA36FB84500AC425911DCDEB00FAC79A3F
554B8418D7FAFF098D9C6F3807419E73F21001B6BFC270C04FF007E8CEB50103
32BFF4693524F314555AE7947B2B7A419011444E242829760CC760C370EDC031
5D78D8E9BBCDDE8984D419D55550FBDF9B4CC3BF7B295FB8E35E5D887C26E8B0
5B8482B67EB7251D1E659C18366D3091E53DA7C2BF1F7E39EF54C8A8133F229C
F05FB93EFDB985AF1969F468C10D26A8F5F344E7FF93AE65C9A76D629AA1FAE1
A966EA8F2E7D6CD011C6B8C62BB0004E1C907EE8AB7C57827C4DDF3CFB7751EA
1E212F4CE1ED84628320DB44795B8A0E1BEF1B9D2F2D3E9BE88E161FB7B0AEC2
6D4A7A0CFD4AE46B967AC02D81ED6521E69DED78DAFB092A577F9B5765464226
04407CE2C6A28596F7DF4C9E3B2CB1D4CAEC6E559FA59236B829989FE123C0CA
BE90D2FCDF30B5A8A2D5A383678330C939EB9B886BE86CAC90369FF71A3E5BF3
0EF867481E27D9E9ECE0BFB3284399469658FE713A585B21B052051840C94A94
26371D63873656589A838ED15D3D30E1FC7EDDC9C6594F12D344C13363CACEA5
E464A9B5AF831A311D41FEC5097FF12E63D89425977C174D3FF5650A7920F17B
44A69CC6FC7D803923F3780DBEE0BF6B4073076793D7AE6010C2D7F17D962490
AF817AD9B408ACB9828FDD3776D6D3F9D40430020176871CA061C48D5ABB9850
A337E455DCBFAF75BF900BB0A5654F5DE11A6BB9FC3F32BEADB3ADE4CF393657
8A3FDFD559E844977144BF8478E08678111E212B06B78E0D36A58B156D6EF159
0E5706887FADEC3771010093DCD32C4C4EF8F13F51CCE67FE8EF4BA392FAA1D0
0C2F0AAC4571E2D54A5B72AF1EB3EA028AA12EFB3A2B674972136F0E11D2B5C8
4A7775C7C6663610A05F7686292ED71965E5BFF84DEEE6C9520EBC1C01B8153E
D79E403D79C383ABB00199E51A7EC486B68A326327F2D8FD0063AB40C5F063D5
C03353F25A5EC718CE7725BDA8E502C010FA8680359A7F01AA46364984FD0DDC
77022FB72F93F75CFB23FBD53AF872999307336A4E078A9F95A07899EC74D186
BB71BD6D98104A2B5F87A6C4F695747292491908F8C0217092BEC7520C81062D
0DB8CD2DAFA1983EBC829FA6CE850576DC344ABF9635CD14E0BD6FB9259FAE05
3C485D0A322CB497B0D3CEE33DC275C80235F80B7A93508A9B66A499D697B87E
256A0C7D43ACC0684A3B6202C31F0F5237BD215FD06E66044C609E5370DFB79F
2BA59B1FA76099873214B62E9116AB2B96BDAE220984DA75B5DD0F7696B6BCBE
9AB85E5EC163B0B34D548ABA0D2F492F2A7B12101CF3D43E18F8BCB711FD9957
E4987B3C99CAEB50BD741D7FE9708448A0B2D3E85D79475BEC927809B26DD215
FCE5A288127829C0EEB9B161450EC0F252B8C777D1B3ECEAE7913D382AE0F7A2
409473752B5425176D80412A51AB25D76C471B00BC539F3243709D378CBD093F
B80FBBE8B905B48C890F19969A42EB8B2C13FA235E1201DD9753020A60171F89
EC03E6B53F1E91BC246F22E52C157F21604F7DA8F2D18473204DCF62B52247AE
49B4CB901556E63B6058813331285E522F7B3518450B4BE9F70644C5ED5B30BF
9CE29CA529232DD0FEC5E7A9877787D2734DA39A4EADAD01C16ACB4B7C930213
9DDF31949894FFFCC537A76EC0F3AEC11833DA0C7504D1B0332C2F1F38D1D24D
412E2DA8D9DFFB3EED3965977C3D9D85848AD0B52EDE963E9BA1EE68126CBB12
22F04755A21FF5B4A832CFB967E7BEB1EC4F504AF85F53CBEA69C2B26FFA0489
1EF7D65304B13C5A6329BF3787D077828FF9AF1E7AF5A79E7D168ECEA10D0BC1
200E3F0597A12083371CD5C5B648ADE9177BDD7CD963FAD7DF285CD61EBC8EBB
4F7B8ECBDD43CD8925A0421FECBBF4353DCF930B2126FCB0E7BD020554071ABD
8D56144088F4C6DF8E84AA557FCD34E72770377020EA7D228E833AD484C8E892
41824C380A8513B6C773D875FCF74867BB2DE3A630E3203FCA5D1F3EFA949344
83D398A97B95E8C2B2DB347D234C04D4B0DD4D28D9F747B74E1A845421AA479B
5B48F87BAB16FA912EF39CCE332B8AD2E4359E3097F55F3DA3C6B97423DA71D8
9850C234AA3D2353A0E722E2098D35F0F32F2A8D839F08E842958325BEB07396
BC4D8577F90E70190801E85097E4747171057A92E34909A8F71674307A6E583C
7F9E7425780407229524AD9C50BCADAF10AE9FCCE3F60598477BF73995AA84E7
E3D79FDF13BF757784C17FAA6CFFDA5CBFC5FC17F5649FD8D7979B28DE9F120A
51DBDBE9D95FACB045CC01E94D03BFB63A5EA85E3C2EDC1797CB479FF0855957
4615D7F5D72D2F7BE0159FAFEF4542B3A2576ED4D03C5FB1090299C19CCF8FF5
63E936B04CB1EC7BCD21F97B14C68C021798BD043235694EDBE27D8BEC8821E6
D2748CD3BD5E072F4D80E6FA14370AC38394C60448DBAD6CE548D7398B3F261C
9FA2846444DF04F9296DDA87E015DBA6AAE827A1400B692F2C7C200000B2A23D
A2AFA816A3CAFBB82F6BA2AFA49FF46B4BF9526D05F680D580BFFC7017AE146E
C4C7A5D483D5FA322615A94823380B9C8CF34E6892CF6E9B52E799FE65937B64
9BD250D580DF9055F899909257BE14CBF30481F700CEBA66BDB91D16EFD6B431
A37526209A51AA729421DAEAFA42B74971A0065C67CA1678DD27205DAD20C851
DDF65310FCF2FBADDC21BC1DE07D61C540B51A859E3BE2EBC151E7E5DE52E25E
5F08715697D5BB1FB80C8B068C77CD10916D4FB8741B21E17115E5DDF24A08E4
FAD0DCA06B3322C2E09B0E9BDD7229E8D20200551EC12F374B9E181C64DEA3B9
0F2BDD1ED549D984E311E25040E33CF93C6DBDB601C4E219BE598AA09E444D0F
BF3D0F4CEA9259007147C18B2BE0AAAED0BDBACFEC3A48678198C2751D81F2CF
1DD7231AC7CC06981386560C1527B5F6975DB142C774F87C4B203BBA90163F07
CC1062111CE6721689F6CFD5B152D2A8BE3BD6C3370C5E0C0E7A22DAC8BEDB4B
9BE434FD8FD6B20A6909AEA3C04F62A61136BA30DF8C9D1648675D7D1AE2A911
62765EF09C725A3EC9DFA5CE13D7643015A56564CB71AD74F288F7F653568C5F
1117B0285CC47DD8FF902C757BF4E9765411CEB814851FE68D7A59E8987FA654
5ADBDA828A01F934879AF129FAF8FEC53749DDB07F1108ED39F31C61D2810BD7
0FE4584E1620FAD4CAAAFF156E8F0ADED9B8FFC2C11EB6AB377E2AD6F126E0FC
C10DE3B6A87F0C838797826DFE552C947BCA7B586F1928A52EF1BE223D0DC9B7
94F5BC7F6191881A36AB6B647576131791BB350C34D66AF3D20DA0BC59F78B8A
A5DBD2C5F17D245B88B1F575FCD06F54FFD0389248BB63AF97B3266C9DC25A41
4154CA557EC0AF1B2857AC9B169E9076846F516EE98DE65AD21AA33F82C232AE
F1D76A50037AD11AF6ABA11BECDD48D8DB1466CCEC89D7989661D7D29F821B41
6B3A0821FA87290A18501F4A1693ECFCA83EA90A3185B6D9D4D45766C7F572BB
56C524FEC5C36B9DDA81451C0570686D3B12F86FB24681BDF1426E817F82DEDD
537AB748DE557B1EACF4F8D65DE749E13065DBB22195865FA8CEF918018BE032
415D25FD737185E232C9B8B403EA488B8737D11AC7A3633439A16A5179928913
50DFD36DE0EEE580084F53B89DDC3224A8BC1B84EB09BCA232391552E2D3216D
164E3728DD1AC0A129C6D14230931129B060CAC05DF92CCE6F87DA0586C5B757
5695FEB02E370BCD429EF7488E7E5CD4EAF29CDBD1D7A0AC4C411806874E3715
C6CB35074A65F75E7940C7387DDC733F57BF0D17E9D876EA7D8D4AC03D7C429A
631532059B6B84E5B7AA4EC36B35D9ECCF661E79E1E68062C369D2162B32AE7C
6950BF222F0FA66AF9AF9458AFDFBD4E8A15F4A90929FCF4E0623DBF6D95797C
0C42284C15CF13C3AE2A2F245E644CE4732A1332293A9DB718BBA071956C8CCC
EA8855DA91D630F30DF340B45ED288589A40AD813BCCB1F7AF5A5E54BE7D5179
8C737205BAF038C904A8D7F557BFC07F6B257F19FE87F1CA9751ABA1A717EF74
9C85DCD1A174E0CE36D447EA7E0B58144406A7F61F851483DF0DC22FAD435154
12FD90DF7BDE4B16AD9C1D44756F8B384AD765A9A17FF20B1C6EA49C6B892915
98B9772E8BF904F151344BB65F5BDFE7C0C38EE11DFDC7ECC803F6026F9DC3E7
D0D6C4A26EA99D3058A765C9ABE793E4B59C52861D5F35F862DD1A547BA243C9
75B889140BB03093264A62D0AA4931D930D45558122980C74F53E3607E026B3F
CCFC0BC073E1435C2A32AABCA4B4C390EE5B253FA18F27287DF688E6FDC934E6
6CCDBA723799D120E41CC628A0663C74A90214A397E2B0139100E539C2382994
47CCCAF9E28E74E1F2915E388944CD4F47011CB6C89E01927A5B70043BD6E8D9
1DC244F0C67EC599CC5F25A31EEBE4802E375236C8955637FF138CB64571A33A
1F6F55C8FCF8C7C493BEE0CA23CEB26445D79E6E1DD9D0338A6C2773F5B7EFF9
845ECBB2D4C1D174EB340633981D7059B86CB5E1B2410664A9D1EF00B6BA97B4
9A7A333634117ACEB9C69016F1DC25A531F976371707329D3E11076808AB23A7
AC1990FFED314E8F95EE42E675422B92DCA9E590EC42E0598045B3A9B3F1375B
0DCBFFD9F83DF1AB3FE0AE0E9CEE223833165449F0FCC4F241C5663DD3313EEF
C0FACF147D4703899A00B6CE08AC39563041EF24534780AB4757F4A752ACA6F7
E334D0F74C11FC4BB8D04782F0A7EC9E1CD09C71D6D78C74E1D0403B3B686E50
D0B5514B65F25F3EEDFCB706ADDBC05DFB9DF032485354BACBFCCE4362C9C5AC
2127058B91728CA5763B1979FD5491ED7E488532CA1D5C5D262869C972C5D5C4
DE1F3F9E998F0A1E1D56F1E60BD47E2262B6BE57A128D43EC71195857C1E5126
EA0C075C7583DA96C9127D43F83E9BCCF201C191DAA9A87AA7A8FBC6F8EAF599
143CAA091A0BB28D1E35537DA425E5EE84A7ABE62624FFCE0C0854BB1972C105
2723EE4975EA31471EC5AB735DCF959B2BA072AE483511C817E575134613A76F
0A1A7466003DADCFDA09D54595A0D789E8DF1CEF8C5DFD1092B804CFB90AC803
F949F2F735DE69512A4E5E19E6377EFF53A3E2DD1CF887A1A98A5270237A2192
9E44FD005409AD8A2CC52FD132C5C8F7A0E64D0CD94635E3C0BBFFB78703D232
440D6E4F4ECE4535C1A5C0D5492238EA2FBDCB8D385AAACB84AE4470E77FA2FA
EA888AFA9FF11FCD0E6D1623BD87C0E5E3C740F93819FF2D5D6B8537B41795E2
43E1AA19583A0205BBBA6A3CBB9136DA994838557F9B0E3B99DFB60F642A4250
01B10D22CF2ABAE9928022DB318B479C662760414C0140E79151F95EA041809F
FC42DD855B58E7A056BCA75AB7ADA049FDFFAD8A07C312BE835426C98FFF97E8
8DB23D114217B51A49E85563C8D8CF13FD4FCB9041B645BBF198315B573D5140
11D2FD0F8CA39EF513962F2D2E8F23F511D103F0399F45D8C1B3B23D26AF169B
38137F026528D5CCF8CF6FF57648D6D045C3F3AD05809AC3CC7E6BFEE1D32E75
F24621D3CF8849F063DCFAB717D1B6883E55DEBAFB73C89D19FD73B3C0F1050E
1FF50D0AD60728F08FA47BDDF287FE2D212BAF29098141DAE0F6B436293194D7
E475FE40718B13F44D8CDEBC1B226D1E03762AC09986D78B2AC4D16A518776AD
E7A0F73A6EF91829D77FEBC9FB26752C0FA172F087DF816446221EEBACA0589D
A80B1BEBC912FD3C0933034AE9B70EAA3CEC79BE964199487D2FFB0D87B6045A
097D8F8BF2FF7EB1B033B0C115D4E023936E2910D50AC535BDC6F646E700A2A7
986070C5D614565D5CCBE9B235CBAA330641CB0AD78D34F445EAC24F43E69900
E6C7300113DA694FA29A8CFA5BD39CE831F3C0876DDB50D157AC101E1A48C561
E587312B8B7F8EAC363D0DD526E92AD75DE0411E35131C70DA87C301C3B75107
807C69E94D4F88A33A9EBFCE9423F23662B56577E11B11630B931438FF0685D6
6F05F4F95B1BF6F0E561E00A9545E718CE2C51CEA13E1FCECD688DCDC86B3D2A
ADEE7F18B25936FF3D346D4F84F16B1254F4C0CB41430F4594CA6B32AD326D90
217E6ADB6379BFAD1F9DF4CFD885AD15DEDF62AD180EBB1FAE8C1F129CB4281A
4AF636212381E42146B5D9464486FF87A67A2D1C8DC9035D0DFF8E9106E28A3F
1EFA786547F149CBAEF9F12FD78B595BD2A5165A9A2EBC4AD908CB2335120250
CCC1F083ED2EB0E97124714867D53B483E3DF4DB0EDB70EE3C36EE84F27DD910
E445B7877BC2838418C79CA751F53BB6E1153B3EEA9AEFCAB6443732379AE72F
7FBCF4B6C2AF7686BCD4D39E4445599115B3DD88BF2A5EBAC9D1049685BE458E
D625C540312BC17A794052E9F765AC028F7623A411A615B1FD4252DB7DDDFE9B
975F2768969A675889ADB5FA3211AD82813694C16FFAEA8F3CEB5C4036BFA5FC
AA45B48370DC65EADAEA00567B5196D587C4E5B3A9C7355F85949F1B2462E8C5
956D4B12675DD7522FED5B9442708E04D530C1F6B6BC1D4B18F6AE1D42DE2F3D
6C297EC7E6DA1C9E45E419872113F255BFA5A6E05E267C74A941C27D1B34B6C7
400B1DE1F62DB1724A31F525233077BBEA5AA367C2A2018652B83348EC46B36C
DC0C164A505141FF30B9D949613BE91483BAF9D8A00370371C6B0BC9DF2ADB58
D66F8F22EED70C2001EA03F4E5913817EAB0E6B4AACFE05B26747B92FFC14548
EFF3D500C82D0F05B78597D639FD0CB37BA7301C6ABE6A067F6D67DBF753987A
857EC09BC0805845BA6D2F05ADBAB762F9B0E0A97F36AA2279304A1278ABC490
06102EC9481DB2606B60FBF49A63353C0A96E3F05984A0D4E678A1DB49CB3908
A8DD3AC15BB764FCD31B767D46506743C09CD5737935B84DB8F7E55CFB3BB68F
3FC3DCEC7059D054D24407B1899486964EE0B0CD6CB627AD8978D847CC54F636
CFAA3B05512D5CD92176FCB3D2FDF1E4DD941E9782666C01047A44EE42B4F140
D56655DA0470A1CFC96BD594C7258C8F9053F91562E152B24796A089974682BF
304DC94ADBCF138CAF27E6A17ADCD7CB3B2BC5CAAC0A2BB48125CD700E1A2E8E
5FF6DD4A49B14AF141213E58CE142D60B0033B11A42F94C7FA591CAE5A4D1370
DD12DEE8DF69CB5D60D19A94C75395B0B297138D0215F8CFA63D13DCBD473477
1C5A8DBC3AEA85E27CFA63A21072FA3E1FDE672F8335FEB351DCBECF77B8AD89
F56DEA810CE070FB5641C88BB862F458C374813E2B4484E9A4A13B5F806C9641
94390A19223DFC5F44946F3F0A9CDC24DF4FE07ED625283A73244B3ACB05DF9D
6CC495E3A001528D656062D9D4D4FB186A2726328E412768DA470CA12F31187B
29CB34081B5EC100EC9EC6CC8A121A028AB088D8A5BC44AC9F80FC54ABC6CDDA
BC34A7F88EE867F55C821F25B1FCD1E6E25D397EE8F6C6ADFE842C3036EBBD00
4C5D1F17F7D3BD3D2C349FBD005EBAB4FB447E8B02DE934936A4C8591B62C356
4B75C40E802FC110C6C5E82F222261B6587F1825B14CEE1B098DAD6ABD3F4681
A70CFA9BCD41D680561EA75C5CABAFCB69892E2847A4BC4A67BF8338CE71C14A
66564A75CBCA8DCA9B9C9F0F941766957C8B4B4A583C8A04F8C9AF91CB3678C8
9193A58079C964B1DBFC7FFAF3AA87B6C112E146C0152812C3EC800B1E4BFF8F
BF95416B475B2314E43E544C522BA0E34CC3511BB769CA11164E29C2B0C233D6
A8E08AC51D000186E2E7BD888D0B6BBC36C9BAEA9062711033A389CEC9A7FCEB
5343C1CD987170E6EC4D2E4F088138817D8092BD46C93D60782277F133FBD58E
4C09593B3CC808C6C45B200D3BE8C48434D9344423B219A59E4372C277058968
78510207536E48B2DEA8D1FB7B20699642A993A83B4C511C125F36E0AD7990BF
46A23085973D7CFEFDC1D76A30CCBBE20AC3CBF8326D7B31A6196DF3EB2FD003
EBFEAB89F5A3D1422134303ED49BFA109BA51D67D96C097EC2F740C63A97CE47
67E25A8AA3F115026A4FEB8915F7A1413D61EBF22D01C468C1C153BB4BF68DAE
9D6788EB14B88F2DCCE0DDA00484227DB38306E112AB4DF3A552C5409D074D0C
501C18596E89F241C9F908F631A1725A50484431128AAB52A3F27352F0C73BAC
48F3C8CCCE8115447C40BDE562330366E64CDE8D9652980DD84B4F9C3B0F0CB3
D773631E0FA66D6798733D845313AD11A5D3C540F03CFD222E19479C101E907E
DC56478DC90EF495BB44CB2F046743BD0E8167A5C070B67094B57887804C58FB
03268A5C2C69E8DABBEFB3CC940AD5CC3E1B71928E590188503382E0BCD876D5
04453404E641580FB01F8358DFA868DA89CD9E1BCF6F42243C234413D93E43FF
B07BA1A7568D5766688C7B979ED82B9BFC514617A9EC23B9122B123659960504
1A6AEFE1910DBA0FAF8A9F602212E73CFC40C3551C9B19CBE7091471F1F7266D
88B6E8DFB06C93F809C88F9662CE44D3B49D2AEFF6681B5F24D5EEECA5232B79
A745C771FD80119605B82C8E7603C02772036C9AA85085207045CB3C6F8D40CE
CE2C836F26CA6B9648807F6FC1DAB83BA81E079FBB792C47BF53D94156D2FACA
4050151C984288D13A593D828FE4129F4EF8E61A8E28E7E9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 58 /colon put
dup 69 /E put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 114 /r put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DC6B86AA73E883ABDC43AA6155756145B9EE8EFC505738B7AAA434E093E
029F4BDA397FACAB37996C354110879CA5EAC9D735A9EAD4C6090650B5D5023D
FC9947DE3D2582C88B2C8C9C6213593ED5EFBFCB8EB161A9C9F572701A3C80AA
033903CBED807628BE32BA603E03194E76D374D3813FEBD09ABCAE0CEDC276B1
390CAEE8408FA4E01108DF54D34CD31F444F24C67742DB868CC2967CDA1B8562
C4DC3AAE53445277C899FE86E54B8BDB1490AC76FF84E6E695E526BF8394BE7D
685F4AE35AA17151913D70F35CD7820B221FE0B71A0CA584024C964575599D83
F428992270E1039CAEE78B2D136545062399ED51E17EFE2DD72FD72ECAF8623A
C2C6E1DE8EF99678F333A0A25549721103667E88138D473DCBFDA8573A59C59C
5287D92E1A8CB5A195036AE42DFBAFB1E18A1941C494C795ECF17CAA969792C8
628B6809C79D5B58F56106EE7EFA0BDED029D2273032E1C8A5CD07991064AB2F
20E7735CFD4B13C2A8CBBE519A8F57C66B98A31ED82CC4A183ED86D278180D66
D97CE9B52FE6867C09D913F35AB9B9F6931BF820312DBDE76CEAF3D3F2EECA19
9594CF093FB8D49DAB28DA0EDB9463F81A02C55BD1C45D2C5729767507D93B8C
0D596E1098DB1CFB42CB821E8FA5B5B93BFB454C7CD598BCC5F92BA5486A550A
868D0C17E5861E79939718243DB1F2F6B23D7BC51D926CA86263840FFCC3BAF7
98B72E5F9191183CA5F1FCD9BACF833A9D58F384DC27B11B30790AFA8C1F0D61
5CBD7F3E30A565B9703D739A46149AD05407515A3F397A287343D7C4CB6C8137
FD441A887C7DB8DAF0F445E1DE2BB3A859D465B74109BA18C85A32C8C988D247
6DC190297FBF224E92AD47C87239667707D70B5D344F4E93013C35939AD543B1
A8A854FD0C91A958445E95683B0C3A934884BAA377CF776840DD148024FB210E
217E0852031A7D7F308C5D7EE20EA7A111A443494EE0E87098E09AD2608CEFFE
36DE5F27AF56018CC111F42CDB35DFA8794F96DC89FB10C7BE1D5563DD47A480
48AB09DE710899BCB4E303F8B56D1161CAF14DC202B636DB484CCA840741D3F4
F013108405DF82E0D367A0200CEDC0AAE2EC47BE46363E2130C0EA0DF460C547
2E7D58C187468AFB05FF30BDE997DB689CE85F6312A6A94F0B83CA6732E1E241
8FFF1B4429A564AB857F1E23337C75E72BDB84C33F8591A02C59FC1D561F2AF5
D110E04F7F21946368C9556F3F88B809C282A76AD6F3347B27755F571A159107
69678FC5D929DEC57025F82CEEAFFFFFB69A81A375D899E5F8FA27100CAEB06F
4081563B1989B010CE72D2EAFC631BC4AFD026878619663C9B51BC056BCA70A7
E3B757A8130BF3BC078B17590D62E97A565A241B9F91FB0604DD8A6746D4B6E7
DC9B82F48FA00116FAFDD66C3DBFE6419612225D642CEBA1AE5CBEFCA363411D
E10FE5FB70E0DD01174663D1A9F481122746ED4917BC8493FA539B98E93F5B9C
C9E1F44590CAE05FB023A6E44AEC660E02AD5C0E438F96422CFCDC136E434D7F
C5E7710559B91756AD1171ED39C39E0B7240BCC29C59A4D84770FD34E97E0E6C
E2C95D7883C68E63FB3ABEE97DD7FFDB55C192759CA15489712A7BBF3E039137
E11AA20B0C21EDE41EBC7BEFC38B3498FEDD429B1B1B8550F2219E7EF9CC6498
33271A99201B99E29F709C9ACF280854914E1D232EC794E18111A5FBF8A92781
EA228C2F15AD9AB1DA7507F7B1D843EB1118F160769ED9844B47A8A2CC08811C
4D301C641D45DA8F0F3F695B404F351F8ED22F8D664B85A1164A287A8C8C869C
E3BAB8C4891D68A761DDE20B5916E65AB744B6FD259CC8D48D85F6692F098E0D
CD6A89C52B018E46EBE636B6214175D6C3850D92DBCDAB4CAF1F586142B2524A
0EDB48C94E3B517088FB1E5F868B73D6130F57D7600215E8FC27377F616E9599
E4081BE949479896D92F6186699F595C254D306F000D9D5BB1DA08B0E1418737
14D3C293274ED2C5CAD0C162EBF98632D63BC149D984B7B653D90E146B6AAA31
8E165C8353C9CC1F09207AF0FD34FE48E2FF716005C8EC1F5C7AF9C9E0F86C2B
F7F43703D558AFD6CF63FF28A98B64837C4A9602F0A58DD1A03FCE8732DE541E
5E8A41FC87E1FCA5CF7C93094FE7016C6F59098D8404A626401F96F39B1297F3
1E2C049463AE81F753E2F863AAF5E2867319013B5CCD9327F84018CAC0A2ACCF
03FBCF06FE08AEB4E50E8F93E8BB74CB35738074BCB9FEE4077CC0C49FEE9C35
B3B2AFA2DB77690189F51FE955C8390E34A3AEB02F0624D826BB690432601A9B
CEA5A670E86295D3A18F5ACF42E333C054CF08BB2A159901BC41F1283F6CBE5A
045D10F0AF0DC2AC86B554B48E460A40571CB46D377CBDCCC2891EF3A2A64956
FA482F221D218FE10A5CD04F1526CCE72033B37C1B6F208E041A8BC089735A59
A4A4B48ABF4B835D318EEE3BB7AB14D465CB0E4F622144E415EA54E08AF32B9E
C67D91F7299AAC56823CD4BE926D0EE4E8CD04E3E5B6A63B0039BE04F5658645
6A82408AC414443602D9760630CFFF16DBAE0E230887AEED675B468DC7D0FF1C
FF6205E89A7B698F02A21616D450B72ED71016E7B3D08AC45D431A4BBA23F51B
C5E2F25DE2F5C2FF2674B04BFD3AB68DEDF7F407ED0E15C414959D56C875C894
AA202D9D4EAB6E79CC2091EC43C1963967ECCD4DAEFD440C53D5BAC0B89EEEB9
E2F9CFC6BCDFD9A438C1003D495615CC47672C970844D8AC77865702779FF2E0
8A6CC96631B36AC645855195D1EAF8537555C5537A64F1DD7E723A56D0741E56
27D6031B48D92ECACAB7ACCEDA8AE5900BEA0C4CF66F6061603EFF63B847F1A1
CF6CDAA0FBDEF4168DFFE1E270E32353F7E3F49EBA84F4CAD98611F098EDB80F
8AA0695C8107EC7C9C09C3E931DA47E684D57341ABCB2AE2039CE18511E7E04F
DDFB48C917538EECCED4E0F9D0EA457DBED80C02A4B974D0701E5CE65400C5AB
F6A6E42EC0C84A2795E25A8721969593FCFC6BE3F5748C0FE96B2A49328F0038
7AC40621A56776E25D9055441446A52FD56F5EA38B265567EA77E44AC241CC0B
AA8DA56EDB4DC19347B233C5EC8FB2DBEED1C2080B62A549CA52E029EBDD3FEC
7A79DA57BCE49633856B9CF6551E7F2BB7729C27A0DBDFA2283B15EBF9DC017A
5426559355F2168674CF18E6460FABCC7E9E985B38B7888749698AA7CDFFCEF0
CFFF0BD5C4750E885EDD20D94C76A07774F31519779A591974AA1E4DCB916058
54719A78419159FB0A3FB0FB9641EECCEB4F740F4805B79D49E4AAD1F9F83456
DD09DEAF859584F242A087376AE355A4E820216F11B74D9A09A5DE47786C893D
11AFA54A5AF960412C2CBE30AB96C2C690165B5C53E752ABBED5652864B1B5C7
22C9D41859973CDA6985D4DC188B03877CBC6323F003B8013A46DE3509290C33
E58F7B11BCA2E6C148364B91C17431ED5B78D8194A2F6FF3DEE89106698F4279
7F5F6B97C0BC1799DE4140563E21C02CD37B5BC8513609AE8A4A2610F672C24B
0BD150FD9037A1FA2838A63352A296EB343D5C7DD76A19DF9ED43C9119655F9B
C0C8F897C0DDC1AC4A2265D1AFD4BC89D4CCC982973679540C68E49899B7250F
B0DEBE0E9498F35E002BFA8878A77D0C7CCE04D5BC3A3C30B3A33D14165851AE
12230F419F6BAA59C43528E0221C32332E2B7FF9620159D998FC78840C1F0E06
23C6722C04D05F87586BBC2D2E57482E178DA2E72FD6E3991340FA4122788A63
7710AAFB97D17D3AF8D8CE24E2346F9A2656FE1E8280A684A3AB07A27A116C80
E8370B8CD7C7DCA2721A4A4DAFD3CF8BFBCF1F1CDA43D336C95C9303F3BAC096
1C7C56463734F65C184E8E75BBF597DB49E34D9EDFF0B7F262C014C8C9631DBA
1A3F0E11850B03A1F50484395F22091F054EE76161863737FBC0D7B5E79D9323
7261B48275141B494A6F64FD6A9DF0FC530D0F51A05279AC2F38C43B9AD1A5D0
680C9D604D6DC847BE96024EF2D91C762176E708A5E4CFFCB837A1435DF12CED
F2BB0F06B803C1BC9C691ED3689A3E5A0B3B0E246A43A9FFD9BE7D75927C3851
602D020547C311AE89FD162CBF60F25082BE9E92360F507D39E79D5766BA1D55
79BBCE8D534899429662185301C6D2C404D84023FD4AB69BA43B776EF707ED7E
0483AB7D32997B08C78FCA3D5BE4E536A2103129B6E80C6A34CE9FF8074BE0E2
39F573AFFF61A56327C45EC207CF14238446086F4C7AB8FD336A3A428C83CC1D
7B57BA1FB407484BF5B574CA27FB1354A5A2B94D4D7C32D8F05EE28B68843912
E2900EA545B78DD39D99EC84B33FEA3C475EF9E582078768CC805E32067C5F33
8BBC4FE6F5E6545E21B29F1AFACCAEA33437C05E7FB8DADFE5B67B152F9332CB
BF04E20F3AFD3427913B4AD993F2B3D1140CE4A8A15132E206921E3123A7019B
B8CEBCFC360F6244156305A50F56DFAC111C0ED3F3083470E12C998BA3A72E2A
17660020BC8E44015E429ED317983F1D902084F8949B2CE9B87D2759E4651004
1465068D7EEDE5B8FA096C6889FE7E4BA6D7EFCF49C6B122CCF7E4B9458320A0
AC2A25520D3A5642FE8A06EC919B3FBD2B4DBBD5B3D70EC723156A64C684EBFA
D1D550B13C4DF4031489745CD5524FBA900716EA2AE5229303D378FD44A60C2D
89FCC4DE04F8E4272BC49865BE118A286011104A8B799243969D3E62AECFDF0E
CB74435F4777D344C4ADF4EF58E7E6568C81463CC9667850DFD98C962D6F436B
239ACFC397689C5264FE3069E17CDAA8D265FFB3290681FD853FB66CE3EBBF92
49D2869D95769606E9FBF11DE43BD67B656F712C4BF616E822838E15DCF13517
88A95A5EDFC02392BFB2CA465FB980F97DA9B1F24F3D86E065EEB7FED60A67E7
1208E3BFBA2C134B2064CF6DC30F1B90D54E2697E63E7789E94FBBEBA905CC41
8C8AEF97B34C85D47C0C8C7B217BD652ED57ACDE08BF9FB5D12EFB8E8AD5B7A4
54D5060F92A66B77D0944A23B84EA0B32C43BB1B4F600503CA8AEE64B9C15DC1
C91B78CC69BFF00DCBE956FCFA84009EA67976A39DE0E92E96021620873B91E7
5BE36B1B42EA7F2F25F65D5E5AD7DBEB74CF7B6329E93B77B1D3F4DB86D21F18
FD9072BC88C679984DBB1AB9D03804FB9792909ED700D077415134AE0E38738D
BD60F8ACDA3CC200B68D9770AC75FC7BF0A2A648DA3DDA6F678D8C2FB76A2FA4
B0785611BCB259E3A8B598F48D797F61D12E01B11491A5F519B6E5EBB40E025C
6F5294A8037FD5E22ADC530A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 45 /hyphen put
dup 49 /one put
dup 50 /two put
dup 58 /colon put
dup 67 /C put
dup 70 /F put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD50D9C98DD94332DB4C7155F8A52013F9ECB7CCE3CFB3E667C57B022A0A753
A45E41A9D8229D5198031ABA3DAAC142AEA5FAB6694A6433629E15AE45A67FDA
34DE10D995ABCAF45FBB3B6B73E80D05F4C51F8C29D4B0F67C8A86432A6C5E86
F0126AB25A5CA2875B48C61CB8112A4CF9AA08F8B0157396CF63CBECDB8867CC
AC10F060630C9BFBAD84B1FF01C814878F0C177F552BDC9BB181B14581C6E968
DAAAB2896FCFB745795C4D2C87CC15BAA041EF80C5BDC12EC1F5786BB41A5A21
073EE0A49723BBCE7DA340F1C454FA5D74812C7425D1EE1E393BBA647136A38E
1DA4A94728957578C7D38CB7BA46AB7D9B9499B894F2E9E40245BE1D7DC6F824
BC9477CBC0F708F0CE573D3F01E65DAAE1DF4E6B295D72ADFC1B2DC969ADC4A7
29B58F3133DBEA5CD1A74475F36D7ABCC03EE7E2A10D1FE691EEBC3E6885BB72
A570030B0854D6E51FB67798552D9960FE820FFD982A9179E5056B3C085580A0
082D1D73E79869B92E19E91E073C92BA72B9139627CB442A5D61F8B2457CB4A9
374A70E9629E2F5899E98544669D49691BF3DA4697DDAE7C674BCA1DA029B62D
14BB3CBEF2EF0BE573195F61DA95E5315F48A5A551D36552386049D59AE3C05F
49DE9679B53167C666579EB9310B4A04489277BA837F0B2E49ED2FD75E57E04A
9696E6DC26B83665DB7130B37DA296D968F78B308E2CEA9A83F0EAC088B2D5CB
2A545740561E9B4660C8925A37EEE489C7FCB3A9E81FEDD2DE65F80B249A5396
30B774CAD3D9301AA6A09DE0A040DA76D64612105B999A82FA92920F146D6B27
B1A05279E7615F8E63712A3EE17F17E26CC9AECC1667D602E7B8D1905B280EBD
3E881DFE519A96A5CDD323919F423B0790B68C43628539ED84EE6806EE422FBF
B087E6FE3CE878300404594754459D19F939C8C597C32D8C2C6C365751FF6E66
B760A5684AA33864AAE97843B7D42781B401EF531D185D34CBA7FD71B8C33E4C
1A3FFB119AFAC241BDACA288A1C67B43ABF5DBC2C7ECB9EAC4E7D86BCEAF47B6
1A2788EEC8EDBD5DA0B675A8F5AE6BED3E164AD6EF861628CB8029A698A3ED83
D9B00688FF5A80C620D35AC538221062CF2920AE1731141E4BFA04AE9EB13699
5694D56B1227BE09D28A153CCC3C1616487EDCD253ABF382B832479D02FFD6AD
471CDB1E28FC0B4A23C4C8E0A3C1970DC304A252193F1D59FDEBEC0EF5540966
069F3BAC661FF2907D49BFC6C21A88176F6587364C536993A3F48BA6A32BCDF8
7FFF4FC7690497945E7AB33FDEA22F302DDDAC25ACEF9F32BCE38F0C302E66F0
E943246A0D0E061D0CA74D241F03738A5CB702DEE771EA443A82681FD6FDE51A
DCF81BFB3C3E6A7DBCC194CB99A338F02F0B56C52161AF42D4185CF6C75D1B00
4A263F48263C2710A1F1903FFF20CA14AE7E36528C984E87931FAF1A75BC6588
F64931B56CA8C2FAFBCF154DDD604C3D79E3E15EF4C46A5E5908430CAB1D09C8
194054BD4CAC306F38F48DF200FFF1FE8435043E0C764F9A4B74838931468D59
D7E338344E66B816FD0A8856A392934181BBC22E62434FE361DB81AC9DC3D9CC
45527ED8CC72415EF8ABAD8E5EF300034183C341334B872D7100D9DDEB984AA4
282FFCB584FBC1CFBA2CA0F626822AA8AADC6C1C0C3E5DDF6A18C46BAD8F3E75
5AB51F7A24514573119098A6A3DFA2A605DA94C42EFDEF21AFC12EC7506F5F35
9F7C1D087F525C7D297DD0AA4A36B8D4219A778CC4CD5461659FEEC4325CF601
163DFB701B5AA69C8D087B563F368A8CA8929D3EF5A67D309EF8A7F44DCEE542
250F1DCEC8561F3BDEA3D105317CE2EA807431013F298EA83E144A0AA3B23563
EE7BFCCB8A86C42CCFFB6CE1F9C551EA1E212F5FFF0FBF4BC07FCD6CF9DD7FCE
E4BFFCCA1B681C42C948715F294A34F26DE95DD5197E9E4033EE5308976E5A4F
49AA36EED1EDC40D6D2CE1CE16C01573D364351FBF60857481735BB92B3A1746
76ED706D72BE09B7CC021F8B5E15AB6D854EC338F6D0AFD34451FBE38FEC08D5
2742BCC0CE59214DB9861AFFE7050DA6F7F615CC7823C739F5308A5C440E2B2B
2959C06C35344D5E4DB2B8C6A93D0F57BB4B442338D1B247859FCB1BE6FB2795
30FF509ABF765A462AAEF7521C9433CE0E4A997165A636B36895BA1C9238C307
70D0479E0FD80231CD62AB02C988FAE81C12A607A57DE01C83EB2529961CC345
983B336DD0742F8AABC4C37B5AD6FB9631135C569FD919000E6366AA733165D5
5F50476CBC6FC9761B6C9F24002588214F54AA899ECE4676D8AD160F9C08194D
579FB6405AD7C2DE4814F5E9FA16F31872227D7981A6045AE6889B135C22F69B
2B4336645841B11BF967F59CDF4F4D411BBC765873449526AF7CBFBB40DCE156
EBBC747C63E806EDB94337DDB36E8B5662596F49F5590CF7F6A7247E76A17859
A0B97A38737C9C09C3E9369DC4C6668F7C1E91033937FC5B5A40C8712A0348B6
5DC518C3E9D7DD2AEDF6E91DE1052F5F6127B79E1CD7599936E70725761D0792
5B6ABC662292892F9C20D41394A5197661D61F83EB58C7EB5B2C9A676499BCC3
66D53E6AD2127A84702A78587A0C73864DD3BF0917752AB3913DEEE261B6EA75
5770C9AF71C9BFDD572833B723B262ECC308045CFAEEBB066D5E257640508606
753932D080E0B1AD3EFA6AD3C92F1EB0AFC7AF952953B76438DC2A942249894C
FAB936F567FB3C1647C3F53B93AA68255146E53E0B49B0E9CCD9C6C20EC95AA9
DC34019578A8046C1B5C78C38BAD25DBCE0ABE0215F16CC0E64D0F168978E4EF
1FFFA4A2D4788142F8ECE9F035B1123C4757C6804760E1C40336338D0AFCD190
389C52749C10253ADB57BD515DA5AE0B8C3CCDEB0D607AA61F849A5778A91EDB
9C23474994D50C619BF85AD60BE3BB49D840C93F0686ABA6EFC16C898B18B7ED
5714282BF9BFED54BC31E000817D4179C7093E3B78E8358015D82061EE675439
93C33CA0ED83902A795D49895D4FAF378AE6FFAA4E2AA3DA2C589D273A4B249A
CE9C5CB9A5C9E7D627E60B8E6C1F6F890B0AFF871E8E61A581C3552BE1093887
7B99525667504D8F72276BA2BE71559F4390750DD7E798BED45A4DF4D54DE7BC
6EBA5B952EE564AC97281018C7917B44BED128BA8E5A4D346EDDD880DC4B1264
AFCA423987B0D47F788E49A57219D831C9CAD81FC51708C81931A1AA4D62FC3C
BBF0C8AA21A64CF25C7036AA0D3054819C15EC6F1845DD5BA4F41AED668FF031
AB84FC44BC578F933F490F53997869E0DC30D96A1F836B0D4BB3D54CA96E081F
AB9DF6414D9C84C86F4AF5217DFB0703B4E192D91550DBCEDEF9ADC963F9053F
56DDFF53FC0A6E90DD65D79D41E18620B5D82319797D70F0845340477A90AA1D
8F8BB885E11B88D42710D773959BE9D5BC27B5A41B24D539441F2A015E996D6F
DCDBDEF89A4079C283BB393722AF1836E9C6908911D88780F4025EB6D819BE88
A4DF7A12A399B3DB97FA7BE90C6E063448F2BDC3EC786ECB9DDED29761B28F82
4A0FAA8CCA0EDDE6A8CEE519DB6F114328A2AA1AD72BE8C0CF1861AFE3978CB9
37222BAC0A9C01A9B8D2B30E9BA678FD839922154885B5CE7178B05F2943B49D
A26D56165BBFF20A488B2132B0D9A743BE2294EFF0FDF3D4FB4AD79C6D1C6372
9C771922F94B5D2DEF8C090C67BFE33DD87A0F6A72E36123E235B464CBE4855C
C8C4AA2B8FEA343CA9FBAF86030B684F568DE7D82F27EB86C40A69D33BAFFF5A
A79434A44FB23E0E8438EECF2F1716345E868C3C4764273B4A641A41D5D26E88
4E7C918B8835B6D212BB986BEEC306F2DBB01A6D91D2D6F97971A27DEED223CF
8CDA752A7DAF9937B76ACBD92059947882FA2A418D110C27B3F5E3FB8EB42FC0
6541FFA5C4E385CCB7511954EF5028EA0871D9A1BC9605EFBCC8D0989FC316C0
5705A2E699D542554F37CE2708D6D92092E53F2E6BF1CC6A2B80E5D5E60B20EF
6287B00C1B2E6CF71572C1AE958D7EE9DD731638042C632CC4BA543D2C6CFA89
4A7FA6A43748F5062A2E89A7237A3FE42B3A6838EF6D0969CAAF54CDF3D1873B
74189667699588B0405A394E52EBBB4779D6DDF8B71AD3107BD2C2B66E34DFFE
F9BD87E5E55052E4ED38269598688D89715F76241343708BB14FC66DDF8E0A39
57487AC28DCA343C3D5379E17C969F2787C1004366B6ACB7F63101B09C90110B
CDF959742CE27871CFE3C2DE14ED2938C35989A46B8A6837631E3CB8D1A8A89C
EB58AF53A8CCBE323E918A33D79842CA7C79CD115F1D1F925D7CCEE63F51B380
8FED76120ADAE92A419D508E8F8B31F5C32E0A386155647C7B01BCBBB9B720B4
7707CE09463E3BAB9174514D44B26507DD9A59D4748D0EBD715000ED5A5F3A70
2244158ACC7F4DE62EA75662B02567144F5D26E18DB0E126D69CD1F8A170490A
B6794BA329D0A4B397EDECDC27EE0FE809D7D6D02EF86C13C27E2AD9BC906BE3
A9ED16022529D9853B6869D24B4870E29777F535DB6FE4DA6F2B4838DCE72572
BF2C4DC7DEF3BB8E94158449D4D9908F5D6CF8D7C4E3D39FD4BF8079C9524428
9B70677212F7A0F036E6594DB542F38B8FE57615EDBA3AC1FBDBF3666EE5896D
3F161F9BFEE6FE4BA4A779D15F459F6B5F4ABBDC1E19F9525F575882F99CBCEE
4856EFBB064FA9AF1075448DCBD72301FCF10C8449203E9D0B8D4678CBD940A0
474D2E318CD8ED2F471BB9F581BFFBAD83CE14D31C2A04B022BD2963B717338E
F0BA5114E905CB82F8224D3160FB317F73BBA6E50333DABA22EDAF3C7501F055
4013404ED5B2C300EED9F81F36F6915CCA6ED499D8C7FE666080961E944EFCF2
335BC11EAAFDE30B21E481E1A7294BC24177DDDB8C69F2B482E7A3E44C674709
DD9DE40EEB8680F60B67A5AD1DCE4C0E4F2E75967C53D050DFE737CA2FB2FD2F
1D7464FB79E95EE899FB67938E5D6A7C34C348E11E82C0A0B7C0096CE592E1C3
69E2931DBFA54237C76F333BFD64C4D10B1707A80522BABDEA6189E467A8A804
62216FFA0A59380C4F92072D070BF3A901459FBA6C31CB437C9F9B5407DC78D9
C5B680AB0B5AED6C3E7E0448580B1A1E76A2753334D7FD7DE8E79B5DED8091B7
5F1D5089D9A4EC38589A007703DB767AD9654F9286B82B4DD1EC276FB2AB86F2
FAB1BE068EA005491EF342BB294383F2C1D25052DBC991B1FC95C1B9E4AF3C4C
69E39C83CD02BBA68928A7D47A717A428C2D6CFB70C7A2D0ACBCFD0363C0AFC4
E810A82E1CF3878ADA0E9F114ACD088B1660B734521F0BE626B2A4796C40C3FF
017D39A59317BFC26D3A272001265DFAFAB62F6B2189C5CA40B7D9F7955EAA9C
3D968A0352BAE93A71B7EBC2CC538FCB11A41A5E86E026E4A46EC8D16DC6A8A3
9D1FC281F574A5B5223E67739E40103D3B4C0DB9F180880A82F80F2320C86AC4
0A12C4AD3BFA1A65F624B301E5B732999530640366A56B696080FA9F6CB669F0
5B90E49628E50272F5CC94221DD4AAF5CA98397AC21A87E72535D56033689DBC
D9193DEEB8D345602617478B2845C39ECEDF8A92AC5BDCA1B6B7199886CD0B58
91B2EE012C1357DEC40C7F80990C60A809D8948DC2B601EF98029890B8A4FA63
E75C978E5F001365022875CFAB281459C99CA1A38EA9AA3703DCE81835AC0930
90F21FE81D65E9E67F93194C9997FF7E1D7737B2D41C13EA4A4757B2CE28BF90
B60AC41C694DEFC51D782CB38143B67DE0166C62B3DB4EA1A34633AAEE05DE1B
2856E7325833C938D7BBF917C1FAA11EFEC873E35B9D9600708406917AF4A7E7
2A71FCA0A7F99167565BFC92AA7BCF8DBF54D7C713C158D881E944B8F6C4787F
C373F737DEE421A4A1F6D2B397AD85F2B0493609396FD411A0F36A09F5B535F2
C1790EF9763B78E7B464781A95C42E06ACD95C10BE275BB7BBAF8C8A6A5289BB
CDFEDB4D3D32274380DB6AFB348D9DFD7593E80FA4EED83ACFF2E9A4B988C0FF
AB94BC17D9DBE0D76FD22EBF6CDFDE87827345FBCB8CF84B7C651FE276E391F6
E359824F68EEE678D9EFF292FFB275B91BCB540E757541709E78574948CB6413
8E1A7803A7471B89BE2403
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (somme-vecteurs.dvi)
@start /Fa 137[44 52 12[52 43 45 42 47 39 39 48 10[53
62 53 56 69 72 58 69 73 88 62 77 50 40 76 71 58 67 75
65 69 68 5[25 25 58[{}34 90.9091 /CMMI10 rf /Fb 222[91
27[45 4[71{}3 90.9091 /CMSY10 rf /Fc 133[40 48 2[48 51
35 36 36 48 51 45 51 76 25 1[28 25 51 45 1[40 51 40 51
45 12[66 2[71 1[71 8[59 1[69 66 3[43 1[71 2[25 4[45 1[45
45 45 45 1[25 30 25 71 1[35 35 25 19[45 45 5[51 12[{}46
90.9091 /CMR10 rf /Fd 135[55 5[43 8[29 3[48 1[46 29[69
10[29 5[52 52 52 52 49[{}11 90.9091 /CMBX10 rf /Fe 241[42
14[{}1 83.022 /CMSY10 rf /Ff 135[62 1[62 65 46 46 46
1[65 59 65 98 33 2[33 65 2[52 65 52 1[59 26[76 2[85 8[33
7[59 59 3[39 5[33 39[{}24 119.552 /CMR12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-246 -482 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -246 -482 a -246 -482 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -482 a -246
-482 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -246 -482 a -246 -482 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -482 a 0 TeXcolorgray
0 TeXcolorgray -151 1 a Ff(Chapitre)37 b(1)h(-)h(F)-10
b(euille)39 b(d'exercices)e(n)1532 -42 y Fe(\016)1578
1 y Ff(2)i(:)f(construction)f(de)i(la)f(somme)g(de)h(deux)g(v)m
(ecteurs)p -218 -107 4197 4 v -218 51 4 160 v 3975 51
V -218 53 4197 4 v -246 479 a Fd(Exercice)d(1)f(:)p -246
494 571 4 v -246 591 a Fc(Dans)c(c)m(hacun)f(des)h(cas)g(suiv)-5
b(an)m(ts,)30 b(construire)h(le)g(v)m(ecteur)1815 552
y Fb(\000)-71 b(!)1834 591 y Fa(u)40 b Fc(+)2017 552
y Fb(\000)-71 b(!)2039 591 y Fa(v)55 b Fc(\(sans)31 b(sortir)f(du)f
(quadrillage\).)-198 1903 y @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave /xGridOffset
0.0 def /yGridOffset 0.0 def  1. .setopacityalpha  0.8 SLW 0  setgray
0.0 0.0 142.26364 142.26364 0.0 0.0 14.22636 abs 14.22636 abs 1 10
{ 0  setgray } 0.0 /NimbusSanL-Regu findfont 0.0 scalefont setfont
Grid grestore  end


@endspecial -198 1903 a
tx@Dict begin { 35.5659 106.69772 } PutCoor PutBegin  end
 -198 1903 a -243 1900 a Fb(\000)-71
b(!)-224 1939 y Fa(u)-198 1903 y
tx@Dict begin  PutEnd  end
 -198 1903 a -198 1903
a
tx@Dict begin { 64.01863 35.5659 } PutCoor PutBegin  end
 -198 1903 a -243 1900 a Fb(\000)g(!)-222 1939 y Fa(v)-198
1903 y
tx@Dict begin  PutEnd  end
 -198 1903 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.42271
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 56.90546
128.03728 14.22636 42.6791   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.42271 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.42271
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 99.58455
14.22636 42.6791 28.45273   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.42271 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1305 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave /xGridOffset
0.0 def /yGridOffset 0.0 def  1. .setopacityalpha  0.8 SLW 0  setgray
0.0 0.0 142.26364 142.26364 0.0 0.0 14.22636 abs 14.22636 abs 1 10
{ 0  setgray } 0.0 /NimbusSanL-Regu findfont 0.0 scalefont setfont
Grid grestore  end
 
@endspecial 1107 1903 a
tx@Dict begin { 48.36954 123.76932 } PutCoor PutBegin  end
 1107 1903 a 1062
1900 a Fb(\000)g(!)1081 1939 y Fa(u)1107 1903 y
tx@Dict begin  PutEnd  end
 1107
1903 a 1107 1903 a
tx@Dict begin { 21.33954 35.5659 } PutCoor PutBegin  end
 1107 1903 a 1062 1900 a Fb(\000)g(!)1083
1939 y Fa(v)1107 1903 y
tx@Dict begin  PutEnd  end
 1107 1903 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.42271
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 56.90546
42.6791 14.22636 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.42271 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.42271
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.13182
142.26364 28.45273 85.35818   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.42271 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1306
w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave /xGridOffset
0.0 def /yGridOffset 0.0 def  1. .setopacityalpha  0.8 SLW 0  setgray
0.0 0.0 142.26364 142.26364 0.0 0.0 14.22636 abs 14.22636 abs 1 10
{ 0  setgray } 0.0 /NimbusSanL-Regu findfont 0.0 scalefont setfont
Grid grestore  end
 
@endspecial 2413 1903 a
tx@Dict begin { 49.79227 64.01863 } PutCoor PutBegin  end

2413 1903 a 2368 1900 a Fb(\000)g(!)2387 1939 y Fa(u)2413
1903 y
tx@Dict begin  PutEnd  end
 2413 1903 a 2413 1903 a
tx@Dict begin { 106.69772 21.33954 } PutCoor PutBegin  end
 2413 1903 a 2368 1900
a Fb(\000)g(!)2389 1939 y Fa(v)2413 1903 y
tx@Dict begin  PutEnd  end
 2413 1903
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.42271
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35818
99.58455 28.45273 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.42271 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.42271
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.26364
28.45273 71.13182 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.42271 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -246 2250 a Fd(Exercice)36 b(2)f(:)p
-246 2265 571 4 v -246 2363 a Fc(Dans)c(c)m(hacun)f(des)h(cas)g(suiv)-5
b(an)m(ts,)30 b(construire)h(les)f(p)s(oin)m(ts)h Fa(M)40
b Fc(et)31 b Fa(N)40 b Fc(d)m(\023)-43 b(e\014nis)31
b(par)f(les)e(\023)-43 b(egalit)m(\023)g(es)34 b(v)m(ectorielles)f
(donn)m(\023)-43 b(ees)31 b(:)112 2535 y Fb(\000)-31
b(\000)f(!)112 2597 y Fa(O)s(M)35 b Fc(=)403 2535 y Fb(\000)-22
b(!)403 2597 y Fa(O)s(A)20 b Fc(+)654 2535 y Fb(\000)-43
b(\000)f(!)654 2597 y Fa(O)s(B)119 2702 y Fb(\000)-39
b(\000)g(!)119 2764 y Fa(O)s(N)35 b Fc(=)395 2702 y Fb(\000)-45
b(\000)f(!)395 2764 y Fa(B)5 b(A)20 b Fc(+)648 2702 y
Fb(\000)-44 b(\000)g(!)648 2764 y Fa(B)5 b(C)-182 3796
y @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave /xGridOffset
0.0 def /yGridOffset 0.0 def  1. .setopacityalpha  0.8 SLW 0  setgray
0.0 0.0 153.64362 89.62544 0.0 0.0 12.80363 abs 12.80363 abs 1 10 {
0  setgray } 0.0 /NimbusSanL-Regu findfont 0.0 scalefont setfont Grid
grestore  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 51.21454 38.4109
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 25.60727 76.82181
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 76.82181 51.21454
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 64.01817 76.82181
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -182 3796 a
tx@Dict begin { 44.81271 32.00908 } PutCoor PutBegin  end
 -182 3796 a -218
3827 a Fa(O)-182 3796 y
tx@Dict begin  PutEnd  end
 -182 3796 a -182 3796 a
tx@Dict begin { 83.22362 57.61635 } PutCoor PutBegin  end
 -182
3796 a -216 3827 a Fa(A)-182 3796 y
tx@Dict begin  PutEnd  end
 -182 3796 a -182
3796 a
tx@Dict begin { 57.61635 83.22362 } PutCoor PutBegin  end
 -182 3796 a -219 3827 a Fa(B)-182 3796 y
tx@Dict begin  PutEnd  end
 -182
3796 a -182 3796 a
tx@Dict begin { 19.20544 83.22362 } PutCoor PutBegin  end
 -182 3796 a -218 3827 a Fa(C)-182
3796 y
tx@Dict begin  PutEnd  end
 -182 3796 a 1538 2535 a Fb(\000)-33 b(\000)g(!)1538
2597 y Fa(AM)36 b Fc(=)1826 2535 y Fb(\000)-22 b(!)1826
2597 y Fa(O)s(A)20 b Fc(+)2077 2535 y Fb(\000)-44 b(\000)g(!)2077
2597 y Fa(C)7 b(B)1570 2702 y Fb(\000)-41 b(\000)g(!)1570
2764 y Fa(AN)36 b Fc(=)1842 2702 y Fb(\000)-55 b(!)1842
2764 y Fa(I)7 b(J)30 b Fc(+)2060 2702 y Fb(\000)-31 b(!)2060
2764 y Fa(C)7 b(J)1243 3796 y @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave /xGridOffset
0.0 def /yGridOffset 0.0 def  1. .setopacityalpha  0.8 SLW 0  setgray
0.0 0.0 153.64362 89.62544 0.0 0.0 12.80363 abs 12.80363 abs 1 10 {
0  setgray } 0.0 /NimbusSanL-Regu findfont 0.0 scalefont setfont Grid
grestore  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 25.60727 76.82181
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 64.01817 76.82181
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 51.21454 38.4109
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 51.21454 51.21454
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 64.01817 38.4109
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 76.82181 51.21454
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1243 3796 a
tx@Dict begin { 44.81271 32.00908 } PutCoor PutBegin  end
 1243 3796 a 1207 3827 a Fa(O)1243 3796 y
tx@Dict begin  PutEnd  end

1243 3796 a 1243 3796 a
tx@Dict begin { 57.61635 32.00908 } PutCoor PutBegin  end
 1243 3796 a 1219 3827 a Fa(I)1243
3796 y
tx@Dict begin  PutEnd  end
 1243 3796 a 1243 3796 a
tx@Dict begin { 44.81271 57.61635 } PutCoor PutBegin  end
 1243 3796 a 1213 3827
a Fa(J)1243 3796 y
tx@Dict begin  PutEnd  end
 1243 3796 a 1243 3796 a
tx@Dict begin { 83.22362 57.61635 } PutCoor PutBegin  end
 1243 3796
a 1209 3827 a Fa(A)1243 3796 y
tx@Dict begin  PutEnd  end
 1243 3796 a 1243 3796
a
tx@Dict begin { 57.61635 83.22362 } PutCoor PutBegin  end
 1243 3796 a 1206 3827 a Fa(B)1243 3796 y
tx@Dict begin  PutEnd  end
 1243 3796
a 1243 3796 a
tx@Dict begin { 19.20544 83.22362 } PutCoor PutBegin  end
 1243 3796 a 1207 3827 a Fa(C)1243 3796
y
tx@Dict begin  PutEnd  end
 1243 3796 a 2833 2535 a Fb(\000)-31 b(\000)g(!)2833
2597 y Fa(E)5 b(M)36 b Fc(=)3125 2535 y Fb(\000)-22 b(!)3125
2597 y Fa(O)s(A)20 b Fc(+)3376 2535 y Fb(\000)-43 b(\000)f(!)3376
2597 y Fa(O)s(B)25 b Fc(+)3633 2535 y Fb(\000)-45 b(\000)g(!)3633
2597 y Fa(O)s(C)2867 2702 y Fb(\000)k(\000)g(!)2867 2764
y Fa(AN)35 b Fc(=)3139 2702 y Fb(\000)-46 b(\000)h(!)3139
2764 y Fa(AB)25 b Fc(+)3392 2702 y Fb(\000)-47 b(!)3392
2764 y Fa(AI)27 b Fc(+)3618 2702 y Fb(\000)-37 b(!)3618
2764 y Fa(D)s(I)2667 3796 y @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave /xGridOffset
0.0 def /yGridOffset 0.0 def  1. .setopacityalpha  0.8 SLW 0  setgray
0.0 0.0 153.64362 89.62544 0.0 0.0 12.80363 abs 12.80363 abs 1 10 {
0  setgray } 0.0 /NimbusSanL-Regu findfont 0.0 scalefont setfont Grid
grestore  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 51.21454 38.4109
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 25.60727 76.82181
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 76.82181 51.21454
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 64.01817 38.4109
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 64.01817 76.82181
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 102.42908 12.80363
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 115.23271 0.0   false
NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 2667 3796 a
tx@Dict begin { 44.81271 32.00908 } PutCoor PutBegin  end
 2667
3796 a 2631 3827 a Fa(O)2667 3796 y
tx@Dict begin  PutEnd  end
 2667 3796 a 2667
3796 a
tx@Dict begin { 83.22362 57.61635 } PutCoor PutBegin  end
 2667 3796 a 2633 3827 a Fa(A)2667 3796 y
tx@Dict begin  PutEnd  end
 2667
3796 a 2667 3796 a
tx@Dict begin { 57.61635 83.22362 } PutCoor PutBegin  end
 2667 3796 a 2630 3827 a Fa(B)2667
3796 y
tx@Dict begin  PutEnd  end
 2667 3796 a 2667 3796 a
tx@Dict begin { 19.20544 83.22362 } PutCoor PutBegin  end
 2667 3796 a 2631 3827
a Fa(C)2667 3796 y
tx@Dict begin  PutEnd  end
 2667 3796 a 2667 3796 a
tx@Dict begin { 57.61635 32.00908 } PutCoor PutBegin  end
 2667 3796
a 2643 3827 a Fa(I)2667 3796 y
tx@Dict begin  PutEnd  end
 2667 3796 a 2667 3796
a
tx@Dict begin { 108.83089 19.20544 } PutCoor PutBegin  end
 2667 3796 a 2628 3827 a Fa(D)2667 3796 y
tx@Dict begin  PutEnd  end
 2667 3796
a 2667 3796 a
tx@Dict begin { 121.63452 6.40181 } PutCoor PutBegin  end
 2667 3796 a 2631 3827 a Fa(E)2667 3796
y
tx@Dict begin  PutEnd  end
 2667 3796 a -246 4030 a Fd(Exercice)36 b(3)f(:)p -246
4045 571 4 v -246 4143 a Fc(Construire)30 b(\022)-45
b(a)31 b(l'aide)g(du)e(compas,)i(dans)f(c)m(hacun)h(des)f(cas)h(suiv)-5
b(an)m(ts,)30 b(le)h(v)m(ecteur)2620 4104 y Fb(\000)-71
b(!)2639 4143 y Fa(u)40 b Fc(+)2822 4104 y Fb(\000)-71
b(!)2844 4143 y Fa(v)25 b Fc(.)-241 5729 y @beginspecial
14 @llx 14 @lly 352 @urx 247 @ury 2028 @rwi @setspecial
%%BeginDocument: exo-3-1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: GIMP PostScript file plugin V 1,17 by Peter Kirchgessner
%%Title: exo-3-1.eps
%%CreationDate: Tue Mar 25 22:08:07 2014
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 14 14 352 247
%%EndComments
%%BeginProlog
% Use own dictionary to avoid conflicts
10 dict begin
%%EndProlog
%%Page: 1 1
% Translate for offset
14.173228346456694 14.173228346456694 translate
% Translate to begin of first scanline
0 232.53245765554777 translate
337.5471159516016 -232.53245765554777 scale
% Image geometry
450 310 8
% Transformation matrix
[ 450 0 0 310 0 0 ]
% Strings to hold RGB-samples per scanline
/rstr 450 string def
/gstr 450 string def
/bstr 450 string def
{currentfile /ASCII85Decode filter /RunLengthDecode filter rstr readstring pop}
{currentfile /ASCII85Decode filter /RunLengthDecode filter gstr readstring pop}
{currentfile /ASCII85Decode filter /RunLengthDecode filter bstr readstring pop}
true 3
%%BeginData:        18881 ASCII Bytes
colorimage
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcCf2!On8Ds0M`U~>
JcCf2!On8Ds0M`U~>
JcCf2!On8Ds0M`U~>
JcCl4"2?f<kCNZ>s*t~>
JcCl4"2?f<kCNZ>s*t~>
JcCl4"2?f<kCNZ>s*t~>
JcCr6"LC2j"Ohr%ZN#F~>
JcCr6"LC2j"Ohr%ZN#F~>
JcCr6"LC2j"Ohr%ZN#F~>
JcD&9!r&<8rVuqRJcE"TJ,~>
JcD&9!r&<8rVuqRJcE"TJ,~>
JcD&9!r&<8rVuqRJcE"TJ,~>
JcD,;!rJH,r;Zj\qgndPs*t~>
JcD,;!rJH,r;Zj\qgndPs*t~>
JcD,;!rJH,r;Zj\qgndPs*t~>
JcD2=!r&$,qu?a3kCNZ;s*t~>
JcD2=!r&$,qu?a3kCNZ;s*t~>
JcD2=!r&$,qu?a3kCNZ;s*t~>
JcD2=!+>X'!4ROZYQ'+~>
JcD2=!+>X'!4ROZYQ'+~>
JcD2=!+>X'!4ROZYQ'+~>
JcD2=!Uh<3!!%+ls/uBP~>
JcD2=!Uh<3!!%+ls/uBP~>
JcD2=!Uh<3!!%+ls/uBP~>
JcD/<!L<cc!!+qRJcDnQJ,~>
JcD/<!L<cc!!+qRJcDnQJ,~>
JcD/<!L<cc!!+qRJcDnQJ,~>
JcD2=#(I&6#QP:^JcDkPJ,~>
JcD2=#(I&6#QP:^JcDkPJ,~>
JcD2=#(I&6#QP:^JcDkPJ,~>
JcD8?#Q&$_g]*T?X+C;Ps*t~>
JcD8?#Q&$_g]*T?X+C;Ps*t~>
JcD8?#Q&$_g]*T?X+C;Ps*t~>
JcD;@"7JcGkPkJ]Z[r.Ws*t~>
JcD;@"7JcGkPkJ]Z[r.Ws*t~>
JcD;@"7JcGkPkJ]Z[r.Ws*t~>
JcD>A"5bAGqgndEs*t~>
JcD>A"5bAGqgndEs*t~>
JcD>A"5bAGqgndEs*t~>
JcDAB!m;:=JcDPGJ,~>
JcDAB!m;:=JcDPGJ,~>
JcDAB!m;:=JcDPGJ,~>
JcDDC!i$aAJcDMFJ,~>
JcDDC!i$aAJcDMFJ,~>
JcDDC!i$aAJcDMFJ,~>
JcDGD!fnVYJcDJEJ,~>
JcDGD!fnVYJcDJEJ,~>
JcDGD!fnVYJcDJEJ,~>
JcDMF"8?%Shgtg$s*t~>
JcDMF"8?%Shgtg$s*t~>
JcDMF"8?%Shgtg$s*t~>
JcDPG"7J3GpOW@;s*t~>
JcDPG"7J3GpOW@;s*t~>
JcDPG"7J3GpOW@;s*t~>
JcDSH"5bAKqgnd>s*t~>
JcDSH"5bAKqgnd>s*t~>
JcDSH"5bAKqgnd>s*t~>
JcDVI!kTGMJcD;@J,~>
JcDVI!kTGMJcD;@J,~>
JcDVI!kTGMJcD;@J,~>
JcDYJ!h1%=JcD8?J,~>
JcDYJ!h1%=JcD8?J,~>
JcDYJ!h1%=JcD8?J,~>
JcD\K!eW&YJcD5>J,~>
JcD\K!eW&YJcD5>J,~>
JcD\K!eW&YJcD5>J,~>
JcDbM"8>V_l[f))s*t~>
JcDbM"8>V_l[f))s*t~>
JcDbM"8>V_l[f))s*t~>
JcDeN"62@cqgnd8s*t~>
JcDeN"62@cqgnd8s*t~>
JcDeN"62@cqgnd8s*t~>
JcDhO!n/9EJcD):J,~>
JcDhO!n/9EJcD):J,~>
JcDhO!n/9EJcD):J,~>
JcDkP!iHm=JcD&9J,~>
JcDkP!iHm=JcD&9J,~>
JcDkP!iHm=JcD&9J,~>
JcDnQ!g=>AJcD#8J,~>
JcDnQ!g=>AJcD#8J,~>
JcDnQ!g=>AJcD#8J,~>
JcDqR!dlibJcCu7J,~>
JcDqR!dlibJcCu7J,~>
JcDqR!dlibJcCu7J,~>
JcE"T"7o>[o7?q*s*t~>
JcE"T"7o>[o7?q*s*t~>
JcE"T"7o>[o7?q*s*t~>
JcE%U"61eOqgnd1s*t~>
JcE%U"61eOqgnd1s*t~>
JcE%U"61eOqgnd1s*t~>
JcE(V!lH"=JcCi3J,~>
JcE(V!lH"=JcCi3J,~>
JcE(V!lH"=JcCi3J,~>
JcE+W!gab5JcCf2J,~>
JcE+W!gab5JcCf2J,~>
JcE+W!gab5JcCf2J,~>
JcE.X!dGj2JcCc1J,~>
JcE.X!dGj2JcCc1J,~>
JcE.X!dGj2JcCc1J,~>
JcE4Z"7o>Ol[f(qs*t~>
JcE4Z"7o>Ol[f(qs*t~>
JcE4Z"7o>Ol[f(qs*t~>
JcE7["7%@7pOW@'s*t~>
JcE7["7%@7pOW@'s*t~>
JcE7["7%@7pOW@'s*t~>
JcE:\"4nrKqgnd*s*t~>
JcE:\"4nrKqgnd*s*t~>
JcE:\"4nrKqgnd*s*t~>
JcFd1!SsX,rrTMHUOiH%s*t~>
JcFd1!SsX,rrTMHUOiH%s*t~>
JcFd1!SsX,rrTMHUOiH%s*t~>
JcFa0!Bfo-rrRri^OcE@s*t~>
JcFa0!Bfo-rrRri^OcE@s*t~>
JcFa0!Bfo-rrRri^OcE@s*t~>
JcFa0!Ph^lrr`.70[kUQL];l~>
JcFa0!Ph^lrr`.70[kUQL];l~>
JcFa0!Ph^lrr`.70[kUQL];l~>
JcF^/!h<9^iVs#G4@JXhs+^Q(~>
JcF^/!h<9^iVs#G4@JXhs+^Q(~>
JcF^/!h<9^iVs#G4@JXhs+^Q(~>
JcGBB!2AmSru(mJj8T55-trL/s+UK'~>
JcGBB!2AmSru(mJj8T55-trL/s+UK'~>
JcGBB!2AmSru(mJj8T55-trL/s+UK'~>
JcGBB!;5fg"/6WeqrIbYcPW""s+C?%~>
JcGBB!;5fg"/6WeqrIbYcPW""s+C?%~>
JcGBB!;5fg"/6WeqrIbYcPW""s+C?%~>
JcFa0!r"t"j8T1U*4LM!K)^?~>
JcFa0!r"t"j8T1U*4LM!K)^?~>
JcFa0!r"t"j8T1U*4LM!K)^?~>
JcFa0!HYC'rrR[$gO]BUs*t~>
JcFa0!HYC'rrR[$gO]BUs*t~>
JcFa0!HYC'rrR[$gO]BUs*t~>
JcG0<"-mjeSGiHjgJR%i5ihqIqd;PPJcC<$!<7Q~>
JcG0<"-mjeSGiHjgJR%i5ihqIqd;PPJcC<$!<7Q~>
JcG0<"-mjeSGiHjgJR%i5ihqIqd;PPJcC<$!<7Q~>
JcG3="gOm'TEY;nrrd]Li;)a$rr_:H9^@90JcGcMJ,~>
JcG3="gOm'TEY;nrrd]Li;)a$rr_:H9^@90JcGcMJ,~>
JcG3="gOm'TEY;nrrd]Li;)a$rr_:H9^@90JcGcMJ,~>
JcG3="]PI$=9\[&rrG;!j8T59+E74/s+14Ls*t~>
JcG3="]PI$=9\[&rrG;!j8T59+E74/s+14Ls*t~>
JcG3="]PI$=9\[&rrG;!j8T59+E74/s+14Ls*t~>
JcG6>"icc+q$0drrrW'">ibnd_]5;"s+14Js*t~>
JcG6>"icc+q$0drrrW'">ibnd_]5;"s+14Js*t~>
JcG6>"icc+q$0drrrW'">ibnd_]5;"s+14Js*t~>
JcG-;!ho\"rr3&)!2/HR!hU=EJcC<$qu;0~>
JcG-;!ho\"rr3&)!2/HR!hU=EJcC<$qu;0~>
JcG-;!ho\"rr3&)!2/HR!hU=EJcC<$qu;0~>
JcG-;!`'4&rr3%D!8HZ9!dHERJcC<$qYu'~>
JcG-;!`'4&rr3%D!8HZ9!dHERJcC<$qYu'~>
JcG-;!`'4&rr3%D!8HZ9!dHERJcC<$qYu'~>
JcG0<!rW:)rVlmX*9[>(pJ=9HJcC<$q>Ys~>
JcG0<!rW:)rVlmX*9[>(pJ=9HJcC<$q>Ys~>
JcG0<!rW:)rVlmX*9[>(pJ=9HJcC<$q>Ys~>
JcG0<!lb5,rr30!"'Ya%Qg=YRk<O"`JcC<$q#>j~>
JcG0<!lb5,rr30!"'Ya%Qg=YRk<O"`JcC<$q#>j~>
JcG0<!lb5,rr30!"'Ya%Qg=YRk<O"`JcC<$q#>j~>
JcG0<!jr$7rr3/0!0dGfYO)8jb93:*s+14Ds*t~>
JcG0<!jr$7rr3/0!0dGfYO)8jb93:*s+14Ds*t~>
JcG0<!jr$7rr3/0!0dGfYO)8jb93:*s+14Ds*t~>
JcG0<$gIhgs8V[`!42]9q<e1`]+hT&s+14Cs*t~>
JcG0<$gIhgs8V[`!42]9q<e1`]+hT&s+14Cs*t~>
JcG0<$gIhgs8V[`!42]9q<e1`]+hT&s+14Cs*t~>
JcG-;$(3!>UiG`kA;urCrrRrubCT\Es7H>A~>
JcG-;$(3!>UiG`kA;urCrrRrubCT\Es7H>A~>
JcG-;$(3!>UiG`kA;urCrrRrubCT\Es7H>A~>
JcG*:!q*PHrr3#?fBrS>A2N=ts+14As*t~>
JcG*:!q*PHrr3#?fBrS>A2N=ts+14As*t~>
JcG*:!q*PHrr3#?fBrS>A2N=ts+14As*t~>
JcF0u"7K&go7?pms762?~>
JcF0u"7K&go7?pms762?~>
JcF0u"7K&go7?pms762?~>
JcF4!"4JB/qgncus7-,>~>
JcF4!"4JB/qgncus7-,>~>
JcF4!"4JB/qgncus7-,>~>
JcF7"!m;FAJcC<$n,In~>
JcF7"!m;FAJcC<$n,In~>
JcF7"!m;FAJcC<$n,In~>
JcF:#!gab5JcC<$mf.e~>
JcF:#!gab5JcC<$mf.e~>
JcF:#!gab5JcC<$mf.e~>
JcF=$!dl-BJcC<$mJh\~>
JcF=$!dl-BJcC<$mJh\~>
JcF=$!dl-BJcC<$mJh\~>
JcFC&"8>ncj+75]s6Tc9~>
JcFC&"8>ncj+75]s6Tc9~>
JcFC&"8>ncj+75]s6Tc9~>
JcFF'"5bYGpOW?qs6K]8~>
JcFF'"5bYGpOW?qs6K]8~>
JcFF'"5bYGpOW?qs6K]8~>
JcFI(!n/E]JcC<$l2Q8~>
JcFI(!n/E]JcC<$l2Q8~>
JcFI(!n/E]JcC<$l2Q8~>
JcFL)!iI0MJcC<$kl6/~>
JcFL)!iI0MJcC<$kl6/~>
JcFL)!iI0MJcC<$kl6/~>
JcFO*!eV?1JcC<$kPp&~>
JcFO*!eV?1JcC<$kPp&~>
JcFO*!eV?1JcC<$kPp&~>
JcFU,"8cU_j+75]s5s?3~>
JcFU,"8cU_j+75]s5s?3~>
JcFU,"8cU_j+75]s5s?3~>
JcFX-"7JWWo7?pms5j92~>
JcFX-"7JWWo7?pms5j92~>
JcFX-"7JWWo7?pms5j92~>
JcF[."4nrGqgncus5a31~>
JcF[."4nrGqgncus5a31~>
JcF[."4nrGqgncus5a31~>
JcF^/!kT#%JcC<$ir=N~>
JcF^/!kT#%JcC<$ir=N~>
JcF^/!kT#%JcC<$ir=N~>
JcFa0!gaV-JcC<$iW"E~>
JcFa0!gaV-JcC<$iW"E~>
JcFa0!gaV-JcC<$iW"E~>
JcFd1!cT:*JcC<$i;\<~>
JcFd1!cT:*JcC<$i;\<~>
JcFd1!cT:*JcC<$i;\<~>
JcFj3"7o>Cl[f(es53j,~>
JcFj3"7o>Cl[f(es53j,~>
JcFj3"7o>Cl[f(es53j,~>
JcFm4"6VXOo7?pms5*d+~>
JcFm4"6VXOo7?pms5*d+~>
JcFm4"6VXOo7?pms5*d+~>
JcFp5"4JB?qgncus5!^*~>
JcFp5"4JB?qgncus5!^*~>
JcFp5"4JB?qgncus5!^*~>
JcFs6!k0#IJcC<$g])d~>
JcFs6!k0#IJcC<$g])d~>
JcFs6!k0#IJcC<$g])d~>
JcG!7!g=bEJcC<$gAc[~>
JcG!7!g=bEJcC<$gAc[~>
JcG!7!g=bEJcC<$gAc[~>
JcG$8!baRJJcC<$g&HR~>
JcG$8!baRJJcC<$g&HR~>
JcG$8!baRJJcC<$g&HR~>
JcG*:"7oVspOW?qs4I@%~>
JcG*:"7oVspOW?qs4I@%~>
JcG*:"7oVspOW?qs4I@%~>
JcG-;"6VLnqgncus4@:$~>
JcG-;"6VLnqgncus4@:$~>
JcG-;"6VLnqgncus4@:$~>
JcG0<!m_^QJcC<$ec1.~>
JcG0<!m_^QJcC<$ec1.~>
JcG0<!m_^QJcC<$ec1.~>
JcG3=!ja/YJcC<$eGk%~>
JcG3=!ja/YJcC<$eGk%~>
JcG3=!ja/YJcC<$eGk%~>
JcG6>!eW&QJcC<$e,Op~>
JcG6>!eW&QJcC<$e,Op~>
JcG6>!eW&QJcC<$e,Op~>
JcG<@"8cn*l[f(es3gpt~>
JcG<@"8cn*l[f(es3gpt~>
JcG<@"8cn*l[f(es3gpt~>
JcG?A"7JcWqgncus3^js~>
JcG?A"7JcWqgncus3^js~>
JcG?A"7JcWqgncus3^js~>
JcGBB"5bAOqgncus3Udr~>
JcGBB"5bAOqgncus3Udr~>
JcGBB"5bAOqgncus3Udr~>
JcGEC!l#kQJcC<$cMrC~>
JcGEC!l#kQJcC<$cMrC~>
JcGEC!l#kQJcC<$cMrC~>
JcGHD!hUIQJcC<$c2W:~>
JcGHD!hUIQJcC<$c2W:~>
JcGHD!hUIQJcC<$c2W:~>
JcGKE!dl9VJcC<$bl<1~>
JcGKE!dl9VJcC<$bl<1~>
JcGKE!dl9VJcC<$bl<1~>
JcGQG"8>n_l[f(es3(Fm~>
JcGQG"8>n_l[f(es3(Fm~>
JcGQG"8>n_l[f(es3(Fm~>
JcGTH"7J3[pOW?qs2t@l~>
JcGTH"7J3[pOW?qs2t@l~>
JcGTH"7J3[pOW?qs2t@l~>
JcGWI!m<!UJcC<$aT$b~>
JcGWI!m<!UJcC<$aT$b~>
JcGWI!m<!UJcC<$aT$b~>
JcGZJ!ll.mJcC<$a8^Y~>
JcGZJ!ll.mJcC<$a8^Y~>
JcGZJ!ll.mJcC<$a8^Y~>
JcG]K!fnVIJcC<$`rCP~>
JcG]K!fnVIJcC<$`rCP~>
JcG]K!fnVIJcC<$`rCP~>
JcG`L!cU-VJcC<$`W(G~>
JcG`L!cU-VJcC<$`W(G~>
JcG`L!cU-VJcC<$`W(G~>
Jc>lQpIn]`JcC<$`;b>~>
Jc>lQpIn]`JcC<$`;b>~>
Jc>lQpIn]`JcC<$`;b>~>
Jc>i(/9q&Cs+13fs*t~>
Jc>i(/9q&Cs+13fs*t~>
Jc>i(/9q&Cs+13fs*t~>
K)Yo$,`dNVJcERdJ,~>
K)Yo$,`dNVJcERdJ,~>
K)Yo$,`dNVJcERdJ,~>
KDu"J*4LM!JcEOcJ,~>
KDu"J*4LM!JcEOcJ,~>
KDu"J*4LM!JcEOcJ,~>
K`;+//DGaUJcELbJ,~>
K`;+//DGaUJcELbJ,~>
K`;+//DGaUJcELbJ,~>
LAqAQA46$?s+13as*t~>
LAqAQA46$?s+13as*t~>
LAqAQA46$?s+13as*t~>
L]7J>3)K3ts+13`s*t~>
L]7J>3)K3ts+13`s*t~>
L]7J>3)K3ts+13`s*t~>
M#RS30RWbKs+13_s*t~>
M#RS30RWbKs+13_s*t~>
M#RS30RWbKs+13_s*t~>
M#RJuT7R#ns185\~>
M#RJuT7R#ns185\~>
M#RJuT7R#ns185\~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcFd1!;D'EJcFU,J,~>
JcFd1!;D'EJcFU,J,~>
JcFd1!;D'EJcFU,J,~>
JcFg2"8<L;kCNYas5<p-~>
JcFg2"8<L;kCNYas5<p-~>
JcFg2"8<L;kCNYas5<p-~>
JcFd1"P[;iE:8AXJcFa0J,~>
JcFd1"P[;iE:8AXJcFa0J,~>
JcFd1"P[;iE:8AXJcFa0J,~>
JcF^/"OC$]J+J6kJcFg2J,~>
JcF^/"OC$]J+J6kJcFg2J,~>
JcF^/"OC$]J+J6kJcFg2J,~>
JcFX-"Ns%IMt;N"JcFm4J,~>
JcFX-"Ns%IMt;N"JcFm4J,~>
JcFX-"Ns%IMt;N"JcFm4J,~>
JcFR+"M[&ATDO3>JcFs6J,~>
JcFR+"M[&ATDO3>JcFs6J,~>
JcFR+"M[&ATDO3>JcFs6J,~>
JcFL)"HsfVX8@JJJcG$8J,~>
JcFL)"HsfVX8@JJJcG$8J,~>
JcFL)"HsfVX8@JJJcG$8J,~>
JcFI("S\)k1r"VAJcG'9J,~>
JcFI("S\)k1r"VAJcG'9J,~>
JcFI("S\)k1r"VAJcG'9J,~>
JcFC&"RggO7*gGaJcG-;J,~>
JcFC&"RggO7*gGaJcG-;J,~>
JcFC&"RggO7*gGaJcG-;J,~>
JcF=$"RgFDD!urTJcG3=J,~>
JcF=$"RgFDD!urTJcG3=J,~>
JcF=$"RgFDD!urTJcG3=J,~>
JcF7""QskHJ+nNoJcG9?J,~>
JcF7""QskHJ+nNoJcG9?J,~>
JcF7""QskHJ+nNoJcG9?J,~>
JcF0u"Q*T,Mt;N"JcG?AJ,~>
JcF0u"Q*T,Mt;N"JcG?AJ,~>
JcF0u"Q*T,Mt;N"JcG?AJ,~>
JcF*s"PZm$TDO3>JcGECJ,~>
JcF*s"PZm$TDO3>JcGECJ,~>
JcF*s"PZm$TDO3>JcGECJ,~>
JcF$q"OC$uX8@JJJcGKEJ,~>
JcF$q"OC$uX8@JJJcGKEJ,~>
JcF$q"OC$uX8@JJJcGKEJ,~>
JcEso"0Wt0^OcE9s7lVE~>
JcEso"0Wt0^OcE9s7lVE~>
JcEso"0Wt0^OcE9s7lVE~>
JcEpn"T+f65gP#]JcGTHJ,~>
JcEpn"T+f65gP#]JcGTHJ,~>
JcEpn"T+f65gP#]JcGTHJ,~>
JcEjl"S\*":tpR$JcGZJJ,~>
JcEjl"S\*":tpR$JcGZJJ,~>
JcEjl"S\*":tpR$JcGZJJ,~>
JcEdj"S[ZcB]"C@JcG`LJ,~>
JcEdj"S[ZcB]"C@JcG`LJ,~>
JcEdj"S[ZcB]"C@JcG`LJ,~>
JcE^h"RggOD!QZPJc>`MJ,~>
JcE^h"RggOD!QZPJc>`MJ,~>
JcE^h"RggOD!QZPJc>`MJ,~>
JcEXf"RC"@Msl5sK)^?~>
JcEXf"RC"@Msl5sK)^?~>
JcEXf"RC"@Msl5sK)^?~>
JcERd"P[#qQhQ(2K`?Q~>
JcERd"P[#qQhQ(2K`?Q~>
JcERd"P[#qQhQ(2K`?Q~>
JcELb"4'@PRt:Tns*t~>
JcELb"4'@PRt:Tns*t~>
JcELb"4'@PRt:Tns*t~>
JcEF`"2?fH[t4R7s*t~>
JcEF`"2?fH[t4R7s*t~>
JcEF`"2?fH[t4R7s*t~>
JcE@^"1'C4_h%iEs*t~>
JcE@^"1'C4_h%iEs*t~>
JcE@^"1'C4_h%iEs*t~>
JcE=]"T+Z*=PJE,MuS;~>
JcE=]"T+Z*=PJE,MuS;~>
JcE=]"T+Z*=PJE,MuS;~>
JcEdj!SsXFrri([(i8Mhs,I&/~>
JcEdj!SsXFrri([(i8Mhs,I&/~>
JcEdj!SsXFrri([(i8Mhs,I&/~>
JcEai!BfoDrrhe<'Qieps,[21~>
JcEai!BfoDrrhe<'Qieps,[21~>
JcEai!BfoDrrhe<'Qieps,[21~>
JcEai!Ph_*rrhLq(mjuJs,m>3~>
JcEai!Ph_*rrhLq(mjuJs,m>3~>
JcEai!Ph_*rrhLq(mjuJs,m>3~>
JcE^h!h<9^nc&^G:`PsUs-!D4~>
JcE^h!h<9^nc&^G:`PsUs-!D4~>
JcE^h!h<9^nc&^G:`PsUs-!D4~>
JcFC&!2AmSru(mJnG`U:6n"g]s-3P6~>
JcFC&!2AmSru(mJnG`U:6n"g]s-3P6~>
JcFC&!2AmSru(mJnG`U:6n"g]s-3P6~>
JcFC&!;5fg"/6WeqsOId^G%@ZJcD&9J,~>
JcFC&!;5fg"/6WeqsOId^G%@ZJcD&9J,~>
JcFC&!;5fg"/6WeqsOId^G%@ZJcD&9J,~>
JcEai!r"t"lMgse,Y5t,s-Wh:~>
JcEai!r"t"lMgse,Y5t,s-Wh:~>
JcEai!r"t"lMgse,Y5t,s-Wh:~>
JcEai!HYC,rri4k(g,[Hs-it<~>
JcEai!HYC,rri4k(g,[Hs-it<~>
JcEai!HYC,rri4k(g,[Hs-it<~>
JcF-t".=3kSGrNkXTbBU5ir"KpOa#jmt(M/s*t~>
JcF-t".=3kSGrNkXTbBU5ir"KpOa#jmt(M/s*t~>
JcF-t".=3kSGrNkXTbBU5ir"KpOa#jmt(M/s*t~>
JcF0u%'uu6Sd#)ms+gYWq<[/A"RC:HKCaZoT)X<~>
JcF0u%'uu6Sd#)ms+gYWq<[/A"RC:HKCaZoT)X<~>
JcF0u%'uu6Sd#)ms+gYWq<[/A"RC:HKCaZoT)X<~>
JcF0u"^:s+=9\[&rrG5ghu<i6>TBC5JcDDCJ,~>
JcF0u"^:s+=9\[&rrG5ghu<i6>TBC5JcDDCJ,~>
JcF0u"^:s+=9\[&rrG5ghu<i6>TBC5JcDDCJ,~>
JcF4!"j!,3q$BpsrrJjPh>[Vu9I,\jJcDJEJ,~>
JcF4!"j!,3q$BpsrrJjPh>[Vu9I,\jJcDJEJ,~>
JcF4!"j!,3q$BpsrrJjPh>[Vu9I,\jJcDJEJ,~>
JcF*s!h]OurVlng^t\klb<-oBqgndCs*t~>
JcF*s!h]OurVlng^t\klb<-oBqgndCs*t~>
JcF*s!h]OurVlng^t\klb<-oBqgndCs*t~>
JcF*s!_j""rVln-rRq2QWus+2JcDSHJ,~>
JcF*s!_j""rVln-rRq2QWus+2JcDSHJ,~>
JcF*s!_j""rVln-rRq2QWus+2JcDSHJ,~>
JcF-t!rW:)rVloqCY/RhpS0!)bP_A?Z[r.Ys*t~>
JcF-t!rW:)rVloqCY/RhpS0!)bP_A?Z[r.Ys*t~>
JcF-t!rW:)rVloqCY/RhpS0!)bP_A?Z[r.Ys*t~>
JcF-t!lb5,rVlnb`mt(qqhl"N_uKbC!.TS"Y5a"~>
JcF-t!lb5,rVlnb`mt(qqhl"N_uKbC!.TS"Y5a"~>
JcF-t!lb5,rVlnb`mt(qqhl"N_uKbC!.TS"Y5a"~>
JcF-t!k/05rr3#p@+,&]ms#C;fH^Fs<;1tDYlB4~>
JcF-t!k/05rr3#p@+,&]ms#C;fH^Fs<;1tDYlB4~>
JcF-t!k/05rr3#p@+,&]ms#C;fH^Fs<;1tDYlB4~>
JcF-t!r!(^rr3"?g!Ka#lYI".!!,L^JcE"TJ,~>
JcF-t!r!(^rr3"?g!Ka#lYI".!!,L^JcE"TJ,~>
JcF-t!r!(^rr3"?g!Ka#lYI".!!,L^JcE"TJ,~>
JcF*s"f`]<Z#@Y-rrN!Aqu?a[l[f)As*t~>
JcF*s"f`]<Z#@Y-rrN!Aqu?a[l[f)As*t~>
JcF*s"f`]<Z#@Y-rrN!Aqu?a[l[f)As*t~>
JcF'r"8f^KrQY?BMu!DS/Dl$YZi>O~>
JcF'r"8f^KrQY?BMu!DS/Dl$YZi>O~>
JcF'r"8f^KrQY?BMu!DS/Dl$YZi>O~>
JcD):!GiJH!!*eWJcE+WJ,~>
JcD):!GiJH!!*eWJcE+WJ,~>
JcD):!GiJH!!*eWJcE+WJ,~>
JcD#8"66.Y*;oj<%(Cff[Jta~>
JcD#8"66.Y*;oj<%(Cff[Jta~>
JcD#8"66.Y*;oj<%(Cff[Jta~>
JcCl4#321P,QJ+FJcE1YJ,~>
JcCl4#321P,QJ+FJcE1YJ,~>
JcCl4#321P,QJ+FJcE1YJ,~>
JcC`0"65_QUOiHSs*t~>
JcC`0"65_QUOiHSs*t~>
JcC`0"65_QUOiHSs*t~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
JcC<$JcELbJ,~>
%%EndData
showpage
%%Trailer
end
%%EOF

%%EndDocument
 @endspecial 1551 5929 a @beginspecial 14 @llx 14 @lly
494 @urx 327 @ury 2880 @rwi @setspecial
%%BeginDocument: exo-3-2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: GIMP PostScript file plugin V 1,17 by Peter Kirchgessner
%%Title: exo-3-2.eps
%%CreationDate: Tue Mar 25 22:08:21 2014
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 14 14 494 327
%%EndComments
%%BeginProlog
% Use own dictionary to avoid conflicts
10 dict begin
%%EndProlog
%%Page: 1 1
% Translate for offset
14.173228346456694 14.173228346456694 translate
% Translate to begin of first scanline
0 312.78930908284354 translate
479.31023622047252 -312.78930908284354 scale
% Image geometry
639 417 8
% Transformation matrix
[ 639 0 0 417 0 0 ]
% Strings to hold RGB-samples per scanline
/rstr 639 string def
/gstr 639 string def
/bstr 639 string def
{currentfile /ASCII85Decode filter /RunLengthDecode filter rstr readstring pop}
{currentfile /ASCII85Decode filter /RunLengthDecode filter gstr readstring pop}
{currentfile /ASCII85Decode filter /RunLengthDecode filter bstr readstring pop}
true 3
%%BeginData:        28922 ASCII Bytes
colorimage
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$V#LGlJcC<$i;\<~>
JcC<$V#LGlJcC<$i;\<~>
JcC<$V#LGlJcC<$i;\<~>
JcC<$V>g\q*([R5JcC<$j8XW~>
JcC<$V>g\q*([R5JcC<$j8XW~>
JcC<$V>g\q*([R5JcC<$j8XW~>
JcC<$V#LYjRktgi^\`T^JcFm4J,~>
JcC<$V#LYjRktgi^\`T^JcFm4J,~>
JcC<$V#LYjRktgi^\`T^JcFm4J,~>
JcC<$U&P;RM^Tiuc[l+Is60K5~>
JcC<$U&P;RM^Tiuc[l+Is60K5~>
JcC<$U&P;RM^Tiuc[l+Is60K5~>
JcC<$T)Su;E#_!(kCNYas6K]8~>
JcC<$T)Su;E#_!(kCNYas6K]8~>
JcC<$T)Su;E#_!(kCNYas6K]8~>
JcC<$SGrfj[p0V<X7q2FJcG0<J,~>
JcC<$SGrfj[p0V<X7q2FJcG0<J,~>
JcC<$SGrfj[p0V<X7q2FJcG0<J,~>
JcC<$RK!K_Y=&q0]DI0ZJcG9?J,~>
JcC<$RK!K_Y=&q0]DI0ZJcG9?J,~>
JcC<$RK!K_Y=&q0]DI0ZJcG9?J,~>
JcC<$QN%0TP;FP4e,+^rJcGBBJ,~>
JcC<$QN%0TP;FP4e,+^rJcGBBJ,~>
JcC<$QN%0TP;FP4e,+^rJcGBBJ,~>
JcC<$PQ(g8IipS7j+75]s7ZJC~>
JcC<$PQ(g8IipS7j+75]s7ZJC~>
JcC<$PQ(g8IipS7j+75]s7ZJC~>
JcC<$OT,L)?lVS,qgncus7u\F~>
JcC<$OT,L)?lVS,qgncus7u\F~>
JcC<$OT,L)?lVS,qgncus7u\F~>
JcC<$NrK=X]202HZho=RJcGZJJ,~>
JcC<$NrK=X]202HZho=RJcGZJJ,~>
JcC<$NrK=X]202HZho=RJcGZJJ,~>
JcC<$MuNtLUI65Hf7EsQs8N%K~>
JcC<$MuNtLUI65Hf7EsQs8N%K~>
JcC<$MuNtLUI65Hf7EsQs8N%K~>
JcC<$M#RY=M^U!/j+75]s*t~>
JcC<$M#RY=M^U!/j+75]s*t~>
JcC<$M#RY=M^U!/j+75]s*t~>
JcC<$L&V>.GT]PLmt(Lls*t~>
JcC<$L&V>.GT]PLmt(Lls*t~>
JcC<$L&V>.GT]PLmt(Lls*t~>
JcC<$KDu/Q[oa2D\+bIRL];l~>
JcC<$KDu/Q[oa2D\+bIRL];l~>
JcC<$KDu/Q[oa2D\+bIRL];l~>
JcC<$Jc>rSpSUOrBZG](M>r)~>
JcC<$Jc>rSpSUOrBZG](M>r)~>
JcC<$Jc>rSpSUOrBZG](M>r)~>
JcC<$JcG]K"lk@d."Bj"s,?u.~>
JcC<$JcG]K"lk@d."Bj"s,?u.~>
JcC<$JcG]K"lk@d."Bj"s,?u.~>
JcC<$JcGTH"kRu=31&ZVs,[21~>
JcC<$JcGTH"kRu=31&ZVs,[21~>
JcC<$JcGTH"kRu=31&ZVs,[21~>
JcC<$JcGNF#5bl3$qR;jJcCo5J,~>
JcC<$JcGNF#5bl3$qR;jJcCo5J,~>
JcC<$JcGNF#5bl3$qR;jJcCo5J,~>
JcC<$JcGEC#5>#d'O\EIJcD#8J,~>
JcC<$JcGEC#5>#d'O\EIJcD#8J,~>
JcC<$JcGEC#5>#d'O\EIJcD#8J,~>
JcC<$JcG<@"lk@t*-fMTs-Nb9~>
JcC<$JcG<@"lk@t*-fMTs-Nb9~>
JcC<$JcG<@"lk@t*-fMTs-Nb9~>
JcC<$JcG3="kRu=.#6i6s-it<~>
JcC<$JcG3="kRu=.#6i6s-it<~>
JcC<$JcG3="kRu=.#6i6s-it<~>
JcC<$JcG-;#5bl;'L8#RJcD;@J,~>
JcC<$JcG-;#5bl;'L8#RJcD;@J,~>
JcC<$JcG-;#5bl;'L8#RJcD;@J,~>
JcC<$JcG$8#5>#d$s9G%JcDDCJ,~>
JcC<$JcG$8#5>#d$s9G%JcDDCJ,~>
JcC<$JcG$8#5>#d$s9G%JcDDCJ,~>
JcC<$JcFp5"lk@l#\;D8s.]OD~>
JcC<$JcFp5"lk@l#\;D8s.]OD~>
JcC<$JcFp5"lk@l#\;D8s.]OD~>
JcC<$JcFg2"il!5."B]ss/#aG~>
JcC<$JcFg2"il!5."B]ss/#aG~>
JcC<$JcFg2"il!5."B]ss/#aG~>
JcC<$JcF^/"i"F^1n45js/>sJ~>
JcC<$JcF^/"i"F^1n45js/>sJ~>
JcC<$JcF^/"i"F^1n45js/>sJ~>
JcC<$JcFX-#5bSp#ZR_rJcDeNJ,~>
JcC<$JcFX-#5bSp#ZR_rJcDeNJ,~>
JcC<$JcFX-#5bSp#ZR_rJcDeNJ,~>
JcC<$JcFO*"lkq7&7EP0s/l<O~>
JcC<$JcFO*"lkq7&7EP0s/l<O~>
JcC<$JcFO*"lkq7&7EP0s/l<O~>
JcC<$JcFF'"l",I."g9*s02NR~>
JcC<$JcFF'"l",I."g9*s02NR~>
JcC<$JcFF'"l",I."g9*s02NR~>
JcC<$JcF=$"ik-f1lLgRs0M`U~>
JcC<$JcF=$"ik-f1lLgRs0M`U~>
JcC<$JcF=$"ik-f1lLgRs0M`U~>
JcC<$JcF7"#5>`;'O8!=JcE1YJ,~>
JcC<$JcF7"#5>`;'O8!=JcE1YJ,~>
JcC<$JcF7"#5>`;'O8!=JcE1YJ,~>
JcC<$JcF-t"n/'G(hgg<s1&)Z~>
JcC<$JcF-t"n/'G(hgg<s1&)Z~>
JcC<$JcF-t"n/'G(hgg<s1&)Z~>
JcC<$JcF$q"j;-9*.Q^os1A;]~>
JcC<$JcF$q"j;-9*.Q^os1A;]~>
JcC<$JcF$q"j;-9*.Q^os1A;]~>
JcC<$JcEpn"ikEr303*Ns1\M`~>
JcC<$JcEpn"ikEr303*Ns1\M`~>
JcC<$JcEpn"ikEr303*Ns1\M`~>
JcC<$JcEjl#5=l\#Y:lfJcERdJ,~>
JcC<$JcEjl#5=l\#Y:lfJcERdJ,~>
JcC<$JcEjl#5=l\#Y:lfJcERdJ,~>
JcC<$JcEai"m;43&89+8s24ke~>
JcC<$JcEai"m;43&89+8s24ke~>
JcC<$JcEai"m;43&89+8s24ke~>
JcC<$JcEXf"kRuA+F)Lhs2P(h~>
JcC<$JcEXf"kRuA+F)Lhs2P(h~>
JcC<$JcEXf"kRuA+F)Lhs2P(h~>
JcC<$JcEOc"ik9f31')bs2k:k~>
JcC<$JcEOc"ik9f31')bs2k:k~>
JcC<$JcEOc"ik9f31')bs2k:k~>
JcC<$JcFX-!SsX4rs&5,=:e$$pOW@gs*t~>
JcC<$JcFX-!SsX4rs&5,=:e$$pOW@gs*t~>
JcC<$JcFX-!SsX4rs&5,=:e$$pOW@gs*t~>
JcC<$JcFU,!Bfo1rrqkX5SRnPJcF$qJ,~>
JcC<$JcFU,!Bfo1rrqkX5SRnPJcF$qJ,~>
JcC<$JcFU,!Bfo1rrqkX5SRnPJcF$qJ,~>
JcC<$JcFU,!Ph^krrqG<-m3cdJcF-tJ,~>
JcC<$JcFU,!Ph^krrqG<-m3cdJcF-tJ,~>
JcC<$JcFU,!Ph^krrqG<-m3cdJcF-tJ,~>
JcC<$JcFR+!h<9^h#@Q0GT8]0j+76[s*t~>
JcC<$JcFR+!h<9^h#@Q0GT8]0j+76[s*t~>
JcC<$JcFR+!h<9^h#@Q0GT8]0j+76[s*t~>
JcC<$JcG6>!2AmSru(mJg]%KT[pTn@VtYcBfDg@~>
JcC<$JcG6>!2AmSru(mJg]%KT[pTn@VtYcBfDg@~>
JcC<$JcG6>!2AmSru(mJg]%KT[pTn@VtYcBfDg@~>
JcC<$JcG6>!;5fg"/6Weqq1oQpSUP!BYXFqs4[L'~>
JcC<$JcG6>!;5fg"/6Weqq1oQpSUP!BYXFqs4[L'~>
JcC<$JcG6>!;5fg"/6Weqq1oQpSUP!BYXFqs4[L'~>
JcC<$JcFU,!r"t"e,KU?QT,t0f7EtWs*t~>
JcC<$JcFU,!r"t"e,KU?QT,t0f7EtWs*t~>
JcC<$JcFU,!r"t"e,KU?QT,t0f7EtWs*t~>
JcC<$JcFU,!HYBhrrq#(-odRRJcFX-J,~>
JcC<$JcFU,!HYBhrrq#(-odRRJcFX-J,~>
JcC<$JcFU,!HYBhrrq#(-odRRJcFX-J,~>
JcC<$JcG$8"-mjeSGiHjgJR%i5g002a(QSdVtYcBir=N~>
JcC<$JcG$8"-mjeSGiHjgJR%i5g002a(QSdVtYcBir=N~>
JcC<$JcG$8"-mjeSGiHjgJR%i5g002a(QSdVtYcBir=N~>
JcC<$JcG'9"gOm'TEY;nrrd]Li;)`]rs&A0=;YGTqgne/s*t~>
JcC<$JcG'9"gOm'TEY;nrrd]Li;)`]rs&A0=;YGTqgne/s*t~>
JcC<$JcG'9"gOm'TEY;nrrd]Li;)`]rs&A0=;YGTqgne/s*t~>
JcC<$JcG'9"]PI$=9\[&rrG;!_uBo/QTu[<a+=9Rs*t~>
JcC<$JcG'9"]PI$=9\[&rrG;!_uBo/QTu[<a+=9Rs*t~>
JcC<$JcG'9"]PI$=9\[&rrG;!_uBo/QTu[<a+=9Rs*t~>
JcC<$JcG*:"icc+q$0drrrW'">ep@Cj+f$2LZ<sclMlA~>
JcC<$JcG*:"icc+q$0drrrW'">ep@Cj+f$2LZ<sclMlA~>
JcC<$JcG*:"icc+q$0drrrW'">ep@Cj+f$2LZ<sclMlA~>
JcC<$JcG!7!ho\"rr3&)!2.%*"ik:!5aUqjs6]i:~>
JcC<$JcG!7!ho\"rr3&)!2.%*"ik:!5aUqjs6]i:~>
JcC<$JcG!7!ho\"rr3&)!2.%*"ik:!5aUqjs6]i:~>
JcC<$JcG!7!`'4&rr3%D!8G-c#5bl3&6Pk)JcG6>J,~>
JcC<$JcG!7!`'4&rr3%D!8G-c#5bl3&6Pk)JcG6>J,~>
JcC<$JcG!7!`'4&rr3%D!8G-c#5bl3&6Pk)JcG6>J,~>
JcC<$JcG$8!rW:)rVlmX*4PqOn!?9RBZG](o)F4~>
JcC<$JcG$8!rW:)rVlmX*4PqOn!?9RBZG](o)F4~>
JcC<$JcG$8!rW:)rVlmX*4PqOn!?9RBZG](o)F4~>
JcC<$JcG$8!lb5,rr30!"'Ya%Qactuj+f$*Gh7NHp&BO~>
JcC<$JcG$8!lb5,rr30!"'Ya%Qactuj+f$*Gh7NHp&BO~>
JcC<$JcG$8!lb5,rr30!"'Ya%Qactuj+f$*Gh7NHp&BO~>
JcC<$JcG$8!jr$7rr3/0!0dGfYI+<5a*8R`LZ<scq#>j~>
JcC<$JcG$8!jr$7rr3/0!0dGfYI+<5a*8R`LZ<scq#>j~>
JcC<$JcG$8!jr$7rr3/0!0dGfYI+<5a*8R`LZ<scq#>j~>
JcC<$JcG$8$gIhgs8V[`!42]9q6L#)qmTZ98>l35s82hH~>
JcC<$JcG$8$gIhgs8V[`!42]9q6L#)qmTZ98>l35s82hH~>
JcC<$JcG$8$gIhgs8V[`!42]9q6L#)qmTZ98>l35s82hH~>
JcC<$JcG!7$(3!>UiG`kA;uqYrs%qa8.8V0qgneHs*t~>
JcC<$JcG!7$(3!>UiG`kA;uqYrs%qa8.8V0qgneHs*t~>
JcC<$JcG!7$(3!>UiG`kA;uqYrs%qa8.8V0qgneHs*t~>
JcC<$JcFs6!q*PHrr3#?f;eiSj+f$&B[?SU!o$]?M>r)~>
JcC<$JcFs6!q*PHrr3#?f;eiSj+f$&B[?SU!o$]?M>r)~>
JcC<$JcFs6!q*PHrr3#?f;eiSj+f$&B[?SU!o$]?M>r)~>
JcC<$JcCK)"ik^),_+SJrr[KG'W[,kJ,~>
JcC<$JcCK)"ik^),_+SJrr[KG'W[,kJ,~>
JcC<$JcCK)"ik^),_+SJrr[KG'W[,kJ,~>
JcC<$JcCB&#.%hK4Ho4ZrVusul\tjo~>
JcC<$JcCB&#.%hK4Ho4ZrVusul\tjo~>
JcC<$JcCB&#.%hK4Ho4ZrVusul\tjo~>
JcC<$JcC<$"8f9$'Dqh2'W[5nJ,~>
JcC<$JcC<$"8f9$'Dqh2'W[5nJ,~>
JcC<$JcC<$"8f9$'Dqh2'W[5nJ,~>
JcC<$JcC<$rr2t,q>^Oql];'r~>
JcC<$JcC<$rr2t,q>^Oql];'r~>
JcC<$JcC<$rr2t,q>^Oql];'r~>
JcC<$JcC<$s8N,k&GZ;,'W[>qJ,~>
JcC<$JcC<$s8N,k&GZ;,'W[>qJ,~>
JcC<$JcC<$s8N,k&GZ;,'W[>qJ,~>
JcC<$JcC<$s8N8WCe-B&"T&0"<9o_IJ,~>
JcC<$JcC<$s8N8WCe-B&"T&0"<9o_IJ,~>
JcC<$JcC<$s8N8WCe-B&"T&0"<9o_IJ,~>
JcC<$JcC<$qYpm!hoDpYG[Np!\!-iB~>
JcC<$JcC<$qYpm!hoDpYG[Np!\!-iB~>
JcC<$JcC<$qYpm!hoDpYG[Np!\!-iB~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcEF`"6Z.E+G'R8s*t~>
JcC<$JcEF`"6Z.E+G'R8s*t~>
JcC<$JcEF`"6Z.E+G'R8s*t~>
JcC<$JcERd#Q)Pd0G%?]o7?qas*t~>
JcC<$JcERd#Q)Pd0G%?]o7?qas*t~>
JcC<$JcERd#Q)Pd0G%?]o7?qas*t~>
JcC<$JcE[g#Of-0+=MWTqgndfs*t~>
JcC<$JcE[g#Of-0+=MWTqgndfs*t~>
JcC<$JcE[g#Of-0+=MWTqgndfs*t~>
JcC<$JcEdj#2>V<'L\;>JcEXfJ,~>
JcC<$JcEdj#2>V<'L\;>JcEXfJ,~>
JcC<$JcEdj#2>V<'L\;>JcEXfJ,~>
JcC<$JcEmm#02*>+CMDAJcEOcJ,~>
JcC<$JcEmm#02*>+CMDAJcEOcJ,~>
JcC<$JcEmm#02*>+CMDAJcEOcJ,~>
JcC<$JcF$q#Oe9q'JP$[pOW@Xs*t~>
JcC<$JcF$q#Oe9q'JP$[pOW@Xs*t~>
JcC<$JcF$q#Oe9q'JP$[pOW@Xs*t~>
JcC<$JcF-t#2b2$(grj!JcE:\J,~>
JcC<$JcF-t#2b2$(grj!JcE:\J,~>
JcC<$JcF-t#2b2$(grj!JcE:\J,~>
JcC<$`;]koVNh)cpV1Aa+F(ZqJcE1YJ,~>
JcC<$`;]koVNh)cpV1Aa+F(ZqJcE1YJ,~>
JcC<$`;]koVNh)cpV1Aa+F(ZqJcE1YJ,~>
JcC<$_uBa"nX0=\j.BEb5_n6Js0DZT~>
JcC<$_uBa"nX0=\j.BEb5_n6Js0DZT~>
JcC<$_uBa"nX0=\j.BEb5_n6Js0DZT~>
JcC<$_uBbQ<La!ma+$>g@%Zn=s0)HQ~>
JcC<$_uBbQ<La!ma+$>g@%Zn=s0)HQ~>
JcC<$_uBbQ<La!ma+$>g@%Zn=s0)HQ~>
JcC<$_Z'\-<V)pa#PY]8+<YpDpOW@Gs*t~>
JcC<$_Z'\-<V)pa#PY]8+<YpDpOW@Gs*t~>
JcC<$_Z'\-<V)pa#PY]8+<YpDpOW@Gs*t~>
JcC<$ec,WDmS!Qu!4es+#2c%D$p]<oJcD\KJ,~>
JcC<$ec,WDmS!Qu!4es+#2c%D$p]<oJcD\KJ,~>
JcC<$ec,WDmS!Qu!4es+#2c%D$p]<oJcD\KJ,~>
JcC<$ec,XBn$N7l(l%pers/G9IjbS)TAtM&V>l&~>
JcC<$ec,XBn$N7l(l%pers/G9IjbS)TAtM&V>l&~>
JcC<$ec,XBn$N7l(l%pers/G9IjbS)TAtM&V>l&~>
JcC<$_uBf45fTi(#PY-(*$Aq0pOW@=s*t~>
JcC<$_uBf45fTi(#PY-(*$Aq0pOW@=s*t~>
JcC<$_uBf45fTi(#PY-(*$Aq0pOW@=s*t~>
JcC<$_uBaYXfVO,hhOH*5_%C:s.97@~>
JcC<$_uBaYXfVO,hhOH*5_%C:s.97@~>
JcC<$_uBaYXfVO,hhOH*5_%C:s.97@~>
JcC<$cMn!7F#oijrrfG-T\r)=rs/;5GT[8oTAtM&S,\!~>
JcC<$cMn!7F#oijrrfG-T\r)=rs/;5GT[8oTAtM&S,\!~>
JcC<$cMn!7F#oijrrfG-T\r)=rs/;5GT[8oTAtM&S,\!~>
JcC<$ci4E[WrJXorVunR!*K'`ZMt0uT3r3QBYX:ms-Wh:~>
JcC<$ci4E[WrJXorVunR!*K'`ZMt0uT3r3QBYX:ms-Wh:~>
JcC<$ci4E[WrJXorVunR!*K'`ZMt0uT3r3QBYX:ms-Wh:~>
JcC<$ci4/Ps8Q1)rVlft4C5Ao#2b2$&3t`sJcCu7J,~>
JcC<$ci4/Ps8Q1)rVlft4C5Ao#2b2$&3t`sJcCu7J,~>
JcC<$ci4/Ps8Q1)rVlft4C5Ao#2b2$&3t`sJcCu7J,~>
JcC<$d/O9jRK*'h;>pLqU5QM\#PYuX+:qqQmt(M$s*t~>
JcC<$d/O9jRK*'h;>pLqU5QM\#PYuX+:qqQmt(M$s*t~>
JcC<$d/O9jRK*'h;>pLqU5QM\#PYuX+:qqQmt(M$s*t~>
JcC<$c2Rj<!3uM&!M$s:rs/:r?k=H*^\<<ZNrOV~>
JcC<$c2Rj<!3uM&!M$s:rs/:r?k=H*^\<<ZNrOV~>
JcC<$c2Rj<!3uM&!M$s:rs/:r?k=H*^\<<ZNrOV~>
JcC<$c2Ri>$2si&!Fl#@rs%AI5S-2Ihgtfbs*t~>
JcC<$c2Ri>$2si&!Fl#@rs%AI5S-2Ihgtfbs*t~>
JcC<$c2Ri>$2si&!Fl#@rs%AI5S-2Ihgtfbs*t~>
JcC<$cMmtE"^(a'!W-ZJrs/G9Ijc:EVtYcBL];l~>
JcC<$cMmtE"^(a'!W-ZJrs/G9Ijc:EVtYcBL];l~>
JcC<$cMmtE"^(a'!W-ZJrs/G9Ijc:EVtYcBL];l~>
JcC<$cMmsc!13Za!LLgDrs/:r?lV.U^\`T^K`?Q~>
JcC<$cMmsc!13Za!LLgDrs/:r?lV.U^\`T^K`?Q~>
JcC<$cMmsc!13Za!LLgDrs/:r?lV.U^\`T^K`?Q~>
JcC<$cMmsT!3cD%!Vp-Brs%AI5S-JYhgtfYrrE(L~>
JcC<$cMmsT!3cD%!Vp-Brs%AI5S-JYhgtfYrrE(L~>
JcC<$cMmsT!3cD%!Vp-Brs%AI5S-JYhgtfYrrE(L~>
JcC<$cMmt?$]Y/c!HZr8rs$f!-m2p,pOW?qs8DtJ~>
JcC<$cMmt?$]Y/c!HZr8rs$f!-m2p,pOW?qs8DtJ~>
JcC<$cMmt?$]Y/c!HZr8rs$f!-m2p,pOW?qs8DtJ~>
JcC<$c2RsI+J>uX`lnAdo<2O93.KP2s+14Gs*t~>
JcC<$c2RsI+J>uX`lnAdo<2O93.KP2s+14Gs*t~>
JcC<$c2RsI+J>uX`lnAdo<2O93.KP2s+14Gs*t~>
JcC<$bl7eB]>XZmrs%YI8/+aaj+75]s7ZJC~>
JcC<$bl7eB]>XZmrs%YI8/+aaj+75]s7ZJC~>
JcC<$bl7eB]>XZmrs%YI8/+aaj+75]s7ZJC~>
JcC<$Qi@95F>+tR]D$mVJcG?AJ,~>
JcC<$Qi@95F>+tR]D$mVJcG?AJ,~>
JcC<$Qi@95F>+tR]D$mVJcG?AJ,~>
JcC<$S,W`RVd'oiI*_\@s+14>s*t~>
JcC<$S,W`RVd'oiI*_\@s+14>s*t~>
JcC<$S,W`RVd'oiI*_\@s+14>s*t~>
JcC<$T)T#<LI;\QPNRMsJcG*:J,~>
JcC<$T)T#<LI;\QPNRMsJcG*:J,~>
JcC<$T)T#<LI;\QPNRMsJcG*:J,~>
JcC<$UAkJiZYV$0Cq'.is+147s*t~>
JcC<$UAkJiZYV$0Cq'.is+147s*t~>
JcC<$UAkJiZYV$0Cq'.is+147s*t~>
JcC<$V>gb[UKeX(Mq<O[JcFj3J,~>
JcC<$V>gb[UKeX(Mq<O[JcFj3J,~>
JcC<$V>gb[UKeX(Mq<O[JcFj3J,~>
JcC<$W;d(NM_lPiYO@&BJcFa0J,~>
JcC<$W;d(NM_lPiYO@&BJcFa0J,~>
JcC<$W;d(NM_lPiYO@&BJcFa0J,~>
JcC<$XT&OoY@nn$Cq'.is+14-s*t~>
JcC<$XT&OoY@nn$Cq'.is+14-s*t~>
JcC<$XT&OoY@nn$Cq'.is+14-s*t~>
JcC<$YQ"gaQTu*QO4Ss_JcFL)J,~>
JcC<$YQ"gaQTu*QO4Ss_JcFL)J,~>
JcC<$YQ"gaQTu*QO4Ss_JcFL)J,~>
JcC<$Zi::-^OIXSBYX:ms+14&s*t~>
JcC<$Zi::-^OIXSBYX:ms+14&s*t~>
JcC<$Zi::-^OIXSBYX:ms+14&s*t~>
JcC<$[f6R+VdLW4J(K8OJcF7"J,~>
JcC<$[f6R+VdLW4J(K8OJcF7"J,~>
JcC<$[f6R+VdLW4J(K8OJcF7"J,~>
JcC<$\c2lkQTu*aTAtM&JcF-tJ,~>
JcC<$\c2lkQTu*aTAtM&JcF-tJ,~>
JcC<$\c2lkQTu*aTAtM&JcF-tJ,~>
JcC<$]`/2VIjcFQ^\<<ZJcF$qJ,~>
JcC<$]`/2VIjcFQ^\<<ZJcF$qJ,~>
JcC<$]`/2VIjcFQ^\<<ZJcF$qJ,~>
JcC<$_#FW5[pU=<J(K8OJcEmmJ,~>
JcC<$_#FW5[pU=<J(K8OJcEmmJ,~>
JcC<$_#FW5[pU=<J(K8OJcEmmJ,~>
JcC<$_uBquT1BMaTAP5"JcEdjJ,~>
JcC<$_uBquT1BMaTAP5"JcEdjJ,~>
JcC<$_uBquT1BMaTAP5"JcEdjJ,~>
JcC<$`r?7`IlJQY\+bIRJcE[gJ,~>
JcC<$`r?7`IlJQY\+bIRJcE[gJ,~>
JcC<$`r?7`IlJQY\+bIRJcE[gJ,~>
JcC<$b5V\?[pU=<J&d-?JcEOcJ,~>
JcC<$b5V\?[pU=<J&d-?JcEOcJ,~>
JcC<$b5V\?[pU=<J&d-?JcEOcJ,~>
JcC<$c2S"*T1BMaTAP5"JcEF`J,~>
JcC<$c2S"*T1BMaTAP5"JcEF`J,~>
JcC<$c2S"*T1BMaTAP5"JcEF`J,~>
JcC<$d/O<jIlJQY\+bIRJcE=]J,~>
JcC<$d/O<jIlJQY\+bIRJcE=]J,~>
JcC<$d/O<jIlJQY\+bIRJcE=]J,~>
JcC<$eGfaIVdLW,J&d-?JcE1YJ,~>
JcC<$eGfaIVdLW,J&d-?JcE1YJ,~>
JcC<$eGfaIVdLW,J&d-?JcE1YJ,~>
JcC<$fDc'4QTu*aTAP5"JcE(VJ,~>
JcC<$fDc'4QTu*aTAP5"JcE(VJ,~>
JcC<$fDc'4QTu*aTAP5"JcE(VJ,~>
JcC<$g]%NQ^OIXSBYX:ms+13Ss*t~>
JcC<$g]%NQ^OIXSBYX:ms+13Ss*t~>
JcC<$g]%NQ^OIXSBYX:ms+13Ss*t~>
JcC<$hZ!fKT3rL$J(K8OJcDhOJ,~>
JcC<$hZ!fKT3rL$J(K8OJcDhOJ,~>
JcC<$hZ!fKT3rL$J(K8OJcDhOJ,~>
JcC<$iVs,>LHl\aTC7@2JcD_LJ,~>
JcC<$iVs,>LHl\aTC7@2JcD_LJ,~>
JcC<$iVs,>LHl\aTC7@2JcD_LJ,~>
JcC<$jo5S[^M"`4Gea!(s+13Is*t~>
JcC<$jo5S[^M"`4Gea!(s+13Is*t~>
JcC<$jo5S[^M"`4Gea!(s+13Is*t~>
JcC<$kl1kIT3)XiQf!AoJcDJEJ,~>
JcC<$kl1kIT3)XiQf!AoJcDJEJ,~>
JcC<$kl1kIT3)XiQf!AoJcDJEJ,~>
JcC<$li.10Im>,aVtYcBJcDABJ,~>
JcC<$li.10Im>,aVtYcBJcDABJ,~>
JcC<$li.10Im>,aVtYcBJcDABJ,~>
JcC<$n,EXe[pU=<J%tl3s+13?s*t~>
JcC<$n,EXe[pU=<J%tl3s+13?s*t~>
JcC<$n,EXe[pU=<J%tl3s+13?s*t~>
JcC<$o)ApOT1BYqQf!AoJcD,;J,~>
JcC<$o)ApOT1BYqQf!AoJcD,;J,~>
JcC<$o)ApOT1BYqQf!AoJcD,;J,~>
JcC<$pAYBp^OIXSA>AUEs+138s*t~>
JcC<$pAYBp^OIXSA>AUEs+138s*t~>
JcC<$pAYBp^OIXSA>AUEs+138s*t~>
JcC<$q>UZnVdLJiE6j+8JcCl4J,~>
JcC<$q>UZnVdLJiE6j+8JcCl4J,~>
JcC<$q>UZnVdLJiE6j+8JcCl4J,~>
JcC<$r;QuYLHlDMTAtM&JcCc1J,~>
JcC<$r;QuYLHlDMTAtM&JcCc1J,~>
JcC<$r;QuYLHlDMTAtM&JcCc1J,~>
JcC<$#ljY6GT\,>VsAp6JcCZ.J,~>
JcC<$#ljY6GT\,>VsAp6JcCZ.J,~>
JcC<$#ljY6GT\,>VsAp6JcCZ.J,~>
JcCB&#32=`&1i(XJcC<$L];l~>
JcCB&#32=`&1i(XJcC<$L];l~>
JcCB&#32=`&1i(XJcC<$L];l~>
JcCK)#1n>i#Z.;VJcC<$K`?Q~>
JcCK)#1n>i#Z.;VJcC<$K`?Q~>
JcCK)#1n>i#Z.;VJcC<$K`?Q~>
JcCW-#PYuH+=(Kumt(Lis+13#~>
JcCW-#PYuH+=(Kumt(Lis+13#~>
JcCW-#PYuH+=(Kumt(Lis+13#~>
JcC`0#3VUL#V^APJcC<$JcG]KJ,~>
JcC`0#3VUL#V^APJcC<$JcG]KJ,~>
JcC`0#3VUL#V^APJcC<$JcG]KJ,~>
JcCi3#2>1q$qQ02JcC<$JcGTHJ,~>
JcCi3#2>1q$qQ02JcC<$JcGTHJ,~>
JcCi3#2>1q$qQ02JcC<$JcGTHJ,~>
JcCu7#P5QT+<4depOW?qs+14Es*t~>
JcCu7#P5QT+<4depOW?qs+14Es*t~>
JcCu7#P5QT+<4depOW?qs+14Es*t~>
JcD):#NMFa$oiaOqgncus+14Bs*t~>
JcD):#NMFa$oiaOqgncus+14Bs*t~>
JcD):#NMFa$oiaOqgncus+14Bs*t~>
JcD2=#0VK]$qR#JJcC<$JcG6>J,~>
JcD2=#0VK]$qR#JJcC<$JcG6>J,~>
JcD2=#0VK]$qR#JJcC<$JcG6>J,~>
JcD>A#Q)PX/0nW4pOW?qs+14;s*t~>
JcD>A#Q)PX/0nW4pOW?qs+14;s*t~>
JcD>A#Q)PX/0nW4pOW?qs+14;s*t~>
JcDGD#4J`l'L70"JcC<$JcG!7J,~>
JcDGD#4J`l'L70"JcC<$JcG!7J,~>
JcDGD#4J`l'L70"JcC<$JcG!7J,~>
JcDPG#1nnm$s9.^JcC<$JcFm4J,~>
JcDPG#1nnm$s9.^JcC<$JcFm4J,~>
JcDPG#1nnm$s9.^JcC<$JcFm4J,~>
JcD\K#P5QT+<YpDpOW?qs+141s*t~>
JcD\K#P5QT+<YpDpOW?qs+141s*t~>
JcD\K#P5QT+<YpDpOW?qs+141s*t~>
JcDeN#32=\'L7H2JcC<$JcFX-J,~>
JcDeN#32=\'L7H2JcC<$JcFX-J,~>
JcDeN#32=\'L7H2JcC<$JcFX-J,~>
JcDnQ#1n>i+CLi1JcC<$JcFO*J,~>
JcDnQ#1n>i+CLi1JcC<$JcFO*J,~>
JcDnQ#1n>i+CLi1JcC<$JcFO*J,~>
JcE%U#PYuH+=M`Sqgncus+14's*t~>
JcE%U#PYuH+=M`Sqgncus+14's*t~>
JcE%U#PYuH+=M`Sqgncus+14's*t~>
JcE.X#2c%D&3uT>JcC<$JcF:#J,~>
JcE.X#2c%D&3uT>JcC<$JcF:#J,~>
JcE.X#2c%D&3uT>JcC<$JcF:#J,~>
JcE7[#023Q+CM\QJcC<$JcF0uJ,~>
JcE7[#023Q+CM\QJcC<$JcF0uJ,~>
JcE7[#023Q+CM\QJcC<$JcF0uJ,~>
JcEC_#5>$'+?4kkJcC<$JcF$qJ,~>
JcEC_#5>$'+?4kkJcC<$JcF$qJ,~>
JcEC_#5>$'+?4kkJcC<$JcF$qJ,~>
JcELb#2bb4&6PR^JcC<$JcEpnJ,~>
JcELb#2bb4&6PR^JcC<$JcEpnJ,~>
JcELb#2bb4&6PR^JcC<$JcEpnJ,~>
JcEXf#PYu_-m33<pOW?qs+13ks*t~>
JcEXf#PYu_-m33<pOW?qs+13ks*t~>
JcEXf#PYu_-m33<pOW?qs+13ks*t~>
JcEai#4J0l(dNT&JcC<$JcE[gJ,~>
JcEai#4J0l(dNT&JcC<$JcE[gJ,~>
JcEai#4J0l(dNT&JcC<$JcE[gJ,~>
JcEjl#2b2$(gs!)JcC<$JcERdJ,~>
JcEjl#2b2$(gs!)JcC<$JcERdJ,~>
JcEjl#2b2$(gs!)JcC<$JcERdJ,~>
JcF!p#PYuH+<YpDpOW?qs+13as*t~>
JcF!p#PYuH+<YpDpOW?qs+13as*t~>
JcF!p#PYuH+<YpDpOW?qs+13as*t~>
JcF*s#3W$h&3uT>JcC<$JcE=]J,~>
JcF*s#3W$h&3uT>JcC<$JcE=]J,~>
JcF*s#3W$h&3uT>JcC<$JcE=]J,~>
JcF4!#1nnm(f[F-JcC<$JcE4ZJ,~>
JcF4!#1nnm(f[F-JcC<$JcE4ZJ,~>
JcF4!#1nnm(f[F-JcC<$JcE4ZJ,~>
JcF@%#PYiL*$f@Dqgncus+13Ws*t~>
JcF@%#PYiL*$f@Dqgncus+13Ws*t~>
JcF@%#PYiL*$f@Dqgncus+13Ws*t~>
JcFI(#3VmT&3u06JcC<$JcDtSJ,~>
JcFI(#3VmT&3u06JcC<$JcDtSJ,~>
JcFI(#3VmT&3u06JcC<$JcDtSJ,~>
JcFR+#1JVe'ND"!JcC<$JcDkPJ,~>
JcFR+#1JVe'ND"!JcC<$JcDkPJ,~>
JcFR+#1JVe'ND"!JcC<$JcDkPJ,~>
JcF^/#P5Q8(aNY4qgncus+13Ms*t~>
JcF^/#P5Q8(aNY4qgncus+13Ms*t~>
JcF^/#P5Q8(aNY4qgncus+13Ms*t~>
JcG*:!8mYQ#32%8$ojU2JcC<$JcDVIJ,~>
JcG*:!8mYQ#32%8$ojU2JcC<$JcDVIJ,~>
JcG*:!8mYQ#32%8$ojU2JcC<$JcDVIJ,~>
JcG0<!k1!krVm)JGUsP*YO@&BJcC<$U]5i~>
JcG0<!k1!krVm)JGUsP*YO@&BJcC<$U]5i~>
JcG0<!k1!krVm)JGUsP*YO@&BJcC<$U]5i~>
JcG6>%,Y"a!"A>*<"pTs_u##bJcC<$T`9N~>
JcG6>%,Y"a!"A>*<"pTs_u##bJcC<$T`9N~>
JcG6>%,Y"a!"A>*<"pTs_u##bJcC<$T`9N~>
JcG9?!K.Bb!!<rmQf!AoJcC<$SH"*~>
JcG9?!K.Bb!!<rmQf!AoJcC<$SH"*~>
JcG9?!K.Bb!!<rmQf!AoJcC<$SH"*~>
JcG?A!Ok&c!!%+ls+13$s-`n;~>
JcG?A!Ok&c!!%+ls+13$s-`n;~>
JcG?A!Ok&c!!%+ls+13$s-`n;~>
JcGEC!U!S\!!"9qs+13$s-`n;~>
JcGEC!U!S\!!"9qs+13$s-`n;~>
JcGEC!U!S\!!"9qs+13$s-`n;~>
JcGKE!rIlapAb3BJcC<$JcD2=J,~>
JcGKE!rIlapAb3BJcC<$JcD2=J,~>
JcGKE!rIlapAb3BJcC<$JcD2=J,~>
JcGNF%]_]7,X=Us@!$mJS"I1QJcC<$JcD2=J,~>
JcGNF%]_]7,X=Us@!$mJS"I1QJcC<$JcD2=J,~>
JcGNF%]_]7,X=Us@!$mJS"I1QJcC<$JcD2=J,~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
JcC<$JcC<$K)^?~>
%%EndData
showpage
%%Trailer
end
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 1858 6547 a(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -246 -391 a Fd(Exercice)36 b(4)f(:)p -246
-376 571 4 v -246 -278 a Fc(On)30 b(consid)m(\022)-43
b(ere)32 b(les)e(v)m(ecteurs)i(repr)m(\023)-43 b(esen)m(t)m(\023)g(es)
32 b(dans)e(le)h(quadrillage)g(ci-dessous)g(:)1455 694
y @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave /xGridOffset
0.0 def /yGridOffset 0.0 def  1. .setopacityalpha  0.8 SLW 0  setgray
0.0 0.0 102.43 102.43 0.0 0.0 25.6075 abs 25.6075 abs 1 10 { 0  setgray
} 0.0 /NimbusSanL-Regu findfont 0.0 scalefont setfont Grid grestore
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.40822
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 51.215 76.8225
51.215 51.215   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.40822 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.40822
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 76.8225
76.8225 51.215 51.215   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.40822 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.40822
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 76.8225
51.215 51.215 51.215   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.40822 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.40822
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 76.8225
25.6075 51.215 51.215   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.40822 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.40822
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 51.215 25.6075
51.215 51.215   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.40822 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.40822
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 25.6075
25.6075 51.215 51.215   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.40822 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.40822
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 25.6075
51.215 51.215 51.215   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.40822 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.40822
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 25.6075
76.8225 51.215 51.215   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.40822 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1455 694 a
tx@Dict begin { 51.215 81.94391 } PutCoor PutBegin  end
 1455 694 a 1414 725 a Fa(N)1455 694 y
tx@Dict begin  PutEnd  end
 1455
694 a 1455 694 a
tx@Dict begin { 81.94391 81.94391 } PutCoor PutBegin  end
 1455 694 a 1419 725 a Fa(U)1455 694
y
tx@Dict begin  PutEnd  end
 1455 694 a 1455 694 a
tx@Dict begin { 81.94391 51.215 } PutCoor PutBegin  end
 1455 694 a 1419 725 a Fa(E)1455
694 y
tx@Dict begin  PutEnd  end
 1455 694 a 1455 694 a
tx@Dict begin { 81.94391 20.48607 } PutCoor PutBegin  end
 1455 694 a 1418 725 a Fa(V)1455
694 y
tx@Dict begin  PutEnd  end
 1455 694 a 1455 694 a
tx@Dict begin { 51.215 20.48607 } PutCoor PutBegin  end
 1455 694 a 1425 725 a Fa(S)1455
694 y
tx@Dict begin  PutEnd  end
 1455 694 a 1455 694 a
tx@Dict begin { 20.48607 20.48607 } PutCoor PutBegin  end
 1455 694 a 1422 725 a Fa(T)1455
694 y
tx@Dict begin  PutEnd  end
 1455 694 a 1455 694 a
tx@Dict begin { 20.48607 51.215 } PutCoor PutBegin  end
 1455 694 a 1419 725 a Fa(O)1455
694 y
tx@Dict begin  PutEnd  end
 1455 694 a 1455 694 a
tx@Dict begin { 20.48607 81.94391 } PutCoor PutBegin  end
 1455 694 a 1420 725 a Fa(R)1455
694 y
tx@Dict begin  PutEnd  end
 1455 694 a 1455 694 a
tx@Dict begin { 56.33641 56.33641 } PutCoor PutBegin  end
 1455 694 a 1420 725 a Fa(P)1455
694 y
tx@Dict begin  PutEnd  end
 1455 694 a -105 861 a Fc(On)f(donne)g(le)h(quadrillage)g
(ci-dessous)g(et)g(un)e(p)s(oin)m(t)h Fa(A)p Fc(.)-246
2679 y @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave /xGridOffset
0.0 def /yGridOffset 0.0 def  1. .setopacityalpha  0.8 SLW 0  setgray
0.0 0.0 512.14996 204.85999 0.0 0.0 25.6075 abs 25.6075 abs 1 10 {
0  setgray } 0.0 /NimbusSanL-Regu findfont 0.0 scalefont setfont Grid
grestore  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 102.43   false
NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -246 2679 a
tx@Dict begin { 5.12141 107.5514 } PutCoor PutBegin  end
 -246 2679 a -280
2710 a Fa(A)-246 2679 y
tx@Dict begin  PutEnd  end
 -246 2679 a 0 TeXcolorgray 204
x Fb(\005)p 0 TeXcolorgray 0 TeXcolorgray 45 w Fa(a:)p
0 TeXcolorgray 46 w Fc(Construire)f(le)i(p)s(oin)m(t)f
Fa(B)5 b Fc(,)30 b(image)i(du)d(p)s(oin)m(t)i Fa(A)f
Fc(par)g(la)h(translation)h(de)e(v)m(ecteur)2768 2821
y Fb(\000)-39 b(\000)f(!)2768 2883 y Fa(P)13 b(N)d Fc(.)p
0 TeXcolorgray -147 3027 a Fa(b:)p 0 TeXcolorgray 46
w Fc(Construire)29 b(le)i(p)s(oin)m(t)f Fa(C)37 b Fc(tel)32
b(que)e(:)1647 3087 y Fb(\000)-44 b(\000)g(!)1647 3149
y Fa(B)5 b(C)32 b Fc(=)1914 3087 y Fb(\000)-45 b(\000)g(!)1914
3149 y Fa(P)13 b(U)30 b Fc(+)2168 3087 y Fb(\000)-40
b(\000)h(!)2168 3149 y Fa(P)13 b(N)p 0 TeXcolorgray -148
3331 a(c:)p 0 TeXcolorgray 47 w Fc(Construire)29 b(le)i(p)s(oin)m(t)f
Fa(D)k Fc(tel)d(que)1155 3269 y Fb(\000)-42 b(\000)g(!)1155
3331 y Fa(C)7 b(D)28 b Fc(=)c(2)1470 3269 y Fb(\000)-44
b(\000)f(!)1470 3331 y Fa(P)13 b(E)6 b Fc(.)p 0 TeXcolorgray
-156 3476 a Fa(d:)p 0 TeXcolorgray 47 w Fc(Construire)29
b(le)i(p)s(oin)m(t)f Fa(F)44 b Fc(tel)31 b(que)f(:)1611
3535 y Fb(\000)-42 b(\000)g(!)1611 3597 y Fa(D)s(F)38
b Fc(=)25 b(2)1926 3535 y Fb(\000)-30 b(!)1926 3597 y
Fa(P)13 b(S)25 b Fc(+)20 b(2)2214 3535 y Fb(\000)-44
b(\000)f(!)2214 3597 y Fa(P)13 b(E)p 0 TeXcolorgray -246
3780 a Fb(\005)p 0 TeXcolorgray 0 TeXcolorgray 45 w Fa(a:)p
0 TeXcolorgray 46 w Fc(Construire)29 b(le)i(p)s(oin)m(t)f
Fa(G)p Fc(,)h(image)h(du)d(p)s(oin)m(t)i Fa(F)43 b Fc(par)30
b(la)h(translation)g(de)g(v)m(ecteur)2769 3717 y Fb(\000)-45
b(\000)g(!)2769 3780 y Fa(P)13 b(E)5 b Fc(.)p 0 TeXcolorgray
-147 3924 a Fa(b:)p 0 TeXcolorgray 46 w Fc(Construire)29
b(le)i(p)s(oin)m(t)f Fa(H)38 b Fc(tel)31 b(que)f(:)1637
3983 y Fb(\000)-40 b(\000)h(!)1637 4045 y Fa(GH)32 b
Fc(=)1912 3983 y Fb(\000)-39 b(\000)f(!)1912 4045 y Fa(P)13
b(H)27 b Fc(+)2177 3983 y Fb(\000)-39 b(\000)g(!)2177
4045 y Fa(H)7 b(U)p 0 TeXcolorgray -148 4228 a(c:)p 0
TeXcolorgray 47 w Fc(Construire)29 b(le)i(p)s(oin)m(t)f
Fa(I)38 b Fc(tel)31 b(que)1124 4166 y Fb(\000)-32 b(!)1124
4228 y Fa(H)7 b(I)33 b Fc(=)25 b Fb(\000)1447 4166 y(\000)-46
b(\000)h(!)1447 4228 y Fa(O)s(P)12 b Fc(.)p 0 TeXcolorgray
-156 4372 a Fa(d:)p 0 TeXcolorgray 47 w Fc(Construire)29
b(le)i(p)s(oin)m(t)f Fa(J)40 b Fc(tel)31 b(que)f(:)1611
4431 y Fb(\000)-55 b(!)1611 4493 y Fa(I)7 b(J)35 b Fc(=)1839
4431 y Fb(\000)-44 b(\000)f(!)1839 4493 y Fa(P)13 b(V)40
b Fc(+)20 b(0)p Fa(;)15 b Fc(5)2224 4431 y Fb(\000)-28
b(!)2224 4493 y Fa(P)13 b(S)p 0 TeXcolorgray -151 4685
a(e:)p 0 TeXcolorgray 47 w Fc(Construire)29 b(le)i(p)s(oin)m(t)f
Fa(K)37 b Fc(tel)32 b(que)1161 4622 y Fb(\000)-45 b(\000)g(!)1161
4685 y Fa(J)9 b(K)32 b Fc(=)25 b(5)1470 4622 y Fb(\000)-44
b(\000)f(!)1470 4685 y Fa(P)13 b(E)6 b Fc(.)p 0 TeXcolorgray
-158 4829 a Fa(f)f(:)p 0 TeXcolorgray 46 w Fc(Construire)29
b(le)i(p)s(oin)m(t)f Fa(L)h Fc(tel)g(que)f(:)1581 4888
y Fb(\000)-43 b(\000)f(!)1581 4950 y Fa(K)7 b(L)25 b
Fc(=)g(0)p Fa(;)15 b Fc(5)1978 4888 y Fb(\000)-38 b(\000)e(!)1978
4950 y Fa(P)13 b(N)31 b Fc(+)2244 4888 y Fb(\000)-44
b(\000)f(!)2244 4950 y Fa(P)13 b(E)p 0 TeXcolorgray -155
5133 a(g)s(:)p 0 TeXcolorgray 47 w Fc(Construire)29 b(le)i(p)s(oin)m(t)
f Fa(M)41 b Fc(tel)31 b(que)f(:)1467 5192 y Fb(\000)-36
b(\000)f(!)1467 5254 y Fa(LM)36 b Fc(=)25 b(3)1794 5192
y Fb(\000)-45 b(\000)g(!)1794 5254 y Fa(P)13 b(U)30 b
Fb(\000)20 b Fc(3)2093 5192 y Fb(\000)-39 b(\000)g(!)2093
5254 y Fa(P)13 b(N)31 b Fc(+)2359 5192 y Fb(\000)-45
b(\000)g(!)2359 5254 y Fa(P)13 b(O)p 0 TeXcolorgray -161
5437 a(h:)p 0 TeXcolorgray 47 w Fc(Construire)29 b(le)i(p)s(oin)m(t)f
Fa(Q)h Fc(tel)g(que)f(:)1643 5496 y Fb(\000)-31 b(\000)g(!)1643
5558 y Fa(M)10 b(Q)26 b Fc(=)1935 5496 y Fb(\000)-25
b(!)1935 5558 y Fa(P)13 b(T)33 b Fb(\000)2183 5496 y(\000)-45
b(\000)f(!)2183 5558 y Fa(P)13 b(O)p 0 TeXcolorgray -246
5741 a Fb(\005)p 0 TeXcolorgray 46 w Fc(T)-8 b(racer)31
b(la)g(ligne)g(bris)m(\023)-43 b(ee)32 b Fa(AB)5 b(C)i(D)s(F)13
b(GH)7 b(I)g(J)i(K)e(LM)j(Q)p Fc(.)p 0 TeXcolorgray -246
5885 a Fb(\005)p 0 TeXcolorgray 46 w Fc(Finir)26 b(la)g(construction)g
(par)f(sym)m(\023)-43 b(etrie)27 b(de)f(la)g(ligne)g(bris)m(\023)-43
b(ee)27 b(par)e(rapp)s(ort)g(\022)-45 b(a)26 b(la)g(droite)g(\()p
Fa(AQ)p Fc(\).)g(Quel)g(ob)5 b(jet)26 b(reconnaissez-)-155
5998 y(v)m(ous)16 b(?)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
