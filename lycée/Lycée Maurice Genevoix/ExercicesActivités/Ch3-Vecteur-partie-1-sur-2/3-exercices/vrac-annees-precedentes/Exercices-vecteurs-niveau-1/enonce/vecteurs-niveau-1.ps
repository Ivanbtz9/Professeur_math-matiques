%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: E:/Mes-cours-2nde-mis-a-jour/Cours/Chapitre-vecteurs/Exercices/Exercices-vecteurs-niveau-1/vecteurs-niveau-1.dvi
%%CreationDate: Thu Apr 07 21:05:07 2016
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: CMR12 CMBX10 CMR10 CMSY10 CMMI10 CMSY8 CMEX10 CMR8
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files (x86)\MiKTeX 2.9\miktex\bin\dvips.exe" -P pdf
%+ E:/Mes-cours-2nde-mis-a-jour/Cours/Chapitre-vecteurs/Exercices/Exercices-vecteurs-niveau-1/vecteurs-niveau-1.dvi
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2016.04.07:2105
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1DEB8CF0BE87C59313978F28295C0E3A01D2B5682DA86A38F390982A8FE
C3E81B8D3532C92C4A4A4BCB421D248F634447613101BA5B301431F192BC6962
E6F9E2542F1B0D3AE7560888A9344A7EB7ACED0D46351ABA0DC93EEB47CDF0AF
28B602579EE7E3CEFE0C6F5332EB843348D80B020E7A127C634BF2A3A55B6C94
1896769C33D5BEFA8F144D6DD702380447904C92197B8C7CB55679A6AB8FB7D6
2E3087D2CC3CB9BC10C0CC485AE395D036339862CF98337FEEE3394157B9862A
120162EE40ADD32C55B39E4BED180B4E4F51C28377589B982F13DC6D44E758B3
022813BABDF45231A712C97D06658FC2AAB9F59BEEF9FDBE186B7CF64ABDB9E9
CAAB0BC223880A2DD496BC166B6C88552D2B1B23965FAB5BC51D2EE90B8E1322
5688DEB8C76E0E9C2FC7EF7AEB6E7DAE821F73A43A5CA6814FC018337C234636
4D61A7EE4CAD90722EF68E825686812D5A20AC3874A33E3202C32E60B44FFAFC
8D517C3A5B86ED309A0DFBC06EFA9BA510DD6C8E6292544F0EB765371C64CAC1
F04F96546838C6E7423116B4FB72F7C81C47C55138A3819E121884A0A5E87BE8
DE4D02
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMEX10
%!PS-AdobeFont-1.0: CMEX10 003.002
%%Title: CMEX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMEX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMEX10 known{/CMEX10 findfont dup/UniqueID known{dup
/UniqueID get 5092766 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMEX10 def
/FontBBox {-24 -2960 1454 772 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMEX10.) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 18 /parenleftbigg put
dup 19 /parenrightbigg put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23E7BC2A6E71BCF95FF3DA948
1A27320759222BD7BC7C1A533E90058824F06942F0234C68671083E0E4708398
D246C94F9C16DAB6563651BA33D86273FD2DB3C50C106F3CA95B1C79778D0BEB
B99D9CFB38E41BDCB4261A86A23E2CDEE4837D9B6F0E85ACEAA984C344A63709
EA35B61F08821338D363D172BD185A3658F43052AE1E61D879C99DED7F6D726E
FAFEBD881BDDEA91FB09DB75675FC74AA2BEA8771027C7A51BF849F8E765B870
8F7CC0871F301ADEF9B71EC3C607B2F51325AA5B3DD74A2C5426E7B329FAE84E
94A159C8C9C35E27A0FC93FB98A4D616750DAD50068A5F0EB96B8228946E5CC6
B69E93D262C92E3BC7161313156E380A2ABE27BE400A23DF95E65A4F76B3FFE4
CF3CD141B006C487EBC73A5A101466D4388FB2CF1D9439D0714720BB58537B7D
B3EE1F04AE117222CA5F0E5942F7A875D55D91D63958B1A02405D9DE08109B8C
7104F2D109EF7074852DFD74CBE02E0F3704F2BACA14E05EB1D0D9021EFAC23F
76C2389F8EA237D2E2AB6AFA83A725E16AECCAF025E05F1B1B5699D761F62A46
EC6F31B0FE4769BD0D66821592ADBAEFA9EB454CF1402FE870F5F96D09980C1B
8B6D2FE88BE56032C1959E6C3DC319B6A7353F3AC629CE5BCB947B4B235426E9
4769302817AEC1ADF50E50265AB488017634AF824D44D3C8423FC7CAD97F6D6E
6B34313637687FBDE3BDF6FC951CB41277D8EF49D14767B59656D214C9724DC4
0523EF896F4E48434FCC5D8423F07194C54D48C62AC29001B10C9C8B514B24C5
CEB60FF68D36749711E108DBB52738760FCF6571D5B04E58F24CC0247834B412
D0F6F8D7F1573F23E3E399D5A3A3A37FCFFEAFA044A5694D2458EFF2BC1F7650
8FB0A27C505A20C16776EDF94BEF9DF702F3C64DBC1939BEC0399B6AB283F832
DD8FB358F701CC075C596FA7B0ED7A9304DC73274C8169337D55124CB748CE26
A635B2704D8F65E23CC0FDA3C57ED451F8FDE7B6FBFCE2746F5AEA11B065A6DC
C3D200D962A034DD6757991BA62D8DC0408F49083D48799B6097B61343365A5B
30FB02E9CDFB5104FB751BE8A268EE55C1208DD8B29D5635014EDE9D0D94BB64
ED5643B3049027925BF2FD7EFCB631E01269B731AE12AA6226B2656F035C7E92
959C4A21BE40D7C138C8FF28C9FD4B768CF25F08859AE84FEE6EA18C033B3659
D9EE250BA5FF2568E8BF7684A93BED7852251D1ADE5DB815AF3AAC36D1A500C9
41D1BF3A1926828CD1F9E501ABE441A07B1B96612CF0728AD5FECF7480421F46
0B18E06D2FF1A5B1183459C59517976474698BCE18A728515CD489A83C001AFA
47BDA929F60D0FABCD8786AE16EE18615C37D18703571936A365D334BACA9BA3
08E2523132887B5EE95ABCE8581C78C3E858DBF35ADD56A1F6C2489AFA73D1B2
379C5064DAFD30FDA84581FDE268B470636EE35F21648955513714F6EAA08AF0
249C937721DB0E93D95C4DDDFB0948051953F39C6D2D811D3FFDC25F786E072B
2A8A1F4830F9CFC34666A1D3F13268980E9A26682CAB64817318A1E266F3D2D2
DE4EBB3EDAF0E7B526C838CBD7F37E74A35B1C3EB96DA4099DE689A53970D4CB
9AB355E93EB294B07DD09356C338BB4A61C147BEDC152E58DC92FA69846E4829
551A5330006793CD88523F7B3AF7B4475C531C67A4B66A603597EE72C4ADA491
BF13706F341125CABF37FADA554FDA0BA5534C7AC35F1829E250C885D9A9983C
5D1FE8CE24458A8B13E5C7EA22BF1608AFA96B83C700889A2A6C9C4052DCB892
6CAEEAA9E7D7F3E215019719B36A5DAFCCF2396FA0C04AD99A7C23772A7BAA64
D1FABE8E476EAE9FC1A3E08CD6D1DDC6E087934E676BDFD1528652B6B9A50A35
2029466364300AF4CA3C5883F6293A7104617D0858B3E43D43752F814654A938
A44C33410BA0E5EA7BF55D4F1D57E27921DB05C059DE29BAC1BFC9B607D2C5CB
1DDC47793984FBB18BD99E1DF7776B563A55E15DF024D6D8E6ADF62F16F602A6
7DDE1C68637672AA9C7A1250161502ADDDC1B4F6011A9BD5605B73AEDC37CE4E
4467C838B7692C4D541EF87DB41123F9DCCFFA971553A5D9B0E7EC539A28750C
8554383585CD8B93DF731A301D85BA9ADC95B4A3A237794C30230A82300B6756
AE5A46A090958109C5565EF60B0B16D6C0A16A56644B05D3371DABBB67ED9BB8
9BD3983575D371419C7568B2556649402AFB9843106729E4EA87B3F9038218A1
F820B098A1271E330708432567297CCDA332B555A40C62BAEB16330175D28AA6
13AE6939CEFA2334E3E890B66A73277F0B63B1FA59F856ABECC5FC0A50571F5B
0747FA554F5FC72A51E215304B2E44701A13E41D91397B204C66AAB3D101004C
7FEF2D87DA558EA057BD492CD6EF93601CB63F78426B502CDC5C8E9EF4FF3692
376601B1FAADD801602668370B5ACEFFDBACA8F8B3F4E850D07A20F6F47440FC
FD39504F0FDFCA35AF2ED0DA8BAB63AD42EA8CDA912CE17F5E62192DDD912333
3E9FA0884117F07221642490044A72E359D5F25D9591A8FAD568A3DEE435C354
11995C0EFCFEA21735DF44A30F79F747510E28767A4266461D1394F81344F6DB
1FA8D0B0D9E5F52FBB663C8F1E91192E5608FFEAA178B93F8298F70510A65BEE
12ECB5D675311B5B3B19205476512D92B1D16262720484049370A76F78D9BDC3
02EB96AC1E5B3CB078D2F219988FD0F36B043ABBF347B22D36CF541A8F80F791
8E4F92D900B7E7B64DFD500882EFBBF23565FA470103B2E0D2D14E3E4D7827D1
BAA0F84713A8CDE5904FFF2794850871DEADDDC53B77A502F5CA98B0744BB656
2FC40ED2AEBCC5CACE2301E983E6C18CF16AFB9FD8CA49DE51B22F4259D43076
DDC1BD4974CDF2E733EAB6334B1D5614288CC81FDCC722CEE193635D1088FB29
F80AD5CB96394AE89D920DF8E1F271585AF019190F17DB51FEC9064B54C3A53E
3FD33C3B553FC79F743BEC9674743BF0A821051261DE4527A2BEF4A04E293E97
02B181EC5F5EED3E26060F2C9EF6852B7433CA1BC1690C30424B03C522A087EE
92016EBDAC4B787133B4A22BFEF0B6CA564C6EB910E1DBF983CB4CFC3A1F8A26
45329CED7F5A8704ACE9D4233583365A5A97342A053EF403F0567E9D0A62EBCD
84B5D7145BBB11D31046BC2CF5B450CC68B85DA0E78EF8902F8D37DAAA9D4242
455288C0D73748F9BFEB1B1769D6FB84B94993D5F7C2B9CBDF75AEF2C930F277
210B3CCB8A0299F50AFE2548A4B8DF5ABB52F098ECDD56FCB8D3A406EFD95088
92D7EC39FDC7EB1824ECA24D0CBC6EC6F4C6A7F9590D593B269D2CC0BFBD961C
AA8BB4296B4E4411B54367A341A5EDA97288DAC370A015FDE6D7FB0A4CECEFBD
1A67DF3A3703E922BEF2C414FDDA42482EB35D5DBB206B44C76C412A435A0842
6845EAD204BDF87065CE2C99B05D2D4080D5D11CFC3316967472C7DA44CC1F9D
51B83B4BE9B882D6E9ECB482F9855D024ABFBA502CCD624E0F88164A6F13CED4
85F20DC01BB15C7D78B1C79FD9FF71F4B043F59DB5C297768115542BC7C8A99E
ACE39A268D32122541FB441FF1364FCBA2B7627F12C49ED038BC044B6D9D533B
A72D35317A5AB8D91A9AC56CA90D1DAE9F967605C63BC9F406FB3D5BAEB4B38F
4934EE3D2F5FE434B45CF5C2D0E5E417EC279DCEC4F16504EE40E837B11620B7
7526AFF23381ED3E9A92DA4DBF4EA2BE4FE444B9A74AB60EFC818E20DD8B852B
DF8CB659C0A3956D0DA61F49A9DD467726E57E9B32EFF540D551A67213D40273
AEAA6E319D92B4B406377D36DAB85662C755D76ADF5795C52D54ECCF0DE81E30
B84F951233A0A400CB063911837F0AACF44AD2441A7CE08818D64705E1ACF7E0
F59AEFC5DD812981C5508385274817056B2CDCCA4C9F3103C92838917EBFEC94
21D5737AC634B23B6F7F63B166D60C6BAA8F33AF44379C5A7337E737190EB3EE
14272B905D08C01EA118964D3444A03676FF3B62E7626168FA1DC6220699780A
0BD5776DDFA26BF0BB335B3C978CDD5CF1A419D4B5C562B3974FECFCF0118199
E547EB287CD92E32E881F344420FA3CD97333BFEF5D7E1BA31FD20622E5B4F95
692DD0ACAF01D413B21C8608FA87B470191C3CC5AD333263C955B4ADF4370FCE
D6667FC93495003F4B6AEE4F83603D55F19EFBF56F955FC9CC01E494804952CD
D426FE706C13D41F87C5C668D8B6BE50AE0370E07F52AC0534ECAB1C19851099
FC0BB1EC2A649795A62299F73CA606EDFB1D28183DC63ADF67294553115E8C57
7CB603CC491A6065802B925E6DFBF42917EE6E44C714228AE452851D61BF70AC
844B5D800EF029357FD659B8A648445CED0ECAE1474E443124F4B3644F54C556
A330D92EABEC7F607C6B13FACF69CA928F835056BD1A8ADA20EFE6BD5CF4A1A0
8B9E415E4A5FC6F209EF05ABF2E0C55F6E3060D1C72967E1E68791499F303C8B
3960C5A1F2DF6306710DFA98C8D0815A06B5590374554DCCDBDC4C295B3BA6B8
8BE3200CD4421A521C06BE39D4CA495BC63F3F982CAE3C82AD38DCB537E617D3
34BD96EFDA7C6A0F6D97A6BC9F084645390E194E7A11399FCE4EEB9A965909BA
6EC69D34DBA081BB3F18BD1ADB1AE1B7FBF96E4C546498667690857EB6931841
46C427A5B7C7D99FF889582C4AD11A7D267B301C5A5AAD9DA99D5BFD438238DA
62DEB899FF0F7B7997F781315B2CC328BE3572A3903A33EC901AC6BCC7F152A9
8A6865C6CB17189A4EEB699006A5F9D4482D53A76E88438E444F9302C79F0DC4
B3033D29D303B38F5959F020337EE6619DC8A8C3912101B02CF8AD113BF4BC29
8C6B9D25AF6B6A787F222C05964475B49B6751E3A3A6EBBEA03677D5B136B9DC
6D9AC20193BFB0759E89831C9E2AF68BD45ECC81175DFE80DC0879069ADFA8E5
24CF3C84121CD9739A28BACB9891945FA4E72EC07136682E18FCA81938FA6A3B
8CEFBAED60121530E33C1C0E698B5923D6AFC4E907A99B1367C3D435CAEDEF5F
878237453B8DB2FE53073CF3319FD096343F42D68F097759D051AEE17E4FCFC9
86E17099799DE82A38F22D870BF7AB90890E3B5264976700BAE594C8563A218C
C985D9A5A7D7BD959F7E4E66286833C86E89203ECECD6FC4C6FE1F04010218FA
A5714881C4C846E85F13BD68AC250CD0E488DBF60BB10B2CD7AE2E30F9C21DFA
0E84F76B4E996AA1C5C056E64BAC85622C160B56DEFD4DEF86887C1201F7C20C
076D4A27BA69572BE9C89FF3A9D3BAA5CAE0A6F2187AD01ED497798A305E3BD8
422DBFBF45E3F4AD35240B07285128B59FA9E83D9F6A2E620CAF6DB05129D930
44CB241CFF84E776315114C3AB61FBC0A8368D9154CC5066E2B162E89DA51165
F9CC075F2524F9A8624D2B56ABE64AF93B9F0407CC770C1F2C76CCDC06345D03
7B173C2FAA201D8E1F6C0315987A7A13902F4AA5ADF081C2B0A01C77E4F7A3E7
6A4AAEDDC577E855D69D38AF6A1D271B02AB496D94D81996FB078FBED17F833D
C6C0BCE141BCDE277D530951DD6574B9CB3CF0370D74211E9AC00C7CD3A67842
0B4B72ED517E4906409DEA7993D0B8E92D418139960EBC86BE63A1B1D417C451
8BA13C230DAE1EC4E466F23351D410D9FC4A7BBD477D5FA07659B71CE9921B1B
6755C67AB3D4988064004CF75948879D16174E8097C91F7544352474C2D9A1F8
A1813BC6F4BA13E952678F5707F19B4799ADB3BD186DF650821DF58CF3C78D67
84E4E1DF8DACEC50D15647C3DBBC3C4355E602D3A03171FE1CB36FEB940211EE
0A5300841DD7B7CF91C02B3FC5D89C691156BFF8A38C6C72789DF260B868AAA1
895046E405661D97FA9A0048AF114A89E3ADAEBCE541753E4FFCD902391B5372
6A97E32F0257FA9FA1DC15BD3140EC7F0CA5A68AABCEDBE73C38B35FDF195F96
0F9DB0F592C188D72D73512F4DD92D2371D1A59254BC477CA084E68184AEAB6C
266BB21DC3AAF874DE999AD2A17C79621AE322612EE4B6D5BDAC511418EDE90A
AE75066AF19662C4AD855E4200A5D67BEE4ADA9A399192C74D35E59B15FB61E7
BB167282D32D538029ED22CC5C9860C1F6B7BA7F33D5CF108D4BEEFAE7B37E67
39391F9934DE17956303532ABB011540645DB8420749C9B9A019C3CE86ACD566
1EE8D8D5E0D8D0DEAB33B5413EF10D4EE650F82417002E436E0B3B628A657F84
074098C2E9F897D9AB692E0FB9F268E6728F94A79CF4D6B0A07C8DFDC1D67FD5
EDD5863EA8949D180B1596D0009D662FC429449D76BF13D83F0D0CF165982443
E9CC288CF7C5F2E17EB7F3736D1FB814196CCEAB8C833720E3733BF594E1B536
BC0063080BC751F9DA1741522B2967D07DDDA169E7D3417B4A39EFAC15EA5E8E
DE3473CC9DF991FAD2A971F44B09635085DB02D692F149F144F3DCDB69B72C53
A2AF34C65DF0D5F35E82102E67B733750646EC03A4FF47138F7998607BD93AB2
B63A0B82E8E225FFAD5DC468077FBE8C8C8E5B4BB10A8FE836B07367D742BD6B
D36DF5304B9DF363120504C279453452EB177FBCDAA6F6FB78A24848F4A1D94D
1E49F6C46CB36796F3F4C9739346381F28AF085C5EBDB2A02DC0570C7A21E097
77522D4947B51182431BCBF3E55CCDDE93A916AA40CEB577277FA512380816DF
9111C56F36341381D62368E70462577D0C135BB3CB4462B269AA8E0F03245BFA
D01DB8E23F2DFD5DAA88FCAFDD51D48E562EC649DB1FFDA0FD8CC8C48E6A9207
260ABE35733D75630053CC74A07E5AF6FE87BD5FEA69CB6AA20122276AD92853
6B225BC9E3350D1B1362E04C7795D473F1266852B02C83D02D938C55D8F0C671
7A9205F8CD058304DFA034D99A6BC16C582F02484A089602D42DF30D7A5716C1
D42A4CE56C19E40C01DC7DED931FA13679CFD2700B3826A1E6539AAC12293DA8
664DE251C5D1761BB45FE364CE3F7F7E9B67F86EB31D9626CCACE4DCE03EF3C1
0D2FD1B12B5774510D46C5C5CBF0A34847418B9A1DF0C67789422D0EC2D49576
9DDE72D63A4A98613461A6F730A05336C691583F96C3CAD2AF7C4BFD3AEB3814
D909858B6598FE19397006C8C4D549AA1635968F47144E7861A2BCE8AB4CA7F0
4D253949AA0127559FAE3161C810A8CE22A3079602E747C9398F9C8B2A868F23
D77D7AD6B980FEB038E0557E58E1D7AE471036CBB96B83595D9C96A4895971CD
C2A810651A045F876A1F5AE470BEF39F856808B1F8D736030A722E1576BDB3B4
4DF06F73D38D313C8A0D3504EFBC774750C9F6E687ABCB1927FA1BB3882AABC1
2306A030CEBB259AECAA646C6497712F6C1E9DB7E1365A60EEC5AEDD5147A77B
1E3A10D73C477876D54FEE853D953EE75F7EDFB287550B93CFA8250D1FE2FE7D
D34441F1224F3DB1D355188819EBB98A94DB193B9CA23803869DD10776647BF5
5BB42031AC44A7339DC036AD0292AB9B732E6FB79BEE852A103C3788BB0F4B72
EF37BB62356F9B2DF7F5899A26F1FE0A3D6469C1034B8AB14F52555EBF6DC592
3F24D6DB395A3A182ED4B8ECEE8254661C19CC942F236CA40BAABE818EC312D8
7F5762C210FCE8A3CB9A23A24D0A751A09F4FCFB72DD0FB3AAE0575CF97D126E
1669203BE1C8F8FF626F49E8AFA7B29EF26618C6D8336D4471314D5D009BEC8C
D914E74D0BE7D7C3A2511C0DDEB6FE04360D54FB3283AD67D9DCDE211FAFD19C
449E201F2913232DDAFB2043F674EA73C9F043EB73CC9A96289B3CF819DB3E56
5FE403D8C387C99979ED9F8EB2F4EA9934F170D87D1F0D90CE8F3EAE863FB027
FB5969E37145C8D881AAA4E0464F52F3EDDF47DE80E64E5F88C9498795601ED3
A72231E130CB6E12E656AC7FD7AF2F2D88EDF9FAD3416464A96E39E0D658E84A
26768B0CE92C228D6C8C79C397C45A6E02F119170A60567D8A2B4A194BB16F26
6C4D2DC0D7892B367F6DAD1FDCD7A34B8F96DE8B73C08E980617608A10CFA526
2826A1CCFC62F730F5EF457571EA48803236DC578D68C9FC2148A78033C8606D
8DFCA32A17AFDA0E7929CD6FD50EF80D543F9F2CFE69BFDB07E08B235297B32C
6FEBE64AAE1C9C19F4076A91CA0D9CEF9C03F89E0269632619318DE67D028E64
5ED99CA2F4A2713C7E5B688DEDD6E8C2BD26AAD1550EE45D1E9869E8CA43A9BD
CA70496A23142B1844B03548847FDC62E016F957BDC370618058D93C34443DA3
81CBB487687CA5D735A2B584616E18A87712118E1307CDEBD393B6ED860BA1FB
FBDB0CC9690390A9BB97ED6FB106E53E5753DE0B7A0C7FC2B9EAEF95A3B1733B
C96615E978BC04BBED07922D6BB9D038F1F40945D3DF42921EC328513B8076DB
A0D8E8424A5D126BA38B2D37952BDC2630D81FE195F5D2AE2449BD18E304A0C0
C8B33A98C8F31C01C93CD1D47DCCA831AC8AAAB199CD41AB8E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY8
%!PS-AdobeFont-1.0: CMSY8 003.002
%%Title: CMSY8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY8 known{/CMSY8 findfont dup/UniqueID known{dup
/UniqueID get 5096649 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY8 def
/FontBBox {-30 -955 1185 779 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY8.) readonly def
/FullName (CMSY8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /prime put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D80B73E7B6CB7548
0E1D77FFC695988391DC44AEED8CC947B3D7E198B9620E2238DB3A2819182F03
14498B8CDFBA48926DA721920B221FB33BC21A8456AF10891403501D0F6415F0
7E041AFFE109F640E54FC1A365674711EFF94E752652A4C8DA62CDB1149DB899
2C4A4BD77A06E81E93C5698C05DD02F74A0756082738BDB53003B483752AE498
DD718AEA8F3FB5A6B7E2D2AE8F309065F3D556F9A34AB90C88833A54295E0982
209C466A301BA3372AABEE20D862C6DC6B6FAC1463C8CBA8AD766ED1B4C9D712
2BECB4E6ABF558D8AB5281C35726BB8D046982C0DDAE17BFFC9394125E4E84C0
B283977D31460B8EED4346CCB09F64DA0ACB640C6DBF32F2DC30D54668C1CC12
24C7280593088E9958C047125C323E9C842801346A9CE5F50413D69F6DE99471
65D2E387765E92EA4C43F17B467DF6E266D92551009C0E52E7219AE9F5E2E8D2
88852086FF3600BFB50AF3EAF8C009D8D5F084B510F792385F328F7EFA8C38AD
CDAB2EEDFBC6AA45F6DD7364C2F02DD2BE6C79C8361E83D4267CEC2407689864
B57B5D967FC80AB3BE8CA43955FB0FD3081D438437559AD24A7ADD484C1E4A77
B00BDCB0D1B121FEE983412E1EA5489BDCE5DCB4A7310135956B230C0DE7BBED
516369A92BC41FAC8D73490984942D930DC193BF0C774C1AEF627B969EE4B001
11381AC57815D7581E2372A1DB740B09F4A7FB4318B765DA4E7B44E8805CEF85
44EC3B10613FE7B397BF91B69A5CB2E9086D1E7A1FAE0A9ABF2A237A2D29ABFF
E392A18AEACBF28274E775D3FBAED4F46B982B9DA4602E24094EDCCBC9D6FC0F
67C60376879245606C0B9C9A678E8917516BE1CF097B1C75C9F0DDAD6899F08F
81FB7A198D45FE060CD2A550D9B8D58B882B969D7BC3EC018A1FE92BDB262835
26516FF97AC387EA525FF987E5EB1EAAE4EA5866C9CC043D183763C530F7D7A1
2070E4044507C4E5611FCC117FBE4396E0B24F672CD53D5FDFA56D561FB86D40
90A52A7C7F29A119DFFB694A8C445367746A49CA5FA83163BE448EB19625DF26
609A8C8672631A10411036CAA3D6C2F822A4B2505DCBE8E1CE6916AE515E78CE
E8C894B134BF811671D17C19248853131DFFAEDB24B15FF17EAC194662460642
48D23515AD434C68DF56753806FE96DB3A29F9D4980E0B6EAED7383F9FAD2584
8F85679D6D1933677ADF5D31FE6E43DABF137E834A1DEA632D36EA5728625159
8F33348893C9D1C510501628E4A9A80587DF6E179FAF68B158406A3EBCD726E2
AC17F2DF8B3607072824D2E5A6479F7BADE32E603E54E7A83BB2DFDEDB0D80CD
1F1BDD4F6C9025CC3A8A3685DF10A8183FA80CE0F0FE2BFF2500F76B1037AE41
56D2D7FB468C3CA7549E3599A2AACF66302572F1B35BC8EF7C23F6FC4B720228
1D673D903111CE378AAE83480B4DEB7EA84BB35F4F7BE997DD4FFF5A9B5E7650
3C7365BA0965B242DC369D03215651184024A08EC284F1798B0726152884B4D8
46411B3BC8F5CB53A70AD53BD7B1AF23528849B56CF2F75609FE715878CF6448
38579380688B47AE3D374B0DB6ECA5B8284414090123D47F3F9DF389E023F431
6B4C0DDEE4190DEEF4CA772742012754DA9A44A8F550FADA6D8FB0C512D5BA2C
BB7DF71B1DA41FB6936BA71B710CC6A80751E43436F0F5888F51AB370DD4A088
40F402661E08732C960705C7E0D29B8DA1A8A3E119409E51EE575E9655F47568
023977917C8EC610BEBDB9C1F4EBC192084D63EAA00EC87B53E86620BB5AE51A
579B0F8E1972CE1DA02832FC75184F45409DD9D413402C2FA27BCB0AE6DB4CE1
5AFB114E23232DE07C4674969A1FC94D152C6D3A611F029ACF4D949A2C0755D0
31C7DACDBB4DFCFAF7E87295CCF5D4AE28D87ABC3533D87EEF1507B9FF9063F7
F007DF03734A20BC3A198B049000C92D2849C62DDAA719FC28EB372793E20128
D786670E08948808BA45C4F6AA0DD8A8357CCC47228A760C5C7864853BD9C9A4
285E446CB72C5C9D3F03FAB000810DC5674061FA116153040743E846506CFA67
FA8770E785D7DBC7293F37389A0859CC22275B23C44B57B92A033A7BD194340A
D6BAC6E103402F8396A5394C617CB2A27D9500921D5DA06115EC81715EA8E360
4A95DCE8689CBE268B8E6C8B806CFB0ECBF634250243C9E1AFFACAD65311FA4C
1DB0988203537E5EF12B86FB454D06CF05E4F4FC4143D62920E99304245B6ABC
82E21192BE94F5E980DB21E07FEDF0EB0CAF4ABDFC20EF08A2A44A7940E2862E
08FABA516152DBA899D6CA561EB08C7C8298DD511084E5230CEBF28AB1D84C85
B5BAF4616C28FE05AFA4BABB3BA03F8CEEF3F3EB0D3034BD3D8D06629B8E9EBD
72484057E71C9EB4DFC7C2CE7749271AC926C2419D618FB0B60FD6F81F0F2C04
E529CC74DCC9E4AF32D935D7CA65FBD0842A7BAF162D08F782E65DF3AD9EFE69
198AFA9208B22BC21BC4ECABB9BFFBA84C8421B74748E1EAAACEB59E566838F2
C439579D6C75074F94493F7D5C8942D881AAE6302C37A61003AF77684EE99AD7
EB5EEEF050C52E75E4E842F8174470FA60CB213BB6F257EEB26CC55D1202931B
B981DE2535A87CF37BFF912220C117EE166CCAE58BBF624170FFBC0716726B36
304D698F2CA131675F7B1199E6581B8C812C4FAF75814282477BE2B7EBCBA7C2
FA6356B2876F89698C6C2493989E9EB252DE03BB374622A7C88B8EE9FEB4851E
02F85CF70CDCA7BED5EC94E81170FB557C3BFC6F32CD70B506E56A2CC5451592
130C6F570C679577C44D60A811DCEFB3535D855259B1021AC168DB76DD38B459
F1813E3DB20AD9275D58880CE94058490ABBBB0D8DD16D4A65F680B30057F15D
07FF54D779CC978E90A850A2D8D79961EE276BB26B594C16F56557435671A3D8
ADD3DD0BC4BC73B0652B9DA8462FE614A14A11ADB2214EC4910823FB4CEC8938
24354C5C62547EE5710FB5ECD93AA45DEA7411F6CA8D5B5FA222685E622AD73C
1BD5DFD1C8F253352D6C7D14FF2FACF07CA5EB11392C6A33E9CABFD99F743BED
55E8DEF49E07B9444171D1780C698E5B65B540F41F845AC188DC7C0C8B5BA5F3
546BEAAA4F29F0DF30D5AC12A60862742623100074457BF2D820DCAAB340C1DF
22FF26992DC02F276B40A7C528C84B72CD189A4088C90070486C49A1014FDDA3
5093FC12DAF309FBC063653E6A33E14EB51B081126AB5BCB8016E975060B796D
6CBFDFE6CB9E191F12E309254BDD6660E3227012F5DADE246B02B6D8127F1EE2
248F48DC5ABBD229748444420C868450602120664984FE3A8B2373232CE5CA15
E67172CAF7EA99F73A66AE33B1EDE5E8351DB02497CE3338930147873D4E46B5
E918F5592A21789FA9F46232BE693DFC33240E2649D6AC1940B101D806089436
F0CE230BF6D0363510378822891DBD3EEF3365430E74FB6C994BB40C8EEDA593
CEDAFEBC3B87C7C04F52FBD7D557A77B44855CDBEC8A8D26F44D66446B5662AD
15B6B79D13BD262D79BF51C09F8F690A61C7F11EC2E05F6BEDA273648E9E1EBC
3D5F1D6ED486797F753064ADDA8494405556D43D395B1487EDE877CCC1EAE954
1AEE2513DDA94897B733609E8179DFE1975590568202EF20D58A89B34874CC3A
A5579473AC65E0EE61545AEF578ADE10BE3FB3E2CDC96678F613E4DEF7BC1B38
8A551C93438A0540E292F65F1FA73D9AB30A5F545284085E4930A570C1807995
7108AA8194607304488616DD4AB189F8EDC5F4507AEFD7847817A8ECFFDD2DD5
DE95E04EAF2774F8AF661827229F01E769A32734097C457EB6FF056D90C46C5E
9F936AA6BF2EE8244BBEDB8862E56423F5845BB10C8809730B011D650EA18945
83C320A3F4ED095A5EF91929FC877ECC28A1C2CE74A53245E629BF46C6534983
307B1C94EB35CECDEE86551F0C308F66690E591C5D9D8FE14F534CF3F5DB6D32
39D7C799F392C4E65759B7BF61F4D8312E3B26C31466206A367A0DD7A90D25E2
805D36ED5CE0A4BEBCAC0A348FADD2D2AAD670E28BE6E33F627B4A9F35078B1D
6688084C4C18840673EF9B3526172EE14EF64E97C8B006C27DF6EF73BA6E6459
3608F10EB1EC4B824DD5360B42AFF2084788B165747AABFB2C9C0EBBA9C6246C
08F28143809315D6268E386F09BBAC54C34213438B56C386B34AA457D149CC39
A3C163F56E3C2E637C63A79CF7F2DE969EF3AAFF75F3F20499A9ACA61279D545
866FFE57D25998244F448AAB042B141952BD653007A889B1A716A4042CBBB827
C1ED5E3C616C22D5FCB39D3B3539F9B71D50D25ECD2E5D953C7A5194C867DDB1
75CE10B2C3A20E8CDE15AAE9F549D034838DC066CA649C31EE365D46450AF18B
893748D055DD88C72391FD92DDF0AA1A1316051BC756F87BC9A425019B2FA7BD
CA9F35E89E2229B3021DD24C9DF0DC3217F44DCF510116DDC9E92EFDA3E0A892
491C8961CA484BA29B8CACD2FED2E246FA7414F892AF7B9F08698FDEC82D2E4D
8C6ED1FD9E0BA2645663E7E97B0F780033D025F2EF3B364574C03F04FFC4E09A
3D4182BBFCCCD8CA54A92434E2208803ED36F931D31C7498B7FCEE4B78AECF11
B27123A10F031F9CBA36066680E4748E346D18FD0EFA395D1A9227530618ADD9
64D96C50A0172F712CB427E8F7170F8A1691FB95B247A271499F0E63676BD64B
167438333A3BD9CD9641AC637E0ADB17F1E394DF34AF5A2BD02030DD087BBA02
E1209338B74075744A9A9966039AB6D223F385E06FF359257913E6C01BF32F5B
A3640C7CA41A6C51F296E50DC1CD1D68491CE5D75E0ABDD4C5C4A97C8BE2BA35
D91AF9F8F38E7AB8C1778B06A212D0416E6137087329AAA2679C51D014CC4DEF
0F1543E2FD97621E552E19B29AA1368CB5046C188BA59B1E1875B25FB269DD2D
C0678A42CD310702465694F2BF302AEBC43F714F7C657505132DDA71CD23D17D
628BF3400EB5DDFCE2850F31B40C5913394649AA4241CF646F3939916C2077AD
C11F8C3E478586AA7931E327333FCD8A2EB31DF4B47AA2F31B999556602DD998
5848143C0CBD0B5187DF08E675550F2384D48C2954EA7D16AD2B94DF97C194D2
302CC47BF968CB1F6C9641A87525D5C6972ACCA1D4A4B4DA8EC54BEA6E7312B3
2737754A9FCBED3BA5F8220B751506BB0A5BB5CF706AFCC04BFD713A3BE3C842
9FFDBAA0CA5691D0FCE76134841A169970903843163DE68FF09649E99945DB64
491FD6D8B2DF237DBAF550D1B74263B3BF1EF6211F40D4DF2DEC46E4DE557088
5D458A7CDC6F34B8C3F5C76582C8B7D24A333AAE0B43CA67436F8ECAD7C50B12
35BAAD521033D8024E4DFCF01580AEC63BD5F8ADB778F822AC4FF0DA608EB7CC
1A52A51B9F38FFADC0D2F4D8394C5D598123B483AE5AC1215F24F2492EBAA134
3C58AD4E3B493AABDF753EBF1F04058C6981C353D6788C2D3294165B667D3765
7883A8493F5D772F789F73979B254BB9397FDE4F8B76CA6FFF312F4B012949F4
3EDCF1AC60FFF2681549DFF430B498405E79CB407DADFCEDCAB1E2FAD3B0F4C7
B575A33EAFF9F67D37F50BB06D06834EA683862991C5BE340D4A7F8D131E733D
289F72977870F9958102F5D835739F0F5A642E7194E8AF7FDA2937E5C0712CE4
EE15CB475725030CE0F238C32775D3EC95CE3D0886046E3EEAE322F59D423E83
DE88DDAB5CE0F70537487EBA5A16A9306BA7DDCA14A85A9F83B3BC3600DC9421
BDADA2704A5A24F7174A3A486ACE68739EC5960038CB44D969A594E97AE1F42C
42C1B7E3A456B3CDFC7683537B337AA8777F18CA45B22C8BEB18877DC624496B
9E8EF9F386B7FE4D94ABD5CE3B5786E76FE04A35909C472C04654A4405932EE6
A4A3E0F6DB088603FDD82F0EFCB85A962002A662D1AD0647A2F484B59075A1FA
9F4327D542ED7962620B998ECC3A95CE736089593461CED9B5AAAB05C2DA3820
5AF29B32904E1EEC357C8E282189C6D8F562DB11291091E6897E24CD8F8E2A34
67F35D261E01336152E69831B0CC6B03FF1AC7EA22B745F513A25FE10F70E74A
3FD71FE1EC9999BEDE7CFA6A97EA2DF621711BE950FF8960965685BAAEA71FA6
36F165573A0A6A92DAEE41A9B0C97BF03419FF6BA1F44524D00FD671EACC4233
9A857680DFD27B9F1E7A760058C8277B3761DB9969241D1824A7DADF70BBFC38
89C6DB9091E3BFCB36851CB9662B365A4B7384BDBA1D385902D1E5DABA72A159
63790096B927EA49299AE03E41C7F593F3B995D1155E91C62D5F68845ED3C797
7798B56858F96C2FE2E37D812873B7801767082A6D6B60602CEB94B7F6D7A142
72814734DC584A18D1FFEA7333D4C7E2DFE5B91E9AD92EB52533CA52FA888980
C79FEEDF0FAFB3B20B497F9AB668BDAFA364B405916526D5C48E57DC30BC35B9
BF684FDFAD199D9A28541327F3899AD505FBBBBB22F419E22E0149EE5FDD2B43
AF442E2724EC16934C307FA731F90AD1C76B74569B78CDEA7C19808233C6364B
D049F3F50A68D3EC5F29F2B96BC58C44AF90FE13F244B7129F14B5DAC3F3F310
B330E67CA4EB76F895DAC8025F11EC7630EEB4826B5721348FA38F28B2AEEB1C
5F7CA413C486C94B1DD96988F07F7A08D3635E28624878E55D4FFBEB5E183CB5
93014D8A272EBCF3A09133603CFFEF43A6FF059BCE525706D3795884FB495748
C8AFB50DB464459A5C36D7CD087631BC09C693A11BDF1C6011D9864FE66EE8C0
4824A42E97D16E017C0BB73732D4537E2A5BB283B3568950E5681364DBC1D6DA
058A122862A44ED85029A7B39F2FA7C362D859D0B429E056891339626AE6091D
74F6110CA32F8F3E9507216997E6AD1A2F1FFBE8B407C9880DE230E234F6FD41
A291851178BEAE5DB9DEB22E3443807E2BCEF12A4AE8C490AA9E3D2918329F47
42314CD258A0760DE5FDAC4AF7209CEB530B8508B278952A3638CA8491C3B493
516F461610DBAF32E923ACB834B15E2D169A10F2609EC0ACDF7BDBC777DD2C19
2DB330FD557D3B06B78824D6AB237D8F2D57A7ED35F02CFA9290ED6893B41657
A2485524A3F1642FF5808FDB77015D9467EDAC4A6BBE8A175833B1225A5554F7
2C60207F7A2632A4023255E8EF1F38C1B8216C9B03319B60BEC9799E5378683F
46E698FA75F2DFD40F17C603F3335F1EC70DBA1449C7A33EDDD46CC3DE4A6557
EE67BF349AA8680FDBF415DC527129288B5879500180F75DF80394EC7CF11BC8
9EE9A4ABD64DE3076A2963F83FA333F19FF74F79ECF36A87A31D6F125FD2415B
3F6A6FC33C179F54CA164835F3C3DB62AF444BDF27AFF23098C7212477F688B8
6F48D9AD080D544D57FEDD33D3D9AED9346CBB644C97C951D4AEEB2BF6F0CB18
E2517BA7ADCFD00FE44E290E731D53E5C0D762FCBA08004562DCE6A5EF2FBB74
B3053CBED3B6E896B1C3356DD9E8FCB69691AAF6BEBA0424D62B9F266D560B40
89E20A9F35AD4A7F65A7183761ABBEE0F7EF26ED3565A25516A3A5A57143979A
1EEED8CD52A69E4E1AE4795F3EE0CA21B9F4D166783A9AF54B08B6C56703932A
310197E328C6E6A6BADAA11D66A952964F31FD690082FA02D1E2A4512A9F2742
33B203FB770A3A1C7490ED630D0FAEB3066429D0237E18818EC368D0DA72EB08
1951C70139EB0DD59EB53AF5039A7618C77F6CED9F0A066FED6FEE0C0E328351
BA39746C1224A29D191D8B86491E0A306ABA070CAA2756C3A33990EB6DDF34E8
06EAAFF94AE6686EEB06A17D6D020D1F4E59428D533DB0EDA6434E6E1A478D5C
2A0D08CB39DA7D5F5200199FFFE3F41729478D4F63AE01FC0BF3B378FF6402D1
CCF1BE5F191BAEAEC7FE400C9980E103D8776EC196E741AFE11D249E0C277263
80FBD329524C55943E25631F113FA0FABF7158AD9EA1231126A1CCB9E7F5CE1E
7335D0D645722B10E7EBABCA0A03F27ACE58927E0B902E5E91AC31280B9143C2
8B4A98BAEB5D8BF44ABB947DEDBFF8F1969651766DF77EB0184783B3D2AC1997
BA1109BDFE6FB08172926B58DB8DC803F40AF91B9FF17EE60E28F8400A01654C
6CB9C8CAF71A8C386A6F2F7E7613C70EF1BA0AFE58322C952018779DFC4D5C71
F3012F1020D93A14754E46AABDEB27955CAAD66F8326D26D2E1399F347DE645A
732942AC89
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 59 /comma put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A90B8A9EE5C613CDB822F07B
115D4C174FB7945535F2F9C2875C9675143B8D98DEFD3898170FBCB19B4C29CE
1E6883E0F68B5D42751BD7AD09E3EB745F0A6338BA2148B769B5E1EB21109414
C1615EC1A1FEAD5831938F74E26E1F6BF51136E5C76F823D29D35078412923DB
B3A32176ED7935058ED16528D28E50E37BBEB1D1554503645DD681BD9CBEC596
5E246EA09BF28E98FB55C1E009C35D0DE1F77393EC792463AD99F06EB05CC098
26600D42045A75CCED6ABF5FBA7CFC21560FCFE13CD0B7F53872A09449E7A748
4A5015741939054CF994DDED17AAEB074E76FD2DD48374C2B47B17CECC15A13E
3E24ACEFB8A3BE7B6CD98585D1FEDC7BDC64D393EE6FA025BCB36A327A1EFFFD
BB4759AAA590C25435D49974035FDB3F0BAE5EAACFC51610FB0BB1006D4F1C42
4C65DDC8EDE0996427EDA0CA605247A9AFE763A9575FEF2388F456F049D9A379
C1DBFA2B4E1876F4507F610F80F754830837DA19F5FB812E77E17A0645637DFC
EDC98E6D2E74DAEA579CFCF4196BF16EAB5D6D8BC48CF723F67EF19870CEC140
8F1A5AA72BE2186173396579CDB1417BF3FE57FB6CBD6D5666897538D812E36D
0B94E2AB713307DBD04D38FD70233369949693772C957D5401B17B663429FC80
2BA6116195C839D5488769C9B9E4B31F0AB5F2F3AA04DBBA32EA37986750ABB9
90333975332CBB78B1C9F2A4FD7C11150032ABD69E6A8440B63C375EAB6C09F2
F0943988B8574F053997011E46F04D6AC86FAE469E0585594F4CCDA2EC486CA5
D2D20284C3D2FA53B6C024A8EF6599F072D84590F185075D2AA4ADFFDDEDE385
1E38FF4FEEA962DEA7600D5029A270061B52B20F199996E505D2E3524E382DBD
A9974114B9CE26045F660D0D3FB0BABDD1C45F7833324D7FD10EA78D29D21C86
51FAACF1660762A57845A3CBD21FBA784B1BFCBD13BB975DB1C01B1C62C0B37A
BF8951BCCE82334F9D0720A58E4672A97812CABC00729630427A7DC20B938165
83D33C0038006C70127AF55A6428EF53761991E29D6A6A7C4C82880E15250DEF
D120B1365C30C3EDE603B6C63AF8681788C56F943BBB716194BBF9798C663F04
5DDFD2FEE2BEBE1828DF4F889E95D5B25FF372C028105558CAA9A8B1B7DD72F3
BA491F3038AD5FEA5C58F67B1BEE843A5AC7907B61AFC8C5219B78576CACEA25
338016E348D50D08B10B2712718C38741DB9B45B219F9A98F556FB94EB36ADA1
6A7A04173F7F925346833E61CFC3E19AD2F785E5FA1BEE89B5E77E82991FFBE2
D0A6FB52294D91EDB9B4CAE6BF81F1677040808840FB6D5598D1AC9FEA3E4461
77530D3A9145401E8D522310B56A4F283A0CD907612C23A53298FB8B2483C821
931DA868B37BD00C4D009319AA7E660FD567434F24F9850D5DC71F2AF657CFE2
2DDB43B2CCF4CAF4AD78A09FC40061520C2F3F4FC2E1176BB2FB2A04701CB75E
F02F3E2A17982749B3A06E00FC1604D4164B8FE873B7760F541C5F6ECD0E9A49
D923DC5544349DCF8517602E6BCDCCEFBA2EF5EEC2124D6D9CB63ECCE2DDFD9C
817D0608A6B90E08CB4C03D75E3D530E0F2DCFC9A5B2DB0A09DC40701C0178BA
EEE8893CCAB504A80F75F69D433E272A3A543CC33448F92117A77C6947D65403
C9AFCAD0D2C874AE9BB3D8797777D0BF35EE1E85BDE12C3CD30D249DAC5F79CD
47E1D1CF05D925F0DD92547A61ADFAFA69E3D0A525D8930738834D44C674DAD9
3444AC275F930EB593A6CCC2DCA890DD87A9DE2CB4A37828AF09639E88B16EE4
13F58AC2BCC01242129C495F912CBA1C84227ADA47DF657098991F44C5A9FA44
EC3F9E5D5165B8F3B3BEA4A3C6674EB1250A1A1A765B6621340E749CF3689561
AB5116CC821D07AB875881BE6D9A0369291D61DB0213F8547D9072E41E2D67F4
F41A26F77A0B9C9CAC9849F6F207EF022B5E5F5EF4741E3DE9CA7B33B57930DA
0EA62AF4D37A99345793044A39A3E45DDBF0F09914D6AE72981CB719AD7A72D0
9AE89EE450CB3575E753565B43F840890A03D2CDAB0FCA41B3B2EE3814746447
3C39B1CE994EFBFF95DFD2BA8BDFC53622E8CFF9A4FDF58C04C06B2D7DE57A77
DFBD6B41339322FE4EA75B06E95745E95ABA523E01C6D72D38FE118D56731EAC
67F64BDC8F1F06EDCD4225931C3337D23548FB4FBCE5D4C31B9C317813378216
A3322D5F959DADFCAF53E1803E09421CF8B89A651F0A6DE86A06DA328EC1C625
7BE26F6A5C8121CE7282EB70BC04C3B704E312278A3098975E019B0C662BD7C8
08A90DCE26D16A210F09065A0A0C497A3EB644F5782C4C5DA596106FB70E6A0B
05B599516CD80A38EC00824847E35679A86681ED194C2849D18E23128E4C59F2
2EE83F6D6A182FD9CC5586EC02DDC259B59638C5D606D729568EE6609372EDCB
3D1B56924D952E68934404A6FBE46C8FF9F6BF75290D55CB3274C4D6D7599BEF
308AD506A8E533255DD8CEA79F8F2C6CB0F6358B593FE39AF2298986CC472110
985399EA2B8C3DD467A3E8A80049FE94937CA8DA56374F1868107861499A6F44
9B0FCF26C292D499407B8B5F115B2DC314615431BA7610CDD325EBE04041F97A
726D27085BA075CA9C0C78E16F173AAF2E47A2F330B4A115826F6B4D010D694F
6DD9F655A8CDDD18C30E40ED15AF57935892D5C6F03C9DF7C80D1D3D3282DF29
58F53018D7965DEDCE10D60D0DFC9258A050B27C56C4471D6DC2FCCEFDA07D81
4A1B53E3AD88B7A9AF31CC246A41F850EB176850758FC4135146055199828BCA
807D829C170E9E916F54BDD647106491DB665B2FCB9E5BD2A33659DC47841837
B07D0B389613E2F5069680840670E81DAC98D8647DFFABCFA2DC7A26B75EC497
40B95A8FD2F7087FEAAB260D7BD20EF22B9DD76EF7F29F02757EC91D20E0155F
71983CB31452EDD2B9E2DDE4DE5AE2F78B825DCEBAB7EF4B043460BCB7405548
CE89D6F5783337D23548F5B8A95EBB18A3F032DFB948D0CE70F2767357FFA7A2
EDF15303FA9A832EFC05D3F87AA8E447F1180A07E3C57D366909A631444776D9
34CE7C54EBBDD56DAFBB949BBC5BEA591E02F3AB3B4DD5201225BFB7D3ABABD9
BBFEDC9BA70CFBDE8A5CA6E4EC50C88505E51EAB075FDF96CBB7F6FE0BCB8438
05C059F27D081E6850EF3736559624300417379B168C74F923A5B742FC1DBF87
32DC02686D9E922BEA4F5F21BE9688B105B297A18878741A0BEF91C6AED57791
34E0A1F2C4833A1A9AEB532449EA257C94C3C94566A838F8A8E3493E8B55E82B
801BCEAAD9384E18EE3263FB8AF356BD38688EC44BBB636996906DDEA6F3376B
D77C43DF13FE8E1E13A31DEF0758272C800D60585FD77C0D6AC52A17098D46A0
648426C75FCF66599CF5AE3AC93CAA793E69487C19E50C430244E59B7825FEFB
701F9DBF68DD4D8566A9B272BDEDFA0B7BA5CE4BDD1B1792A910802D6837807B
16185204DA71E7999095B31CF13891669BBFD65073D562C73665C6DA4647E0CA
D58C34E2AC3F28AD6B77A4F4A47CB6263BA2985D522EC4F5435A2BC5D500CE5A
2B52E895C07FBC2DB307695273000EA88D2DBBED38DAC9F29F3446AB9686FCCA
E25229C60C0C56DD39F0DE0F9A5B72D5816BD203E4BCF68E4476284AA7AE51CE
1EA7B3C649097EB57738A2DE58BA0F561ED6EAAB080556225C89DAFF293E44A1
5A501E33D29BDB73B8B4B9D991B89283D414C528A19697B60E8CB8231CDDD0DA
9B3521A655F49DE09CE233D8CA6E55C78EDF057FFF842B44E5FC478FF15EE3F3
ABCFF92535FDCE906E7A5F9E9BC4B1E41EA95269C961F80F8B20609D220F99E4
42CBC436C8E761E295E456176F4134934159FAB0D065BD3B09F6144284146B31
4C2088F8FFEA6A1BE843BD0DCE9166DB7E034D14043094A6200364B8847D23A7
D9F1C72870816655FC9F4C824ACE7ECC2FFB8B709DA36241204E330327096947
7F2163942FFE4DD5A2E874D1E05C96107FEC4ECD9F85195E0ED41C407506BC75
A3FAD32E1FDBF3948BB3D8F0650CFF5682F2AD72F6BB9245E26CCAE61B6E7359
D6CC4F604C2C6E179C04A61D38E587E8C855CDCCB2BC3523A9D817C7B79D7973
DAA4D5026B7DC71EE5CAC84C0E21D9A10CA3AFC84C1CD1882B4C2D9C749EA07C
80669D971DE6EB4D69E090FEB9845388365A65866B539B5FE3B434BDA28C11C6
E6ED56353398B97CBA6479185C02C00FDFED54BA15CC7521BB715FC45A62EC4A
67CC59018ED024BC857CD56028F80C4E00132DA3D9E5E4365E364C602F11FB53
6646E54F3E3657A353DF89230403156ECF13A483B2D5032A6F9EB4D41524CD4C
DF959425E341E52340D71DE8727A0340C218BBD6590B05570D95327A4EFEA272
755E6F7E98A92F68E84458A42EECDC2D23E79390BAA0AC7AD189935FA711158F
5DEABC7D893141CA026587039C992B035A7F31D3E0611F6B8A7F515724EB9871
641F7157BD047156D299D1C5D313FDE6E263F84C66495307A5DACA1D6F0D00BA
CF4C9FE3B21D9AB6C0A63E2D0965E1C3027BA7FA295216CD35EAB1AF3BF0086B
C99DBBB8C8582009767CFF03F8168E15A943F8EADC991902194C1C263BA31F58
C25C9BE37DC48F7ABF6508FC0B9CB76E5599EBBF08B94C80620225CFB513479E
9A88545B41E959B115E88419EF4B4B25B0FD94BF0905F35A3CCAE9A37170F0C0
2A9CC849E8504089CCE9E8354502E136D848E9AF3262FD3E342C996E2A226A3F
43E973EABE11413C6D01D13A38BD91FBF1821173384B9AC4DE524529893F4226
A6A8F05D3D0297C3253BB074B3CB5C926D0651E6812EBDA8A7D03624C033C163
5D7209D082EB5902ACF2067F50927F666D4D551C6E51B36E97F50DAB4FE4C1C6
313987E321C542DB709754D81385AB5A422D6D8806B01DC66093F9B5C8C01A5E
DCC2FFD660C71CC6D911FFF8F146B087B7A36730594A50A9E3610C3100A1D0E7
ADAF7EB749A8000CE8D03F15837AC9D4B03E0FCAEC8CBCA4BB45C429CA1C9441
EBAC43B56644E5380E1EC408162652D4A6158BA75DDC54DBDAD397C4D4525151
8C60E58B0D173A1866423099C68729F343A06C3DB7E1BEA49743EB63A90FFF0F
BB0BF71CED0F5B08D8F76DDB5B8D3EBAF03EC15978F6D7910DB9751667C2D626
99FF8AFD5E68BE2924269D571B8DD6E80350890568EB9F32D67649A0494BF523
059FF756930499FE79749EE839E62388341AE01646BEC88804A3F83B8F61DF35
1268BA2F23D6A5FE00A51C5B160C57C16395248569821B3E6E3FBA256AD37DA2
14016383479B0A7C6A14C1314EB1EA9DD4547BEAD063592BCB68D5DD01BF155E
F126A749BBF7E658661EA0F7ABA524665E00161C930B0C1D896681AAA4DCE6A4
37A46E09981A66BA1C26895E6A493A842459B6BB2D2D242D60700D07FB2BF1F9
334D2401877F30168063CC613064C4609413D2A3180DE79E3532F81D77F3F9D2
D51EF87A1F03A97280EB45E3A1DD433130DEA05D5E88774E0534D43E8871203D
7605EB044F8E3785F6A4B6E067A5E7CB1392D338D8853DA9F3FBDB7991F59E0C
F1AEA3ECC2ED6C0B5C6C64C91DD237C1B0DEF5F6E3157A2F6DC729ABDD1D9EB8
6827DAE1B9A5423EE3B58003C238AEF1EA3AC056E2405ACDB3E0DD28BF571FF2
A05332A0B6BC5A2B56AFF0E82726D62086401119723619469933AE7A56FB0335
01875509F50A574091E6CF5B36E3C44698E036D7F92F9615A89BBBA002782500
65B10182D22D388E8C8625310B883A70EAC208BCB8B274CE00A5C19458887482
EAE36292107CAA73D8319DDD788E1548661853576BF29390D365D33DDD7D2A22
267588C0DAFF8B9CB78545A1AA4E33EF886C128853181D7B9DE926B75E29D842
902C810EB08B2F0CAB6989557CEF6DD42B6EEC410A846B793C8E32674AE7E57D
8BF60ADA1C085FF4F41E2E24087D6255F0A929C45768C48FC180FC5A4904F8F4
818194EE8D037FE48817E2A2F71D0EBD9A5E6DD7D9FD799EBD2CC66DFDF601A5
3ABEECD071CE03DC07A798E7F00BF037E68F58704BCC67CF3EB988F49627960F
616172A44A72AF83456123C2355F5BDD8D67458B4A6C94CE926249012F31AB41
3E475DBEBF3D588868C49751529C8F52FF092098DD480DFFED1186E7BB155C87
4EA32EDA6C66357ECDCBC6BD2DC404EAA1166632134745C6401C50F93B4C30BF
1489756DB9258A31D94E53D007EF15CED766BD405B1C11353AEC6ABC057129DE
11C8DCDD503142006FE87F220FFD0A87F51530611E96D6726EA450BC198FF7D0
7BB2D4AF2CA5D8C9AD48C246527A45CD1228B696D9D1A63DAC5B24CDFE7E5C47
CCD123C0FCAA6464F019D36F0B2B9E8B2E45D4BDC5B5E9933EBF55297DC97089
8D806D895CF7D5CF27FB35218D22BC39A2BC6049B5B935BE8964881298C794A6
525D8AEF420E96B9170A992DB8E7E75D541DB698738F2FC3C25F10DE3A2D6978
286BC4A860EDB8832DBF15DD0E49C578432ACA2A9118AB3756A63A1D7E7FFF6A
8416DD5929A76E24D340CB1C9B39CB6F62885C40042B6F55359F69987E37070A
489AF972402040E2F38BB441ECAAE7BEEBE7AE8E28B79E69724F0DB92AD64423
2C5F32968D4ABB2FC48A6F4302C76A8A0FBBC1AFCC96651DE22295DFA956BC0C
166B1F10892DD5C2A26B13C36765640051BC03DA4694817DF178356AAD13BC3B
19F6ED546A1F47C68693794628C2076541BF9DB0ECE40EB39CDF6AB54D4C749E
E274558C25615F3B877DC005C8C5460B5F9460D57476C084167E6686B3451A78
AAE52F5EE3E2F262FDB0CD600C15FE55D6FE35FF76A5042A85144E98507A47D5
375F172443E9D428449D82C208121D09EBE38832F1F3804F9C739E2986665EB7
40AFFDA411E8C4D674EDD4292D52448004555E85DC1F90DEACDA8F0B7178E0E0
56234C7A45D45AA3C1B741CED95440C1A20669CA60A8A53324514F6BE0887356
CADE203FBF6BC64E516E3650DB7FE0776B0CC6327AD4AF9DF4DCC598B973DB2F
AE9E3A27286BCF040068971E90A8921EB6C6F47775CBD59EB2991C5C80851984
7B40BE1C24F4475C6DE4E4B7012CAAC735781873C2E5AFB41FC7F42CE7F64018
316F87A8A7EC9AC281665BCFF8CE351C86F78C76A96207647E303E3C27695218
0A2E08EB85ACF05DEBDEBC305E7C782D19D3F959D20573518E1E921698F12620
01CBE0EA575613BE8AB1EE9839E8E882CD5D524E1835AD5C90834F3A523C36FC
8BB6D7DF9EBECABA1DB08BF57A1D99872AA06AF0E9C0FA32BDBCDD7EF9A2AC65
CB86F23E4A41BBE178126CC75D61DCFC22EF832D0718DC419DBFFD49F0A94356
1442719F040A5FF2EDF6356012188C3DA9B86620604B1984ECB32024263DEFF0
A304B705CF77A8455633ADC88EE9B2E8D1B50F9D6E93D2A1717825184103D075
2FE76EB2F14789EF9FD5184CF855BC1BE49F5E58725BBD5961E3013FAC60C70E
F7C58C9284D49F07A783D3236D7F58EE48C5D1D4EECF7AC051683FEC26BF3BB5
AAAFC83D60D15CF3A8A26CB7556B24558BD75F892F7D6C5777F19F7006F4923E
E57E02002FE84CAD91A6B65EBD54ABEA20DBACE15D2EE1347E3067BAB61F466D
47B25A19F3D4434E85345ADD2A17C67A1802E2FBB4E92591EA0ED494730340C7
ED933264BD0780FB6F16707ECD55BFAD18E04131E312754BCCE4D81B64BB243F
94F3CBD9735FDC14C8252315606D118156F7184D95F3E526AD4CAF1F586142B2
524A3662EA189DF04B252D25D18DFA85082B1DEA39BF88F4916B8DA5962898FB
E30F3B392448DA7D8ABA6F56E1D48DC08B35BFB2A4883663B87D8C0ADFE5A933
AE9CF2BB35F8C80B1D66A1C695FF2DC13AEC82AB3C59689624AFB2C8E4A1A487
76B19EFCA9F8EEE980CA7BF74F3D0C9ED738F7F9683F33FD39C67ED02286E7A7
5287A38ED4B8642C64CE6C78A48BECA72298564AFC39D1558AFA51A6FD1AB12C
4CE7174FDEC28FCA89CC918184EFB5A3BD8F94286B297EEEDE9CAEF6DB6D60F2
5BBD94830BF386100BA3C780EC1F23CAEF953537161958DF5B0A988DDB4E6FD4
6B9C54BC5C85BCA6B230892305784A17C634F7FB63CFCCBE2004D3438FE0237B
D9AAABAA64828A838293C57D63A131B7A07F7F90770395401266B00408165BC8
6D47F033737791926CECFEEB1A5ADE496C53A3808CDE727683B2F62AA66EE1AA
B9583F2C7BBC39C8558B2EF4152C93F55AC7BC82B42FCE86E06EDC65CFB33C12
FE956085BAB0A15C5C6E6BE44C98F78D20274467D21D8AEEDE66202E258F65B8
2C8CA05C4867D47DCC12180A5DAA99AC934629A9913CA2A361F90974E5BDC2CF
F604816370237B3183471470CB4BEADA1DDF2C3F7EE6FD572B40FD14F9864A29
DD5866B1C0C895C7F7B92B10287B599AD7EEA7F4DEBC78BD045A02C5FD9C6C0F
A8682A2D5443A2A3A4E206D56A43CBA69238500223FB26F37E9610711B31EA60
BBE6CE146E59B03A9D26DF0721790BD51D25100CB5A45C11A8A73C2D0B119538
BDF2875D0BF2CFB2A3108EBC07C8A60299185E240A92F0AF3D687A2CEC2C4670
9F3DF1EB16602B676EEA417C8775E92317EED7C979238FE2294FCBB3EE55D29A
5A75418A878138A8B79CAC16C0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 1 /periodcentered put
dup 5 /diamondmath put
dup 33 /arrowright put
dup 70 /F put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70DE263
860B05F5C55D898644B2FDE45CD5CA984E39747767A0ACFD09B8FD932ED12698
C00C079D7FF5928CF314CA313CF0CD29AC91D253A2D61F120A9F5EC4928A31B8
1605B65C9BA0897E711DFF712518A65E2080943CA932CF055CFA1FCFB9788F34
E0A1E814732B48245056238422308AC184A0205D94F0A305E319F927B404C209
7DA42FD174A42C50B277334670CE48473C02DB8CD2510A44129BEF71CACE5454
7AA55DE76735D3C2DABF6087FDD5E8FC133B2DD91275394D4484ADEC4BAC59EB
E46AB9B9E05293BE52C4F62B962B561A58823EF69A4214C4FEB2030534AE121F
4948A3E665E30DE92169B2A2137C001654C5F4FDA968F5E3AB43146106BA16C4
208830672D20AD334D8E65C072350B7631FDF85A5279043E68FFB9F79FC2A494
450FA69890B5CEDB1722F7BE8786BB57D101BF72E304F58C63824F531003BD23
13F98300D96872083AB3339E847FBB1AF693606A973F6ECD887C3439A1BFEA1C
40DC1A000639CB65DA0111FC6FE18CF177C5483F6CA9A51D8C349E4A2DA9F0AB
91E1B7C12B546D2C872C6E7D580F619F507A890EDAD5FA51C350936D7F3B9B8F
A1023CCE9A9EB6CFC12D49D0516F2A66C8385FFD4E044B499B7C00D39768D01B
BA450E3ED59ECC23EB3A9441011A8F077BB9F4E3902D6E91287D2619D1738C4D
8F8525D0A5F8BFD4415F5CC08C904C571698A55B1E6E87D432EFD5410A97E09B
1FEA0C492C4972CCB8B3A16CD48C6AB35FBA1566028C8B2832C5B59100F46EC7
1F60012385F65C383F5E93FDC1F88CADC6F3AE96768CF4F8BA9DF0E7221C8D16
51E7DB727815C67CA19EB0D01DEA928DEED5437B1F5D913BE75B20CE2BE3E6A2
463C21EABA607D87ECE2FE7BE8621E309746E6E8F87AA9A6DC3FD62563F02936
89FC0AB25D75BB77D16CA7DED1DC59335FF2C1296766F68FDA10F9D3F1C4F6F3
276210017014D73C8D23C0C5C1BB5D0120A2901FDE20861A7EE72069A520676F
B50EB13A90B8B3A88642AABC0D52B351FC459961AF9D1D97FA489C0A2A53EF83
A5F09261AB79B958FA61BB9275A6583AC610B99E61AE9877045248121D2D6481
5B3DC80CDCA36E8756BD547CB359B475E35E9786103EEFC323B9BD46B0FF5880
32F7AC2A7C256CE369EF49B2FC0894955CE20843DDB49AE28A335F12F05D543F
2E624DF842D1B9AFAFE91E5EC5F645F9A49E1D5F4AAB8B39943556064A18AAE0
61CA688D35888CE8426D036F910F2C3098A7D080AAFCF404CDCA0646FFF91D7B
C613CCF208EA64CEB59DE0CE0D66D29CE032DB19628531D6F5FF313C51D00390
776D3AFB3FC32FFB5DE552F32087072C09520C63C75AEF208B1EA919676DF43A
247A9056D639607D09F80E266428746B176221ED83DD9BE8F6F8710BAEB5D723
6F7EE1114C1DA5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 14 /ffi put
dup 18 /grave put
dup 19 /acute put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 83 /S put
dup 84 /T put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 94 /circumflex put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F43F9A1290E91C463895BD12E8A831DAD661EF23CB9AD2C26CFB26
71B72D15270CD8CB1D59CA2D9DEE4B63A8FD2929735CBAADF336DB2088C0BAD9
B79DA00F002B98E0B4790F729DB337A63C1BF138947E9552402C37257019A2AE
6961E7DE6E5472914BBA36D0E9F53FA5771D2801267609C8B8B12A11E0AB6031
E251D1F7D5055B426B1CEEB8B386F92A8661CE6E429DE0B3A612D6CDE03DDBE2
AE36B73CE97C83E306D223CE7774FA5AF973D985C5120978E1A02EC362C66754
4098AE47E5F9E0807326E42BF2869A9A97398E0C20F5F017CA9DB7BAB3BAB101
169D9B8A4E33ED8CE8EC3AD987CE15528ADEA1C2830CE749F731509FB6B90869
5967DE2A007A5F489E6735A959D465B74109BA1843085C27C269C751AB2FECDC
406C8C00B476F321DFBDC8D8B289265FD8D01FF1F9B77F9884F052D1DB422D24
5201FBD6463F31D0EE5A6EB879F4A7F4F8411325854B99C4E856B817708F60F1
91B34F09E5AC07A93715F482700962480808B0FD16D44724C9167C7F909DCEC3
005810B42BD9CA1004460FD1991881327327B9FF56BF0C3959A6E117CFBB2762
D6ECA7E03DF89F823EA9B5E0D111D9EACA2551BF27F03DCEF58B7EAD68370E4A
0A6FDBB0B2380F4F848A93E5E8FC0CC4A1213324D291EE3B32C9523A9F351719
3C0D74C679949CA993DF3E7C73B00C38D798EC4CF0DD9598A9036BF40F425DB9
B23FD634C05EB3F117FAA3CA74F531437822B20B5E3964A175143620EC96B8B4
8C55D6508B4399F2ACA9F8AD9E61024AEBE0F14774B86FFC1920EEF0051FC6E8
FDD8D0FE30359E7B394A3C5F02C672CC09F073DCBAD609E5F336C0BB2DE8EDED
5F9582B2F25B6927E5A6C12109CA189C7A69BEE976DB2E19A8E62E24D640E3C4
CD9E014DFC883A0C2D6C8E0FD8C052055443EBBBDB3F8E98AFD044877F327F23
96E9EDC6587DF29768E6F31EEA0730F3708A79D8098793528F4E6166D1E7CA43
863A7488C3B7F11476BD78B55DC311DF9A7ABBF47B2F3BD799DBA50D3376B6A0
525539EC5E5326ACCEC8630149F61591A6A9CD12066878AC0460C2237B10FF89
AD4A7840F3CA19B140292C931A7C3B45B54758161A9FEA3836EBC1CE122F538C
F82EAA8C0FD1F86BAFC52C182BDCD360E7F7F9FFAD6258F360D2EB37D26EDCE9
FB73885BB9A67B33CB23DFF6429109D38C699BF777EC0C2D3AAD49BD54D42DBD
A9D55A2A8B07D4FA76C34C610742A4BA45E0BAFCB1FB0EC0673A1754429A85CD
87315FB8D7FDC491216EA6C638999108851937EC9B73CC70F084A5A74282463A
1EC66C0FAD7DFCB05E178555E2314470BD7E64EC7884024449D162DDB5D13A00
C702E7F8EE4224A614CD8E237962FA4CBB077034D588E9D1BBB7452469A5D731
72F2D74A5F00BBD814752D07430C7176488FDCEC6652101A1239CAE45EDF0FC2
CE0B2EA020314A0DA3499F99B48F8A92F37DE0C13999210CD4D7694F73F26D67
2A7BE205003048B39423A6BA41034432B5E3928F788771E26972A0A9A78CCDE5
BBCAB3731366C3B74072044D3EF2EBC1CA04916D3A4207219A41D5CC2A3438C3
E95793AEDDDA0BE5ED07EEC117C5E1A1EC8B1C62083EAF8B50E6F3CAB9CE75DE
3FCEBF247BCBB7C1220C5FE36719CC095E9352A0C70AB32EEEAAA896671AB370
E9D774B9BA879BDE951A60E73E67169DC5C01075D4D4F69A23BCC5743AED91C4
0CA75410214868A6A0A7E7D8A3E592077C1337060BF40406475B1A5D33FFD073
28565672AF6426C6193A10106CFA1E69D7EB67F93193FF51431C4FEE372219E7
0DFB37CD2CB53DE2A271A527E204ECE4744556178795A208CB479AA2AF743985
00FB30DEFC9E019A40271A34C8E8467FD1CF9437C2576D409C59C20AE9AC91F4
53EF7BF3B90C59647BF4E9A58163F8D66A425E637DD4790CC8A485CD0B564ADD
5EB00E97B36FBEACA9674C78EA7E21DB0F715751DC7BCE885C8A11EEEC603A37
29EA335ADE4EA4F3692F88F791390A6D5FF227867E916CA7DDA8B461198D7093
1C27705BADFB24D875DFCA10F4DD4657C898C90E3AF385968EFDFF063F8377C9
B75984EFF5A18D077EFA3DD5477EA4AFDB1952CF1E3480229AE080CDAE3FC2B4
FEECC7F8F63FBAE0648833A8A814E5308D46C803F4AAD1A3DFA06621001C51AF
2CA7A39AE581FAA37FEB127855B8849431A43361EC04971756F62C9CE426D3CB
DD07EFAFB9C0229B544099A135980A38968FF9B8159B8157063E02DED30CFBB6
6D5F919D59EF8B0F11669B511000096282DCB872B6BE7EBD89DB74674BFFEDD1
4034A798E2212BCB115345D433ED23F7B0B9A7414BA06EADEADE74333E2CF7CB
11FC10D9D1D72E0B4775A5D1106A23CD4082BF939B0966AD04AEC7392E305AE8
54B71DAEABB1C06B76B6DE56A83FC9AF59940C204A4FCD4FF8BC8E52AF5D5771
BA3529B3C0F4023A8B171591D965F37DFBB76001E331C8C8F03200D42215F7C2
717D78AB30806D6D1078CCAE51207607CF98BC6B93BC55EC5D586D483DA69EAC
914E06ADAE07838F53B0B74DF871F97B7BF5B2D1BA4CE7B7934E61717ABC617A
5DDE6E44FDA014ABD10E01114DD547128F3C4AC1D78D0F9B223B8630E31AADB5
10489625B104144C62A039A19FE053EEF07B076C2055BD26144686AE7F8DC0FC
BC728901E31472076C9D08B2FA8C5C3CE7D4454AAB910E7106534460FB89D5A9
EEAC9EE567783BE1F46F65568772EE6A963AFDAC2BD3CEAC3F500A09579E6497
1310A69422A17124B098EB3BA1B92C35B702D9044A0BCA84A35FF6FDD83B49AF
E87D9E1FB63B8A0E1D813D5A3EC2D3098ED38F4FBCD0BD0ED3B570A13A84B88E
E86EB213587A73E8CF8FF1E99D5CD89EF4C4CC59FA67A4D1A70A605054324946
F637063245823F80D449FF0162A4C8887B6A01EDE4FF851BB9E6ADD81A503AA8
244A27DCA35B61145A30B64A72348628239EA44764166243786E5A03641D8903
DFFA60F6AC177A373A6866F024E0D901D6F4BCC777E98BDEADC5A10312220CEF
2EA845C86965FC0718F6243BA2E58DAC511D9D60E1C1271319AF7120EC53541A
F3B5A5F2B77C23C15CF05D906076A0297ADE74569C15466DCC689DCD8C64D1D3
A285AEB4F9F92D24008CF063784DC90F131762B0FFB2B88609E887073E1F7947
C49168E23A66FDA1F9EDE6A6FCC1F86A83C30EA9BCF8ABEE772BF8AB008463B0
9B4CD634C0F86012C639B7DC98CCAC1F5F15C4473CAEB780D9CD2061F2315FD9
B16E9054EB76D9D9A73EF32FB3E91B3F6536452588BF17DCD7F94E399598AF2A
48C7592AED55B1FD2D5F806889AEACC54237F8E8B833E4F4E4BDF74C53268E9A
0EE74D7396FD02262F4C3DEC1E217E6E8B27F236199CB13EC45CEAFA1B3C3155
C4C2C959FA59D91E88DAC60BA2926295142252EB7800276E7502DC0E9528F0C3
B4FD9077D2E0927A944D71A28A0A614DD9CA64856B58D828ABFF06807AF84BFA
C09975E7CDDC6EDB7C6022BCC5A3A6A9F63FF35814CF5C90AFC57C0E51CA2438
7BD5BD6E18D63CF46DACB27485E7FB5442EBD1557B0BBD1113EABD3FD8510EED
2FC74EE9F5524CEB7EC161CA3A1BBAEA7BCB40149AA583CABB0532B101D2209E
8DE5A251085E473ADD86096E81B39A27E37C9817C22A71EA684C598510BDA00E
CF36C30F76ADEB9299F226E2BB6FDEB9A3CA119B3EAAACB5CB8542AE65A90466
45218ED8538998FAF4591A441E352DA514763EF8A82F56580FCB348EA969DF36
6D3E18232872AF6601AA0C8052945AB35E2376B76E0D41A5501EBA17BF9F087B
3EBD6674B9BED328726AC3A84BDF4771ABB212BE600A5D73F275FD1CD76CA6D0
628C8D78760DEF4C5AD39FA833D128F3FBBBD9947BC5A88BD07D65483486323E
4D83ED493B56433AAA6D12256F20400AC2A617C047117E5E9AFBA708A425BA01
96290B5AD90D2DF38C0CD3BB77BCA871A241163D26843F3F6A4B5F54DC2F30B7
92C83DB0D73105717F24A627503E9EDC623DD02CCE2F1605C662F0DF39AFEBD3
E5A19F9E7ED817808FFFEEC0499FAF425035920F2E361D63064F0FA5D878A7BD
6CAB56139C5E04DC906ADA5253757383F401C518141E6BFEF2A4DA9B146E4272
15C73BEE0267E8BCA10C0CE7297778857D08CA020457279857C5157737E96D85
F74AEDF97465D038F6030E300198B2E5A2740C92FB1B5D8E366A19A3A5EE1FC9
EA581D5EA1D024759FFA8C19B1C180F2CE7EE814B92E55C45CAFA6ED87E41DD3
EE3DED90C3B3F8A39F36447375A5D7DEF679902FF59E3B86054DF5B3FDF83856
56FF575016C30BBD458B7C0326FAFACB3D9E7D3A30CC69378DC72839FBC05AE5
9B0FF4D328DA2BE70941CC7F7628C59D700E23CD325C7853C7D6AC1379F04F93
7F74C73E6F0CB8E06180F90D798B8D2A423CAAAAEE7E5BD3E27A75B2B238EEB4
8C2E7132917526BF98D32BBEB424F86FD4B4DA9F69CBF9DC15B995D2B713131B
118B0D0451FA5C0CF712548B9D164B87B1EA772316DC1952FC3FF1E48BC962D9
5A785F6577C5905C71931B1B43BA4B41C7CA2331D6B04D84EC272A85F97D2358
B1DC13AE97ED80D86B0F6EE380CE610E6D9D198D279C31D6F144292CB4A1A09F
B1D5BB8203E65C3C926737ECE8851C9F31EF1A0C4A3628E3E21DD03035B40215
934C8885DFF3225805D62362DEEF481E7B13984CAFCDA4DEB5D18C990F7524CF
87E6E01B31C305DDD315C7BBDF1DA1BB41D984B4FA0763534ECAF4E8458EDC0A
1A6737F204EA608DF6A2F2E21752D253B17910D86FE4B87FE20A3553378C2166
116DB94044D79059D89E23CD787D5662E9A1DA6F66197345A9B1A1BA4C3ED4CD
B48101452B8EF42B01ABAAB9FCFEBBCA00AE08E9AF4AD111D4C18E31D5F18C6C
DA7F4CFFAF117772A2ACA6CC125D7F774E9D94412FC81F9880AE1C1574AA0015
74F75C6D49FC8452E22E1E40D76EC2270846E041FD1E62443BDD942D88B60C09
0C7E0DC6171904F1BC654E1E32B6D2027DBC2E7158A8E3977CCAB34D1F8E13EE
F75B4DB48011FED26820BFEB327D7D1C04AF95192818E7050EEC16E08782CD2E
DBE34802A551EFD02D72F8A3C3F5176B290F58B69A837E62AD22C2FC8BFED87E
B7B1927352857C491F63BA4CD7178C09C09F2487442F964423F0BEA16A5F3EF9
A928038468D4507CB30D0102F07583824DF64768A51B72FE10A873A1F68065D2
E202047576AE1E5A0BD396811BB73D38E5D2B17E3D287115A6CD9A5B312B0E00
EE01A1F60EE68438FE72715D79C51CCB19DE4531C45713C3E25C570EAD0E9A7E
916162AA297DF173C08149AC973517BF3E57705DC6530A06A465979BD8495950
D2B41F126D652E8CEBE8896C29BBE1AA3F0D0DA3872ED1867EE60FF465D213AB
CD7977C0153BBD218A942466242EEDDACBA8C8BDCB903AE4AE1D23165193D060
63B8F94B4ECFF1C9E4182AEFD907B173C8C8665164F2B6F12934014029BD156C
6EA0B084F1B7FE2C1D081AE687411589474448B26091BF6E065427AA3A0FCD02
12E856AFA0561C7CAFA726B335A8C68414A8EA225E6E2A3A8554E0C7E9294E6C
8027BD86DC239E85DB6810B0E329D37FE046ED842EF863E4C7DF33664066317C
B3AB23C77AF04DD613D4F0B638AB01066CB823952D8B29F4992B600855F59A77
B78DAFEADC95A5E68471BA6227B5F3AC5376F34AC17F297405165B3A2C2AA135
1BCF923F0162E1671CE2154A1A8F488734D9C50D5E23686A27A8D86D357967A4
6BDF568996FDA538F8416F049ED1D9736E5ADBFBE75CDCB296D6586250788713
8BFC23A941CB0B38990B40BE86F4293EF08F2AB9FA19E7A5D6C7B649E8AC0FAE
A8219E96435C79552504A4C1890F07F4CE85ECEF6390615BAAA7A8574DAFB00F
6D993574B31ACA93B2FFA49F2E8A1C78FB36B1DD20ECEB5BC9A3E235D78A9ECE
AC67B498090D55E139340CCAED048DAF43EC75BB5F8D15C2FA58FB039B0008B2
05965DC77FB68C952DFFC2709E0CB4C37C93CE3D6D5AE658D39CE3175A99CA26
F4E2400BDC571296BC8D191D896FDFAC8C07FED81CA10F6B376C6950259C6A31
07F586F277CF8D31BA64A38F3FB6B9F04D43DFB6A2C55E9E343817410C28A607
D5242312ECD94DBD9F5E4173282171CF731ECAD64C722598C0D2C930D6FD7CF9
9DE8152D85ABDC3395252502A24E2F0DE3776C7A82C637712F551F54B51BC0B8
9FADB71186972CF1709F6CBF8C3ECCD5E6F245A2FC4E32CE7D84F39F6475CD78
D6864F7F58DC8A707D7CC222C328E6F5A1ACA730BA1FA90CE83D132403A8E7AC
246DADCB33A41745F7F2B7560D54A4492F22B45B51C48AD2F97DBEDB4F001E13
7A7FE4CC7508EE59D79DBF2B0C24DE5B1B9047B070046537589A5680F91174C3
0DAC8CE06E79EBBFF299A0EF15F9EAA4388BEE75ACCFE32A212F7F6D42C6BCA9
49910B348ABF89710E70A10D637AE6F916C87C5C61B1A2CE0AB98E27ED9AFE63
63776C12349BAA3B70BC67E830A9F057216F75F88484B9712987358BAE3A2BAB
86EC9C891C62B3E43C5B7E5FEDEFD6A9A00F8516DF1B04885BCB8F1D609A4A9B
0C20A272349709960ECFD118E6A75F40CF0070D097199F4F982607C04AC3F534
F81AA7D3510525AD5DBC06286039E75042D55872B8B89E495B270F33773F072C
8B45E667402CED5F3E21277EC7AC87FDA92EEA26D0BE93DD31016005FA9389D0
E188ACE39775B8826B3128460AD283481323F27313E2880F86308C58A5B2B336
901CB808370A4ED5F96C5C99BFAC0B2BABBA7DC9AC074061DF4EAD870578D9B2
7BDF0BE8AD35B52F744FE55EE1A1563DC5028C6A587380280107C2478813F778
1F17706869BE2B881D50D98BD0A9FADEB80C58A810DF15F8A8F4D820724061E1
C5DA18F1702E70280020A05BEF2D048BD62A83D27A94524F2A367673A466E5E1
FDDE74A13933F4F7A13BA9CB11F7B79FD235C7AAA63DEC9140CF2D0CBD42EB7B
100B7369091501DD40C12D94015F251F5AE5AFAD5EA4ECA11D37063BA9925B8B
9ED225D9D69B65380B2D0275C2F2A1475D57FD53B9CFF4C909E73F31000B010F
08B2CCCF2462293399223C7F465EEADFDF4D90CF072EF616D00AA5BE044C299E
464DB74500946437C82AB4F1EF4AD57A937ECEE9754E8B3D745D024FF3E48455
EA9C5A9FBDE1D4C846D75EFC86E012CE198F04921291C3DC502344B81183EE66
3A4997A2086D1883715F67C1959F76FC0484E6DBF318380BDF66544FC063B1E1
F6F7C11707470E0F5DFC1F22D31D878864A0FC5D035C740B6D223105DDB6C872
B46F2A1731CE67969066C5E26656DB63565454082DC69158F908CD6B9C379146
3E093530F9781C6892596EB47D42C6EA34C953389CE5C995D1C1300F21F92D2E
66ADE42BF5143E8983C9CFE316BA79EC74BACF348D78FDBEEFA129C4C73FE0F6
87F820E584E46C93AC0D7859734D3A37CCC3467D3716CC4D78276B6A8896E246
3BF9BE27C7F7BD279809B63D36A3E438F7CA21DCF27C2C0A35C8BE35966F4B8D
A3FB479671E108E3C07A9008D2C6996D220A3B10717B803FC07B3500F1CDF50E
9DE6E8E5E67214BA53ED86276ED1FDD141784D241CAF2F53EBA9E755122C41B7
B75B057EA973653AA8F9D50F76570713978BAFE8DD9E0B1844B1A88F717FC40B
BF655CF2278BAAA120034BBB5050D1D938F67FB4A58803378000F4460052E2F2
D3BEA1A796A2437D2816EA98E2A3F5A9A5AC873E1BC1EE04CAE7CC61F01EFC37
37A640DA4C79DE3A24D93B98D634BBEFBAC8B0C3963EFD46D9ED2B1108DA73DE
B5CF408DA64207F90CE13EE25D8422B5FF3405F89371646D0628656094BDA5C6
08D750DA9BB0E057D7D4BAA1288F6FE160A3556E923B2627AA070445B76D2FEC
479C6E657A4D8874B1CD733A66623F4593447FAA87B7A3B2D63B0F4826F7CC03
1DAB61D45B0809624CEF921C943244265251001DA8B9EF4399665D6174C3C2CC
2528D15C4BFDCC2ACDBE784FD0524B61423A35D234CDBDD401E7D205BFA71BA8
399F4720E2022BAB66C73A506B3B47C45D41C16C87F513F4905606AF9E46B3F1
E56AAEFB3AD1260DE08D6CB7BE22C7258A2CAC07F9F8841F890A079CF9D096F0
A14D656506C0DECF369CF55B9D335E8874356EFAB8BDCAB9354949527D67DBD8
5708D49960F9A3694D85B44C57595F899A4F43E5A44E1773562F4B3818D3F266
32BDD558E643C45A9AA21B1DA5D02E3D147EB52CC7A8AA378094E822B1AEB0CB
4350FE38243D013F942E89811BB191BA3C42ECE2CDCDEE12D3A8E90E061950F2
94A3D231B1CE375077BDDF36A5FDB0544E6BB9E131D165CEE818D84237622BA3
3089DE73B5DF95C7147ED2ABE8130FE7CD26A087E08ADA08ECC03466781CDAF0
7012FD3262B711994EE73F62318FE3039634CEC2B0CB9D004D3C959765E4421D
F75335CEF9B83DBD2201339FF84E6B8C90FE13B5E8BBD77BE1CF459D612F55A0
7B2380D19D2454E3FFC90BEA323FA6A6FD6074344027FE54198A895F0DC3CB29
95CB695680D68A8783AE693BC0F6658FF6F8574931BFACA743481873D75D45B7
63A67ADB7CF9472CF0668A2F6C9BE363DA2E3753ACB779772F1502437E83809E
ECF17FBB63C5B539F1D239185EE1A3796595D6AC0A6048086131098CBA203ED7
8C46E3D17D3DD0759885AD8692ED47BD4D8A673271609AFDC83644676D112210
67E7D7788F33C6C9E5B270A148C827D3510793028722953A7FB92577107D5A2E
F313A3FEA37E1BE6DE01A8C42A7C39E3E84480352E272C2201E615F3A4802935
BF841E9A6B779CB8FEAD090341EFB4C75EB7B3A707A66ACA62E463A172181EE9
8271540AA038D2FD8A7E49BA79709D554A920C160C81F7172D111C3CF49740D5
7FBE7289A62700BC783DAF8B8BBD7EE04AABA81674D364712AF976B83995BE69
3F3EB519C0B920A2E8E944F34624DF2F490E38AD1BEB1F67F59E1011A66BEBE5
F69498D0959EB2164EA872732C4F01853CBB4250C5337DA179CCE54479D455E4
B64C1D4661B278827B991D5E75346D15BD57DD5CC15B8EBAAD48E560EFC12BD9
2C724F674B130FD180E32057EAE7B4D513E06E0E6F6E95497F0945889BF9B43C
0964250C0812522FC5B953F2506D1CDD18FDD03DC81B1786E85F1EF10EBA7EF6
2E386E496F891960C95FB415E29FB464692077EF3B0CB82A66F799A4C50364E7
C4333A8B57BD61BA1F550A692AA9C10B5B649A36CA59623806B838A6F7064449
366143DBB4862DB295672C761216542F852B758893D3AC64682D632C183CED8A
F30CEBAB503DCA03E86D4B37B2C2EE93C6D1CFA891427F32165E0A1F015A4018
3F57E9AE9A019C56575DF772FEA7424C5942F53123CE90CB16F6CD163344FC85
9023E40A09587BDB74BE5191EEEF65B7475B93F681C07B7BDF58C96F28D36E45
716F4A014DDFED04F70C9494FE95CEF5AFF22A3F1F0F260540E5CC73D35EADCE
EFEB6723A1297126BE99B09600A083B8FCE8B73A5A9166CFF78ECF33FA872BA9
A1326D7568B369AB5AF3CA75231422B0D5CF4E9B79BD387AC59047561293AE23
CC6A7C7E77FBFB92189A3B12B6A54097976B8DE4227124312A9D7905B69366E7
7C02D5CAC4C31DFC80EF4B825A5F263430376E06F95812922FC3C03DA83B454D
B989110DAD0F28DE07423C250916636B83C67680B713152270BBDA2EB71AA90A
21D993CD6D8337E50A8320487F0AEA6182C997F677B006B7F863C0B46E9640CA
8E9BE2F1B4765B1F9F55DE69D8A39D38176C9F6C4D14E4EEDD77CC20C2B237FD
084C2105E95EF4BB0FDF3F8622A4784A7F1E3FD4BFE0348FDD7D573A891C023C
D6811DC0D381BF36930D7D05C14481C68B4A8325AA2034F264A013C92A918DB4
3BB4F5907252F9558EA7E4A61F71366BE65762D6A75D053A2CEAA94F5F36CBBF
665DF854DB674F655441FCA8021913BB835051E7FA3090CC6AE09DF1EE7BCA4C
D9D5B3420F6BF3E52243DBCB59C8BD9A9DDD9739EB1FD359FBBA3FB742CB2656
A662315722947BEC536D0D615A5845D6B4639B4940547ECD08C5456FE79582E7
F66E19962A308EE2A72BE2DFF0E5FD0AFAD8FE4194FEB6C80BCAE8647458DC15
B8B5B4616E42CA1A40700A35BD51010B9BE8E08D87BCD699281F5E0964FFFBF5
104AD1DCEBBF9DA551E245D51E0C31BE9F091ED22256930297394095DF414A47
8DADFF7028C8315F06CE159098B91F728679FE8558E6FB1B0432DEAD8E9D4924
4E2DA03A9756DC91262A45535DC3074860D7B13329C6D2A0BC71C15F55C3BA1D
4D7AAC6AC5870D0F7E687CF476828089E75B4CCFFBE58F4A5CE7843CE393E942
D9D8EBC6770A63C5C6144198BCD18B35E64C08C8939632AADF88CEE55CAB82E8
008EE680E1B86872EB3B636790A863006D81237B5E248CA7FD87C5D3F0B72493
E02AFB6B907EC43372A06290D401A3911DDAD0032A2A21188E0FDFF3F9C7D44F
CD2F2A5DCA0054940E4D73E533E4DB6415CD41E82563003F8109ABA6C8D9F1C7
52A1F58E486D331D2D29F128A04085AA9010DC3BE92B6F05F6E94F635797CB31
5064ACC03BADDEF10969C468B747229535305017EB360DAF381A3DAE864A512E
6134A1D0D5762B33DBDA81D39B844FEF1D4F5BEADD60A73E250A59B4D2C5DFC9
48E8E7C8A94015BFB3A003C0775A6B50C5999C36AFE9BE46898262D2BCC82B4D
A8AC92EF2152A0C1F261DCD4AE96E0CFE5DFCE4CFE90BB40E2F47B6BFA15A452
ED040C16F80A348E4529F574AE6C9229D5A6FACEEEB79A55217D1BF59829C6F8
9860AB521A8D757695F8365CF63C6C32433728ECEDDBB5B54D9FEC4F23F53EB7
658E7830F9232F29A2AE07D83068ED8D06A7B2A84FB868C8D6BA17E0CDF947B3
8178A0263AB410720B403789A9115E7591454EC4C982C59A3785B901A0C2BF89
3C058518ACC47093A0310A31E19B37E2722AE3DFAA9327AF82677F16D9D8B9D8
A1FC21E2260EFA3F8CA1F653050B8B3CA44986F06DF615893B8DD5D5A63815D8
F6F31AF8032BA062FC08985F6882DE21E2386C2276017B06DBAF3A22C65EDD81
48D3066813D450803FF234CFA2CD1301D49DCDB7998787F363A7DB086D1F5B95
C86F5CB6D9EF908B469265CB6FBF84B1FCCA73474F754C30908C6C9C317A97E9
3D18712485EC1817FC38DD83A185881B3034D51F2637BCFFD66D790F3538EA80
58206682651E23AF44F736352FD05BD19C229FBD3CA9D230C7F3905DEFE2985E
D37088F9AE080D0416A9CCD7E0E3C385C064AB4E88578A7BCF42602185E8FD24
47DA9106C02DDB6DE99FFD349252DFA95B40F2CDE2F7A7C977FB1E6474AF33B9
AC2499B0CD5B221497C9A94A82F149214C96C5E947D1BD3FE8212F62CF247464
3E4311C833EA22027A12742F4D855B5022A7075C86CD6A8D4C7DE0BF6F64C458
D1E2C5B00B0AB696894403A30B36D4A1334AA294C59313CB5713868372BDA677
1B46C9277E9A542627ECC06858BC6D96D28F9F5CB30019C3F7BE3307CEB13961
C8881453EBAD8524691901A0F5332BD0960776CA6E8C75CCB99EBDE941A69DFE
FAAD01E1BFBC442C8F4696EB98A6838BD6A23D644680C9099BC3723DDA33DE7E
8FC8543936DBE80447B96DD990397C9279ACB26120A498C162C77074578AD0AF
230D407FA792DD72BB3130C6C7E1E02FAACE59D2BBD331FFF6824EDE53B89128
C4367A45BA5E94271D8052CAEC668E2849074240EB9E26FED6979CB39D5AE15E
2672C4493933815CA5E919932C818768AEB668A60B903012F2C53CD90A86BEC0
679EA1C7B3226DD822ED34A6F562F52486030458270D6BC1D9F71BAF31499ABA
0A6264CE26F15E5DA02CA93654B2292E7B1D4D06004BD1F4407097CE9D964CE1
AB5108491343FD68102CFC5A18D5CE9F45A48345DB0DA5DE9E8EBF86B37ED467
5A895F2E1394A596001F64D5F1EC38EAB68FBE02D342D54106DDA6D6A9634334
054E77178385BB753909B8FE5D54F46995E700A8FD31312779FE1858FE394372
6CBBFFEBB9A77D03338A220884F4BF4BDFCD19886D6B2B42BA6F4CCB7F0A3F68
D0F6B91854A3D1CC53B02777C88E54452545C0FBB308774BE336C3E2F9C9C1B5
BF9BDE1ACDA1D699C112D0A8203D2054CE3FBE769411420704444BD30BFBC133
A6208591C00E2467486463D4D4545FC238AA1FC494CDEB7365C878B75A46E38C
C8D4BAF4D534DF2D81E60660A4C808360F878E36F58CCB8D5366673494D9B14C
528C67B3AA3838ECAA65E245E029B05802524500D6D2CCD94CE23DFDA51D40DD
9B3D4713BC01D09FAD4A046DF1679A37D5F57C8429BE61EDCB6AEEC89E31DBE2
7827FC63F61B89C40BA7ECD70447C8D71692552534BE3288A158E0D53341EA80
315265437C2E6D831729EA46D5CC85BF6CCBB0AF18F943609483A6D3B37895B7
56627AA1D1451B010D5D023896C434637FFB992BA0772FB4277E84CD53A230CB
78CAD089800D86F7F66940E9ECD717E5677D166EC61EAFA9E5E6281497FB1492
3347AA7DA43D054551F9B0BA951097DF8767F74ADECF55C7D3D585556E9D7143
C5AAA33FCFA22C0A4A2280338BEE236DE6616AF8E53EEC997C89F71724621B6E
83663609CB6E399545DE9CA77545832ACCD107FCC8129E10E10D3CB4DEB97AB8
4D93539C89909414159B733B7B8BF18A0BA629E5A49306430363EA202692EB18
5761AC3E6362B4B50D6A9E7DBFD4DEC40D0C023481CEECB36B15B62980389AB7
0E1A6159F7DED1F76FFBD97BD2ED93E49521F8E7C1DC0446AB9E60A8627627DC
F316B3D4D71DBB934A956E64DFFE28FF99CFA2E7714537772268A95E7FAAD285
16F9812F2C142C23ABA5896CBD73592EDA26AA443B6B73E80D21B80A6535D64F
0F0DF96EFA2FAF65BF1F45A377143A1FE3D1ED2EECEDC074A1DDB9CDFE5B69D6
7DE946D0A535439F87F21B7C51A4EDD58F4D2EB0BD39424C81354F752837A50E
1C791EBE06A7CD9CC306B87228678D386B5B7C855F4C584AC413F96208B20331
036F3D174F686509D87AD4CF91680D8FA52E6D72A2490AF768D6E81FC1D94000
57452329DF790D924382FDF2AB523648AC9D56EDC544DAE3030DA1AD5F76391A
F6980F89C7D3932A81D2AA17B1FD8F15F906C02428B7EC324B50F63785199A8E
E5C183F9CF9E816E804BE10E81B8781309C4D5E48CB0C6185273978182462E12
67C572A9CD344D94B76F6EDBF7E3E43BBB6020F93BFD4F10BC9F85A5DF7618C9
BB701CC4B47A950297ADA27A7FBBEF54908DCBA64D8CE1BC0D08D744928045E8
AB3A7D29FC38106C108EA38CC14734B38CE86196A88388D59442F86BA788A572
8AAD245FC82317E056F9F1D6ADAB63C2C2C819D0712ED93AE7DDA4D55A6FB086
AE0B60AB0B5097C1C30339B44AA85ADF6C910893EB8E4D44456DB1B2A72CA7C2
19B2AC27A9ECB228CC2699A8AC3D9900BF23003D9409B61B82AC62C2C3ACF6C5
2DC118078F50EEF954FD34358BCEE76586D4E796C8AEE5A7E8DCB0C4A6AD7AE7
BA8D2761637B14F9F79BBDDD793B5B932C5DF92820AC5C8538DC6F9F5E0968B5
6079C71E961C6431B6B4D9EA16A0E4CF0E323B881DF9CC18BBB22463DF96CB6C
269B797225EE41BB3256A89960611721D4F180E3E69D22D66A4FB64617138526
B148E444509E5E7B93EA116646519226BF57B0EBF52A584EA72B3F7CC5B9A2B1
35433C14D769B2F22384C3FF29EE28E6D3A148326DEF5B04ADA6D02D27DEECDC
303A0D8D21BF197B8A969159E6F6EBDE98B8413FE356501A39F3595C6D933E9D
DEEC0376A89281787028479828E53D10FE8871BC9CBA753E97F9BC3BC5D75CEB
E2797B7B465F6EE6BCE9BF5E836F7C6FE02884F4E26CCDC12547C4D4A1F71AD4
0C719D0928D981D633BADC964A3B1BD6683153CE2010333FD668E310E3AD4248
7EF373D6EF63FDBEC88EE16ABA95F97652ED49C8CAC2E0F8E19EDE59F26C6AC6
9302B64FC8F173F8A46D8573D93CD31925A8CFCADBFD9A5D6EDD2EAF30D98940
7D8F58A3E07FD6448FB78C6ECB6460A2273736F11FC8FDA0D73E494ADFBD98B8
F028A2EDF342ACF1761BFCE4C91D7F38CC9CF5612FD39BEB5EEB28486D0E8353
5744E81D08F4C5C9025307C3D28869F73572CA162A9A106EF32B6E5F5DEF70FC
C1C12F09A4508C53729BB51FBACDE42F5FD79A92FB015363E306E73E4A63701D
78B0F1179071685E426B9BC2701B5A22E0069AE510BD205120471F311A600F21
8B3237B3D2CF02DFB0FC278B529CF7C68BA26006530CF75DCB32B79116A9FE0F
72A305E080A027A6A85434553BD84BBB6BDC0168CA1BC7BFA7B0F4ABCB59CB82
F9D85B5D695271F44D090949875BBD89E383EB9972EE057C61C4C9444D45F03F
7F7D016C5B0D13744931993EA67012A66AF4C585A491139B0F0974F2BC90F4AD
8F8A00E390D5F6531755619B2584803632A83E5CA5EB498B46915DF38855B3FE
90793F35BA652FE8CE579F7CADF1C59229A4798B2C6DB598EBF2C9B102F33C71
36DF6E02A6AC87B20E24908B40670D3E6B4E0D69E5992B8CB0EDCBD7BBE2B5F6
43409E50A5E0B120A3B3C18028478751F27E2F679B285FD37332DBB0AF8EB427
0ED068499B817F30C062F5FED508B07086DE7015AB8A4643B1028B9B03EFFBB0
7223D20D5FE61BCA024763BC8CC9983FC00EDA6D0EDB50F5D5E5E6D8DE155B46
F78FE77251CB6D1C9BD797A0D8247F913A9E05F2C888501EBA7BB7F847E0BCDB
137C8AF6AA88A2E8179D104D4E6900BC8E0E63E5CAEA4003A45A0E7FAAE551FD
AB59A514C0986CBDD5BCD0BEEFAEFC1EFFEA449B27CE814D019E83C77EB8201A
45726534D82E97349E5FF57CB865B6A7696D998AFF999CE90302C53E0448C130
54A965B5A6852CB0581C588140D11F7770705F5F82ED27EAF44712F7EAFA2024
B6472395F29193112AE21A88DF2C2C3C305EB370E87E8B82EC91458B15A250EA
B9BB08109C254F5D5ED662CE6C1099420B2F92ADBA6D0CC1B2DBDF8121E343EB
C7210FDD0AC4E3AE97D027300E1B1C6F941BBBA29A0C58FADD84947CA2C8DB81
3B5EC34A69E8FE820C85BB0C8CCD7EBCA549251E0B6C1F8B47D78A1A9CFA89E7
AC0AA4AE712132E8B2E99B9ED9E8D57177596014DB92D5A0D3BC676354E08755
4046099780196CB046A9975B482A9EB5A849494D60EA44F82EC027A2A23BF87A
BB513EBBF4C484061C79FB1E478461E5883FEB434856770048FA569EF38E3E12
8869F75634D3689428D6E1C8B84C1A83FB7A500FC71723597075381962C1E653
90363FA955C2FB446D072C9D29C5FFB4643F22E910C958F8B15EBA11BDE05F32
AD215253457BD91DADEAA25F85002499E4E4810AD3ED72E032892EDACF7FCBB4
45BD63F68D8A655E86AD81910ABC7DB31BF25AA4007E087662A06C9E3A31DDBF
C757DFB59E53117FB9610A21E4FAB3ED9BBE8C4E43300972EA8DC696553320A8
75D9452F8912E8DCF8CBAB83A83D1F943A0D18095931D5330D6E2B626D9EA266
53F1D4D57DB00AF0ABC869E9C1C2CD624BA5EBD15457B65A521CC979E9423BA4
A8839A1BA4E82434D719A61F2B812BBF937880F8A51B77F480EBB9C690D963DC
087DA08A016271E70ED44521C0A91D4F660A93F4302EFD649BFAD92826981B43
D9B8F88AFC29A2D8BF57E47D56B75151137B7F2DFE02B5FB13FA9EEC304830FD
933C73A75DB4C137831A4AFF87AF3AEDC9AA60E066050ED951C31E4975A0E8A6
F462B13BD35EA4267643784F8D1653B163B1B516E0E6484204AE839402DF44BB
FAC0015BC07B63790551EB51739BA686037C578A6A4E5573097BF6B214177A02
7FD1234C62AE9FF177DCA6E7FD4FBE0291C7456A3BE2B9D2AC2614C08BA1277E
C1CBE33F777FCA00C3AC22055F1A9E5859F76336AD141DCDB8C4F5B3A20E4B58
41CB59C74BF489A64FFFC13F319C6291746A5994F4DFFED9AB7D2EE6C25B414F
895915623C49F42D4E9742290DD1BC6F02298129A74434B5A2C6FEA57D50095D
1743FEB9F37F20599DAECAA49D58A56570A437C79D8242F1824290BE8911A00D
EC697002475258D9B94E70A13D1C8148FA3D3AC737E23C734ABB594F181946AA
C998ED9099657B4C3804EC541595740F39CA5C3874ACC13478EA40264692A3E8
41C29EC83A85448C774718F00F97340C53D29BD83CF29B0497F3659102DE678F
9465F2EC7C359EBC929177177B5A40F5F174573EFDABBB2EDBFB4907A68E29A1
6788A06A0321F9884DE391EE2B8B9293DF3AD2119F179AC359C12EAE87110A04
D12CD19CADFF1DC7AD838B2569286B41A3AE293CB8D21353ACB234E23AC7E88E
37AAD91DAA64DE0078B9E64131137BC4A86354F588AFBC7B0CFF3C17A7CE9F94
B7893F3FB4A098D4F25DF02C69DA350E943F31B5B2CE5C5FBA0A56A5EB4AE424
E4210C8CE97BFFB4C5D2C306E8C4527F0B8DD613565C44A5B4C594116A9FDCE0
29ACD62839885EBFD4B68D4B20E4C272480DA21DE54B2CD00CF440DE313E6D0D
9CDBE0CBFF1E44C8AC2FA4EB979A0B3CC3C30E423C5CCCD096AFB0A389F887E1
58C55DB554D79FE927D6BAFC0D44D1BFC08B90AEF65C8663D7B0419FDBC7FEE2
9CACC020FD53BB48F3B0A59A3012B36F7B619C4A471A66868A9F737BB12922FE
3854C5EA8F8410C645F490C846C993136F142945D632D2E831806A9CB957F822
DFAD2CCF6F94A87BC9FD850EA000110E24A731780EF33D834B4DA5B28F23F863
6752DFB0B755398D8FDD8C16E4363F65E8F61F5D1B0D2F37AC65BC7D2FB6B44E
DE8666C8FC791EECC4E921B6694BA3944C9445A02E4E4B9F280F4B6080792819
7592AA7AB18119D6F27494741FE200C9312F8A3EB5EBDA6896D9638EE01E8FF9
45B39C9488338D68AA74977FBBC4654A7B75DB90A457433C8F39655A241DDE04
B24C356EE189F39B09BFA1F9CAADDC2536D777A9B157897B5A8A574E1A9747A7
940750D7B86A8E8A373C7A4464AA667FEBFF9F373158A4BCCF14192F90482ACA
616D6A5F8FBEF5C2E6D8E9FF758680F35EBFFF11370DDDB7CBA236F970EA2C0E
23A1FA5538D45BD524738BC51570B93C1C0291CC6BD6A87629D8B94FDD43D3EA
869635202EB9C09E2ED297530B44AAFB9BFCF08160B70FD341238E7332794113
7391BAFEC19600C30D91A8957D94E40D17E44CB65DC1050536938DEB80D9AB5F
BFE2767BFEDD81932420BCF6D93C4227EED1027787E23EA1AF025B20E9DF9DE5
72867D8C8CC2AD0DE6C4EF25103BBDDAAA0C26CCDDDC8F9DFAB0982A8770FCAF
D4D3F035FC9E6FAE617C637FA83C416213761E2667EA6D7F0513DE65E05B1BDA
20747C6771C4CA92C02BC923AA90CCC3ABFFF9C036CB258BB96102921EBD43A3
C86A4829E61CF14E1E68A23CA1815E6FF728A9B8CD43A5A5A7A301DB5EA631B2
EDB3364DF45D57BB4EF770BC1D35EE949B5A9310AB1C622FDF21C2D4FBA4A5E7
3E8ED5DBBB697DDFB60D9DA87FF4A3E40DB4DA0A65F2F9BAAF636F17EB1D2330
5E9008DAEF77F532F71AA3573DAC909D2B7EC1D3A788992023EF87CE7FCD7645
BC482BA887F1E2B14A63156040DB4001CF27041E477F7ADFA0863D1BDC8A17E2
2CD227BA1E0C6F79ADD428F52CFD7226E4E0FCB63D6F9CA67575E0F94F3243EE
607CC5E8C7B858BBE028696B7A802D641FD1981ACD633B0F417307F03AB06502
F91D28C195B71ABFDA0F4205FEEDF6F482D2C05E8E9672C1EA079F15BDEAC669
4109E34C5D980765AD5A7A08B5F9B272CF070F6EFD32D8583C9658AA3E635079
C2EFA2716C20173BF28D71D6E3C1C44BA90CC67CB4EE9172A85BE3DABA80C59A
924D2F50D331E40B51CD7DCB30FD17AEE27DCE21EB53A7D3A1CF5A3EF7F096C3
9857E900BB9EAD553287F4C3579972CAAA53C7E70EDF6362427AD2D943EDF3C8
5ABEE9D1AB97E27ECC70DAFE4E644BDC54D0FDB62132CFA406F33798B15C6A54
89D90F7B7FD93A0854745E168DF2EC64B6147E8C95A895015FCC568A0F44B121
B089078DF8AA54E689351E4F9400C3F3C3A7426CA6859B3BB6C686C8BB2D238E
4F8C4BE9FA079AD8ACE7387AEEFEE846C043D07AFCA5031CE4BC532C94A71196
A493904D913C7C91D23E3EFC95E8AE507F07756333BAB5C7F32AC8EE857BA429
585520AA1DF52708E0372496CCBB3BD07FB7F1CAC07430A4604858455B82DE9D
694EA155A4C1E9DBCEB1AEB04BAB2CCBCDD03429D2152069CA2BDC9D254D96CB
7C83967B14E9036DD36962D96858EE407D5F9FBCF91FCA0DC74E5D5A9DF8FAFF
4FAB5786BEC7124BEB8ACC755FFC26A22851FA33AE7600E8297294D78A8867F8
5A4AC1386DD924D3A0FDA82C7F05310B905D5A7189E41C3F641286AF8CCF9813
C6B0F8E574DFED37FF866CD0A2B95B30BCF004FAE69DFD3EF7670378B244363D
0FB4B5C75754AC0C36A722C985C76B2775E0B6EF2B732B19F80316F53028F061
F75D3C85807180819F64DE55E673EC385A10BF99773988C04D129539D3EDCD96
27A6C237230317DD0CF4B392191A55E303FB314427A38D5670346853E051FAB8
B2DB93DA7A4FD6258C6DA4AD306078EE80C5983541FC6066DF8B30A1DBD899A3
7928638FBEF93103777264CCE0F8B7750DB35204FBBF925A198B065CEF5AE28C
220DFC63836A063523B6853348C5DA9E47D79EA6120648104ADB70FDEDEC5FBE
DCEC6C46BAFE37C6BB3D540721485EFAC60FDE88A6865CEA43E5996347E40B71
5E954C4DFA1040D48B02818839C3AF1A97BA967EB16D276044D356D8DDD4E57B
BB6B9F8984371A69AFB5C920FE10CE05AAE061A6404F368FC437E3C0DA5E4818
150DCF5B9E8C44EE857F6D331D3A407503BFB7457BC3B6E91AF8A634C50A4361
03576A92FE0FB42502296082BB92DDEA09D33A3F19E63FA4539FE7E51FD1411C
C9025ACD7EF38D289154D43667A313A28A953C19213FDB4070B149C389C8F8D9
4C0F5FFE42C6C6FA93A21C695DD47FF1C20722F2F6346A0335282853D6FC2DFA
5D7199F692B13684E2867B62112C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 16 /dotlessi put
dup 19 /acute put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 67 /C put
dup 69 /E put
dup 94 /circumflex put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE518B2CF2EDE51F81
38244BC64548AC3433A80B86D6A0CA26D77F403C06D65B7394BF1FC7D06D37A5
E70ACD844E3367DE4DB71312CBB85ADD21D5A1F99BB8427F252D90ABB66D7154
EA5AF4A165DF6415A0880AE784071E6B3E2101F0B663DE14DB1ABF8B7CE0E6D9
D24F9CDD9F80028D37C9CB4067A28D41E879AEFECDA71F649EB3C250BFF809D8
1E427E3BF24E85C75F080D93E0314883988B3A4A2B72A1B4A3D2189AB6ECFFBB
C58151AF05AE335200711ED945E18B4BBCE24A8A162BD9BB26137253BA8B5819
41E759A7CA7CBA129BAAD438E87189F2F6AE7C86F4EA099DEB23705A500332A7
4F141D8778EAF3910486B2EA25AAD16B60DD804D0E5BAB0FEBB77BC95EDED08D
B8941E040D99E8F44E70FF842306ACCF65C0AC9673859DB9C3A724238BFD85F8
8B0CC9508AFAB7292EBD17DB0F2BFA908F5E9FE55BD80D0E09A13A99D6D78365
36BA7593CE5543247D66D8891E5DEC2B7C87192EFDA892E8AC1E9B559A63B280
3A6BF70C74D8EFB7456D7BE3B03B555534E16BCE1508E1E63E71F854613EACE4
1E72B21E90E4FDD8D5C66C7FED09C0EB1C4C7E5BA4DBF3A76FA0BFD878003DB5
239B264E11ECDA5AAA7995C6B5A88A56E2CA57CEFF63AA949631957357D9BEB1
BC43CE62EE22EB803532042577D876EFA37E8F848BE29592A1655C0E81363448
8EA46FE556FBFE1DA146613B0053F1C8E849A8639D825281E7F60638DD1E895E
DDD2DD060FC7A4692F30AF3AEF85FE2DEBF250019F736B0BE7A98681A0B0901E
C307EDBFF42D61E898AC06DAB7CECA565B40402A24A133EE4ABC718D9EE90428
9BF1E02E07486E953A0BFE16EE8F7EB0EEC8BEC6DEF1DA58009B6AB0765C4077
DDA615CA9631995A41B2A218E2A4D5413C110EB25E120F82C1873CE359701CF8
21383B320DAC1EFDDB405A25F8F25422A664D3437426444DD0116782F99AF4F8
FB11CF19C879DE4D2B2DEFCC75626861C86A17D1060E32B20EEA97E6F6BC9E3E
93FC4FDDAB7414D018C99B69CEE576F99070AD3FCD9507C2C88B55EAB66F2F17
1363E50DE569199872A70259B3704C4672EA59C1E6CDCFCB3FD920FD6E7AE134
1F526D2B7B73B4066C7640FC0B186B6EA0DF03574519E6223753B16EBBFA032B
74B5E40EEEE9FFD3D758838D024E99406CA18F35989691370BE4E5A880102F6B
3A79B387B62E677AB94C430924932C527FEC90A0764E9027D61CE5938B121E2D
8A7EF6E8F024A221794B75C8B06B4A4BD034E3F92E299E7DFBC1B3A63092BF95
04C30EB78964AF7A2419764710224AAB02BA29CF3FCB4190ED2C48785631B3FB
7EC65FE35BA71D71B119CC7C1B82EE830C395E08BA781E75C506DFE0FA630FE7
21725D8F5B0A803FE6463774DEDFC3928949F19EEE06C1A0E5BE179E38070BE9
D22618FE9C8A973A4F6FD332AB98AB0BD4E30C56F78D26B63043DA04979255F4
6F985FB09548A202F9953D8EA3833BE27127E1C489198821227C1ACB2147ECC4
0BBC6A204C4B3EE9D4F4361F8DF9E1C1ABDBE6936425CD45C0A5A4197BA038AD
B36BFB0B0C55F52670C2F1A54555FFFE67565AB5DF23A7173126592A5AFDBEB9
631776656663828AF4AFADF09D8FCC0254FA1E9BFDF47E63B2FA3D45790646F8
B3F94876E5D8B7D149ADB2FD8E312D719C507DDA1BF0CD988B60730EEC06C030
DC43B2245F9D24D31A31F06EBC65707E17257D80FCCAF634AE7A1DA147781C9E
3B51133134D05296F24FD75054DE0F80400C2F5BC1E1A1E73CD575DFAC6B7AC4
296BCDC0A4FB189935CB6F598D6AD318BE0733B7F829AE1CF3C7E4D224F19182
BA7A3850BE2BE2045D57945A929B2829C45ADDC7371ECADF79963109D29341E9
F25A01C9EFBE0D7F58C0B3B3115AD1BECCADA33D971AD09BB343E49A042A5CFE
976C8A77969E5E744449B55BCABC19CFC0476BB5CDECBDC339A51474C3E0205E
0BBE031E64BA4B2816638DEDBE2B8E7D062FB6828C2739148659E5ECE5F23D71
670847DDC416D861B0E313E938F8200A70F2DF9A1B00BCBF106A9407E6E40D58
2F602E76C38CA97A8F710E3E21B956A4280C835E3165885655762E204A2C2831
84A19CFFA18A8BC89D3BB03B795209242E1F0DE8BD48AD311845FB6A560881F3
0C17EC9B53EE00E59625E51A6CB6A1BB4AAB370E93961FAB3063943AE6DD6A13
EC9392079A91D02F4464E284B21D4A23A2E4D3B9E922D9DA74A2601F71A346B7
9A3B8128443855F1F2F1307DF865EDA84B2DB362DECA0097C31BE0DD1E4A674D
6388C3FCA46DF2F16028A53F490621E9A09BE0C8983418F95B4ED54929821594
89729ACF9368F03D809D8CD288199C53AF6BF8905F11DC81B354C22FAF542CA3
39F661EBCE71F8245BE468032EC787AABDAC78D85C9FEB4606482CB881669147
4B221905B483955996FE4B4EF9B8FA63EC4708372035587816D0F9939532AB2C
56AD07DD86E76B41187A3CDC0B109095DB0AD8D5B7D7BCDE8DD27EA9D127277A
74499302C274FDFE524FA29B33A57BA62D79E2F1D42FFB8C7D30FD9F83FC9916
38FFF960D053E6405148F8D4DB4AEF7EC43F479E11AE78A6D40CF7C7D8E43344
6BF622402E174C0FEF0F7C3B2197FC45847C68E5A07DCCD93AB69FB5561EC708
C78DAF0D4357078356869638DBB4BD729A2F49DCCD25430D1C82CF42424443CC
E2650B0A2A7F4B35C9FA52E807631756B1FB6FD70378E807F9874C8D167AED55
C7E612A6F9F1DA79B8F48501919F9E92B8362667134F543BF9748641D64C8962
2445F618CFECDC45A829D43565D0AE48C1436367E1D7AE74E88EB7542032C93C
D486D302BC98DC56AE15EE110AB03B0C896B055203113D1DE4008F2EA88D5EFC
B52F80F26F774B2AF8FEF3D8C44CBEE0BCD2FE4DC35FA945B1897C5F506EB55C
05165D702B925B0F0F5F96BB461A009DF7C2666D5ECBABF28AD303E24F3DE486
7700CB40CEBD58829032D43AE131CAC753E473E21EB8BE0F8D0822C688593FD6
1E5A0DC9F053379F2AF6D3FC317F559AD10CCE564DE99C447C35DFD638179E3B
8DDD32A240FD49AE67074AAA0B9D0D4A3BE0118F08AE39ACE131382E4E32D290
F9BC8FAA001D8F9BE2D660F139C783CA02522966CE9198B9111670AEC7F4DE34
49B0C321074BCF71906D3F56E6CF780B37CE39F605793D904FA4650A8ADA567A
2F0F53E5FEDB788C961BC74FFAE2E26DC36DA04C0E4462B0652A6345C6EC73BA
D3FDC58F793DBFB1F961A69760E1BAD56217EDBCA7B748DC671606B6B6898E1F
E87D3C69585FC08900248C7EE5D467584BB6A567C64C7E0D4B4418028BB5F032
8AAD2E574E03D11C268D9E582F50A4280C835E316588A64A0B14D9A6F44932CB
1B2A15725F6C5B800AF66B44344F1DF681219626C2C7A245F21FEE063BF60EC4
8E6A840D21EF4234332546281F12E3E1D134A37873BA75096830FB6A44FBDC64
C97D8B38A3CE8A943EB45532A46FC6B56210E22B6DC1FE6314962FC9E79FE2F0
5C1086C688E2861CC763A1E8C9449765D9365C84544DBD5E4764C025919E771E
C78038D8521F88EF15FCA2660096EAB8417CE87A31ED58701F8199A3DFA579D7
5E01BFF9879441A81CCC955833B6840CE144F2574335EB3575F45F4F9694C976
E71D9214BE0875849A350845815873ED11532BF7A8082C5D91442EA149BFD963
37862AEF4958226E38B0F14816AF6B4F828BCD2C293547D59659553E600F7621
FB3F3EA68BB90DB01D0AE75C2CC60A81EF39227592E2AB7FD21343C698B09C6E
C91E83583ED5309109D14CABE93EB036D870E8C97AD072610E2E9BC662F932D9
ACE5DB84087BAFCDD58BE7959A6061F9B018572D87918C58B285142CB8F8E07F
10107E2EE4A6C1FAAD37018CCA129AB4E8856CCDF19D7354811A66188931ADE3
80DE869F5A752283D986025E0DB49E8B34F3CD63BAAC8AE92748BCE9B7542BD7
7F11C96DCBE0B1BCF2F8CE445146EAEE22179296E3E09612F99B10D4ADDB9CF6
A789B8C961EF7DC3C209C66B57B70DDF307BED77A4DDF7C765C1C489162C7FA8
95DCCBD8DBCDE6305C7F2F5C3224BB55C328A889DCB841FFEFCB7871AC35E050
127A196D935D026ED529CB8D1D5055AFF16EABC57AF87BBE362F8DDB79A024B5
5128BBC08D467795EB79921F1C716A05EBA4E5DDBBF5ADB1AD753CE43C0180DC
ED45CE9843E3A825E24C680726FF7B5D07A202A2CC8F47A71C2068560CBE42AD
4D6B58AD16073794C893793F0FA96F13F0E8ED98C5C0A8F2BB1C98BFD5FA6C72
7B91E29A1EF524B07F1966C23CDA634ADC0EC8568E913A2E11513847E6D1B737
A66A0E8B019EB2D36B4D101B1C5FF57716E359511F0645156E27087022BA5240
60D7266CB64CA9C96CC62355528C5A87D8D002CABEB08043E630BAEFE986D1A7
1187A40F5776781F3ACE64C79A5B04093E236398EC5F7F6CFBB31E8055D55C6E
414D71365FF79C70AD00648696FA0EDB5D69B4BAC2D3BB22E97E294158F90282
27F1AB633EBFF91799DDC748CE06CD10186C978D942161A04F0B90F977F0DCA0
8285486821761AEA36B8B114A348E348C8D7AF60048C310F6D7F2A623DA41AFB
80699BF5D6697BB18A6AB9F471994A5ACFC195FA6A64E1507447C3C45CA62BB4
577E37A13BD08D044EF5A4331336066525F8178343B343CD97E05A950B249D36
BE4605ED9D1E7F8FC3DA3D488A47DA23D1D8794F4531150F957396B5DCB1F54A
72D381C0C6EDB9C82EFA63016010083BC81C04A7C2E4221D3C45A787384BB9A8
8F530581BC009425C1D06D0195E87723AEFDB8C6BB6003B507EF973F222CB0EA
F5D25FA4ED33D7E2055320E354EE14A52E72AD3B6021E43FA4E70196AEC3CE35
AF8A5AEDB7CE6007E6E5209DB77C4DBD2E4AF94128DEDE73E823AAF27BC3CB85
C7988C7A2CD77B00A910B4BEF78ABC9266C721DCA28E45B2DAE8FC575A76AFB1
B86048F2E60AF0A8CC4E48842D9A5213F80AAB8FDA2AD6273AAC6C06BE5F94FC
2ACEDE9332DC0494D8EBB1DA869182CA017B87E2AEC23ADF1096031DF28F0C22
1D5A6CDBF29F094C6BB9840C8E6E437E5572FD2415F31D71F2D7A401832F1F23
46BB186B6660CB7D2D2768DD3B1A04B78327D59CEDF49C51A99E4EB58E642DB1
FDC200DBA3560C7343D0807085D7A0EC66335F64C57ED589C5662632C6DA8C60
5C5F7B83DF6D3DF2EFCD713C94A35716FA8B3DB3994928B505CF6017840FA777
AB9F7428E81CC9CC88B294150568852E6F5E4A4B898478E89AE8022FE1407B4D
DCAB71E994E76141926785745EBD7B916625E2F61F5BE4914EA1D622D16DACFF
524CD6D8E2AF00EC7A2A66491156F8FAF278C2418DA1D591F8A62CA3701740C7
C634891E6E498BB971C369EBA550DC7E7A973AF0553B22E09B4746AC567F7E38
DE3CB6782C2377C34A2F09235E984FFAA36AB0C45E150A297F71C385EEFB7C9A
91C6DB978969B00D970E37693EC436D99A531742E629EB162154A7D07DDA3BFB
7599B02E5AB2CE8530BC6B6F486FE38E02B1F68DEB052B1E9B2F70F3EBA30992
828F154877900DF34C2BD1E2EF0121EE7D541A003BAF97D192A47FEA0BB847CF
81E7F6CE421E1224599E42919FC3336156F457BE72BFF46D2C5EB155973F63AB
EBC770FA695185564093CCD99B2F41803ADD8242F4E08E5DA8F5B99F681402C6
6C0A357F1712531A81B01DC67F2B3C87549642D47992413B4D7D1E766B144DFF
EEC4637A7131C909830B2E27AF609B2E889D884CD5DCC7512EC7DE1B74422B97
A9748E105D93BF3127DC527A7326B78301AFE85FA55513504AC808E3BDEED1CA
B83CDF8E334F48C49BE7F9488C7F740A948568C70165E7F3BFA736E251249871
6E2633A5BF190D94F2529211136C2F75E8DB7B2EDBE69216489B8DEC915FA281
EE42582C1073C1CFB585082AAA7C670F3C5512DA3C4CECBE7FFB21E4905B3499
5CCB2CECC71780F453FE60FAC91CBFA33D9714575EA47807DCE578EF8FF9CC47
6273415784248E9B70F5C8AF2659C6E6DCE62C1CB47D633244F16B2C560F76D4
012FE46EFC846CC6DD11620CC45676FB3DCAC1EBE720B818965CC93A7F997283
1A5AD5DB1D3AB0165FEF1F5513C2CFD0CF227D8166DB30FF89E6438BD6548A7C
60AC3546CBD85E3391BAB2EB4EFF0F93FE5DBA61D8F2C633389BB8B49629F2F7
C5AC7FB06D566F79830C28A79DE6B7B84AF75B80071B501E4B35BD742FBD74A6
36D4F79E0EB2849011F225EC5C113BAC3CE7E8AA1D6AC696F5F2B7907618E901
5C1110871E516C7099AC533BA6A8DFDB231C50ACCAE4481985B9998E473B9C19
4AE4942C737A9BC151FAEF6DF82D8219EAACE80AE04246D03276FD13ECB3AC21
9B541E4EA2C20AE837E6A4F358F534A26BC7E21C84D8C6B9CAB13BBC139E24DC
B467A68446CB17B69B3097EF14D89B3BA5B9597B83FB5D0A097A52661F2B2ADC
EE36FA342925F536BAD7EACADF5E4CE5785EE7CAFBCD2BC1443FE833F7573F45
A0B7794D6E4DE6AB2E1826819051068013277C848FCB8311D00A84D7FF72CA32
03EADC924AA4431E20C91776305510FD28B9762CB89862156B155EFDFAEC2CA3
9FA226D146F0D072735065EE1E3C103B8BE1E617C6F5DEEE483B14BAF3B0026C
B936AC0B2C9EF2CB6C926AC4B57C4F37915A1EBCF0CB576BBD310AAC647E6556
EFC25B44DAB2372C28C26317C933E95EF7A729597F4906DE1C0101A838E938BD
C77E3DC80AC0FF2F89242D5A46161954959D773A86D0A89DBB58EB82CB7FD595
C0D51728ACFD5D17F90D96BA27461C69487583569ADD2024C34E63A373137689
5E994FD1485BB8225A3BFB930F9EE3375463A11A1C5B6FF39824D054F42F158A
FFE37500D679887FEF88FAC7B31ADAB754ADCA3C2089FC35B1F3041C72753698
40471F2E852AAAAC4198F51C945C862F951BEA6FE2B1C2C65DFB1505B03EB9D6
96993D8F0E2EE67CFB3B842B209A2CFAAAD6842B75A92815CCEB3010D0B6FE06
C1AA47FCDF889BA35A8DBE4B358BC0960D1A1078708A76D32D112512E43C0CB8
7CB41290EF5AC000627A21C0CF833394135D9DB4514D9C5DD3FD93466C4AFD4C
ADDD7EB9521480C3D4474EE59D3B85B66BFC2FFD0BE04684BED284D6E5D5E124
9E5458A8086C724CD682DC94D41E6EECE2FCFF4B4F9788E4D0AC9C7E66650385
E5C6147DB35D1A9E91D62F8D5D11FB2CDE2FAB38E66CC5BB0512CA09CBF7A673
0DFE6BAA9FA9F093F1B8E5E92B81B0B74941E593F6D5D048B012940EA4250F57
DC7B924E7341208DDB916A4ACDA921E7E96B28B5BBDC681869618157477B2353
3EE46D5C8CA3C4D51B9CE348D810A3E22CBBCDCC692FF53B22CEB138964E26BE
A70085118F986AF7F512B4499DB51908B2CE560657EDF158D8352B44BA344986
E1562D3ECDABC169C0EA4035D6720DAC6106F45A1825413311CD847F2ADEE08A
CB1CA6524557DEE3400F3C3014F6114DD7E6D9BC5092ACB9112512CEEF76B5C4
5A165BA9EF4346C9E7E4EB285D5C883BA415124EFC22A818E654B58C3EF4578B
F4618873EE621F01283F45AF32E3BD8A6713C9144BC7AEE8E1F47FA3EFE59BF9
799F68DDED9A4C77FA293DAACED4E677B01584254A66CD5DBD65DFC921C333F6
1AE266539C84DC7C2404ABCA5643E31B96B617AE5860ED27CECBE112A369C228
E471FD40DCA3DCE14996934912F40CDC39DA8616F724D691AB415E59847A9A32
6BA02821985F6623802C0ABD5F932CB245D08940CAF49CC4EA2EB1C0C9FCFF17
7757210C5C7D90C3E909C1A77C5AA264B62992C061A695810923C1F29EB0F95C
1FFCF8549ECA099EFAC8828C25C7DDFB5539709F3DB94D5935BF91A34C380749
E942A04A66768298C772F4E37650E9CE3BD5BD4C84875700B28F523A4F9E4F31
95762166F9DC7348A153E820006589E88A011F0884811BC315302ABEBC45E8F2
14EF0567AE2FFE4E15DC4FB16C89E46E895EC6700F4282A79A465D35A1A4F524
6AF48637BA6DFB091FD9B48709CBCAECB3B585B4D09B269429DE405B930FC1F2
423ECB24E35B44C2704AD7C7117B85AA28EEAC26773905E884BB2DA23EABB3A6
9C40C38EA328E829C3D893645DAA74192590A0ECCB00FBA7C67A45DB9A7A4C03
CFF930466D4639F307B12F6AEB64C52B6FE827AB68FC8E5EF5DB1FB2553C8516
D4690D3E028BBFCA3777182A7AD1131C498E690B5DE0D85B3640513D10CBAB51
FC213719FFCEEC7C7C52D149C9CF5B0F218434EB9B578E5FCD9D5B6EBE5A3018
768627C5B45DAB39B2B7A0E711139ECFCF1569BB013D39B60CA34F0C7C1BA7E2
5FC8C002A4BD8BF46F027566BCC9483F8D2B30627ABA5E5E96C4B7991651928C
1DBE8EB7A94AC1A632088B7A1E55826B7A40132221A4E7BD2E90AE53C05A356C
CF29ADE5DCBECDECC492462F110F273E9D076E97E21200BF4D1D73FD13EAA883
F2209B10DC970D760FE0BB701086F468841CC07E254F36DC12A9D41963F107EC
0B02856CB91B9B2236C7BA2497AA54986460808669D1BD17B857B4A4F3CAC294
23E76D707833B1EBD9EE7E7871F622A369F1995D6107F53949926228D3B742EC
AFD115476A052D12D619BAE57183ED74ADC7A550AAB5C1E6EBEC149F0181E300
52091F183DC7AD084DF1C9C96B7D0392D6CBEA133F05F69F796908E9348CED43
7350F89A756095C49D9529F570BD0220440F77832E3B39CFB6EE139AFC6AF6A5
57F5A1E5B80AD2D168F0A18EE79FBD4D67E7E42C62D42F0AD0D3A52D52F596C6
A911FB58BD670DF4AA1D19B43701B4660572AB973DE509C73DF43D4AC8B41CCE
391D1E7B5F003CEE27FFF5CA10E6D625B1FB97BF0BA7A0F84A2D1FF48F67CA5D
8CDFDF72A27BE3152EA93CA5E807F80E96F7B3E715BFBA2B808E001F894A6DB5
4D56563ECED126BB4641DB8A39CD8E635ACE109A78F7589F9DDE262DCA289C54
BB4E65E74124A50A4449A5A1804EF2970ABF46AD405B1E7D920968585E877446
8BC84D566167535A00761BCC95F86EB0E0B3451239AD586006406AE23702E6CF
793A0178376B9DE0A5CC27C57341AF249EFEF0C27A27B66A6A4285A6890F09FA
AB395E693FCCC2B56741F1C32CB8F4DA1C7A9CF9663C6AA04FCBDA1D94D1C636
465DBF01AF736A6476A100CC837CC9BCD1E4E3EFADC5581D6624D70FC1522CC9
A27CFEF88B70934DBEA5F735113688BE447D44608351F5AADC9142909A343BD5
ABEADCD0B2E4261162F23ECE19F98D266939B68D3D7EA4280488E240B712D429
B7CBE902B0CFB4F5C7179B0171D246599D645E43674F8D4C6B2932B8BDA0C415
7DD1EA38AF6D9C2B142642C01D3B946031A1ED8878ECBA9D14901716219CCA82
E41034BB49E21DCE00944B0401D1C63EF8A5E17D15CFB90E7BB3535EF1DB49E5
4EB5BFBB852DAA73E90C07D2941CAEB99807DBEF4DCF524A9D70C01C4C0F21A5
99CAA8EE1F143112B29C20626C3343C027D42639D1F0DC3F83FD107FFF76F077
95B56106E6DF567D80FA17317EAD4F027D5DE074012FA8CF4EB1D7E40D704CD4
D8F285206FA32161966F5E068579540B750E7302E6C28D2D24E812F3552B1F2F
CA067AAF466E863A6C52DDB2F65DC74A3144AE32A85D05002DECC57C16505A8D
F7F307E7148C827AF012501076D96ADB8963FD5EBF6060F02AD214AB05C29F13
E5B57CAE7ED49CB39EFA7A1B2A280AD80EBDB70DF95A37121E9F6919EE09931C
3AB9DBDF1A53E81705FC3FE84A3DDDEAE65A7FA9E16729FFAB95427B2574CFC6
9269FDA0020A06BE8ACE617FBE44D384888716F64F6D77E0905F88DAD255D7D4
4BCCC9F3C4E32DC29B5D78B512247EAC1DB092F30A976BF6A9B70D9441A6413C
E41CB968BC545241BE306A1E58FC386DC4ED8F231559DBD1FB713EC654B6AFAC
6B8878ED46DD771178DACF446BA031FB78F74D3EF04D39C346D1D3F419E3BFE4
B84FF8EF1399416F5FE2DF229D96301698E55DED296E192CCF801BB6B22366D6
55828A63E292AEAEECF94B4A1B8690C192A694CB2C63A18B479BBEEFA977C071
637BBF3B96384102B6CC8D63F46388416F4E74B47212851D6096B2AFED27D4BE
51ACD02ADB52644FE51C058F6064E3A062AA2A8D9F6F41B14A47B2E8B613885B
39B1DF92193FE610D94216326C0530D058A7056ABB8AA21A63ECE211BC5BDDFC
5815D33E1CC20D840B5186EA3AC75F3F2E1190F8E5E05ABA4421C8411E18949B
5D774A6B8041F9BEDC2BF84FB47B4854C11EBFE509F21328A9AF76E0ABB5432C
BE8427BC009EFF80F5F95FBC5DD33965BDEED89E54698EB07153AE8D42293545
F332E14DF1ABD570B7393C5591356E5458B38ADEF8B7475231CF02A4F8320102
226A18F1C2201EEE547A205217F3951BD66354C754795F8FC90D0C85F9224ECD
9CB476CFB5096833BBAC8117BEB32017EEF4A1A4C5F7C81A0FFB33D32294A466
6AD3B8D89357D8865E6E0981C1A4CED7516FCD3E171575223C7A3F4D7E638E2E
DEFBB076A3C4688B01FEA74EFD67D320EDBB86636E96321F4E9ABF1D30FEF287
D7C77CEDA8A70B0FBE8D3728BA82B29002D6452CC6D7DE140AC7B3B9C22876FC
5480BCEC67040C1FC18C836ABA4913F1F2953FEC324CFB73D7336D181A755D9D
63F8BEF266D9F57150581BCDC2A4BD9560950C1D883F05E43436762FA78BDBBA
CADB93AB4879C3FBE656C8EBC275B62FF240AF4F6451FD82C53007C5E34030AE
7417419C593820FBBDE482E3160E3A68C5B2F150D6FA3A25A2FC9D1EE2A9941C
5A76E8488EDD6DCDED2BE5F57ED9AF2FBC6395EE012425986B3121094D360274
0F4EB30BB7C2706F7C587AB80BA0860D0088F144134D537E2B4B61D7CF5FBA96
37F326336011A67F9CE918983E9D39209180835EB56942E2B268844858613C8D
580285B5202019AF95C7298988FAA688243DDDC32E72A1B32B67FF876E6CC5DC
AA16A2C064F741E307CD3C27A3F0588395ABB3FA58F38BC773B9290EF43B5FB1
B728433FFFFF1C30B9478B78E595F98D3023BD8E537C1A6695DA73DA41E3C422
591380B86E210FE5B6E16BF3EEB0518C20252DC2BCAC2673BD57BD72F87C5DD4
02EFFDF1C1E38FCCF3004471E68B961C7A4F6B0B1F3C45694C25CAA0076B61AF
92B0C365CF6B405172A1CC99945F118E046DFC0B5CB217C0F39549883DEDC10D
21D2B54C4B50DF92B5337C2065360B4FDDC6BA39EC5C132917670669F78CC6D2
87F2AA2CE71D800AC89CCE5D77BA03AE6280424343379542B14FE3DEA12F1B17
5D130E4B923042257614439F4DB1D4A4EB350DF17B8CA7A795DE4E68439B79B3
91849ACA3C2616C520DFBE3344A8E051F0543D7CC20C504A791E7CBBF06610DC
BA00EE6B90179C97573A8C223287B06288A127071153EA730378B19795DB68D4
8E977287047516F11ECBF31BCDC9E8700F88322742BE780E7BA6718D07FD5070
D1AD2374E3D1BCD407234F91BA63A7C8F1B49686D2C0C1561985DE9A32ACA5C3
44138D0AEC5C6735A9F29AB1A301C63FE92DBF04BE90A82404627B050FECAFAD
6B556B2550EFC1CCD012C5965DED92931A78DE809038CCCDC8A7745849AF741A
E48D220A7266B1645E4E7553FA9FF6C861FC0253CC40B5A60A15B01149AFDAC3
0C51E62EEC93363E0194BA57AC99A4A73BABAF27C9DCAE230B27866E03E4830E
1889B9AF7D5D54CDF304474D34149FB48F41BC5B1CFA59C2EDFA28BDD0354F77
79B0F171D68FC6D04C0A23F11BE3A3F19CEBC8BA1768E5BCB8C25C9DDA89A661
FDBD71DA939E24F3BF5B14A71F4C6683D4AA1300AF8D9BECC4FBE9E8D6017EF3
931388D1E8F440F9DDEB581A694BA4F3123CA4185A455C6B0BEA9B797433684A
33B7ABD403989A0E37CB3C48CE5D8B0341FE69A7FA64A572DD6C296A95CABB73
50582A24935E5AD9C567A9B82733C1A8034AA4E25CA571E1E2051E0DB4867543
D0D9FFBFF23EE57CC74CB50D6B40E1A0D35AA7B3412239BEC8EA9410C6FB21C8
FF338B13EB2F19DAAC1D0D2AC0EDC2E3860D5C251C3C6B0849724791F1DBCFF1
0FB296BC8EB941ADC6ED8E97F850FD5E783538FE7F8537FFD7B8B1236A8DEA44
D545DC4FB06DA6EE59F6FF86C6251ABFD3F1E092BF6BDA1135861D5156
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 45 /hyphen put
dup 49 /one put
dup 70 /F put
dup 86 /V put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD6DBD2817CD57D7CCC2FAE2B14257C7214981A0678BB213832B04A68AB3631
8B23CA966781ABFCBD46714EEDB6F54568E2E17613658D4F62AAE1B2B4732FA8
F3F9BB87D30D771D591B8E7F59EC319B3C80C7DDB03B26C4A34300BFECE03FD2
8732CB57F2E95555F4EBC6F97D187D7F7BF406499A2B12B953D0AE1984D78EF2
399E862A24DD788C8C23E5A620F4FD4BDD641715A50B543CA1C4DBC2B2F72F6D
19FA0C4EFE4E73FE9669F35AADCBCF96948C6A0F57223555F70B4116FEBF8041
0BD4880F03360F1941FAC5C1D667DE026D09B02CDF8A42372C1A9AD0DEA73BFA
041447E2E3083C182AD6142C6E860B7C83C12D395863DB30452EFDE8E60CB237
44D9EDCCF47DC58B8D9F6171854B27E61664C83BEEA0958198AE0AE0E053D99B
A95DD281AAA4E0464F52F3A71C5F9D6A9FC83BBF42B2380FB78DC8BF95B7AE63
A1094483E6420789EFD2C03414A47813C05E910B32BB1ED5FC5B17C0B6D32300
2B6A43A976C153F06A3F69018B39B05462124E6F6B2A2D6B23B8DC9511A53D77
87B5C0E202F3F065C9C26693B8270723603F09913E7E1549A3C75D330D3CF053
11ACC6944367F1C23863E8B38EDFFBED541B25778E6648CC0D1B54E47D44B89A
CC5D3299E69363C59A384B41DE3CC9378E2BC13F02E56042DD6F9C2662899037
1B70D71E5ADF19BD7473C9E0EFD2EA92C6E2C7D2109AE2CE10EBEEA25E1B6EC2
FFE1C62B505F0E46A5F5332E51C1DD027DDC07EA75C4487499838FBD0372DA9A
02CD7F03048A555F43E894FD4FEFFBB06E75341ED3DA1B9E1DF535AFE18D9DF2
683883A78E0F9022F14CF10143992CAE2B8BB0935231D8A32A4A27891511E4D7
F10706C80B42BB37173A47A6D20BD15999D1D233C9B05AEF726CE0F92779E3CF
B2F08168835BA521169210AA5471EA446F4F2EC977638FA1BCC7A5E8609AAAFB
BF981046B8418A34DBD660AEC43E4C9FE96B85D2C8B287522BCF9A12C8DD81BA
D3C724B696BBC677CD99076121B8F2D1E7EE3376A7BEF20CDDF9C516F37B7ED8
37E5C30FE08325E64D5510B2F14726776220CCEB8A02F985B66FC5BD77977A90
8E45E69155179A3E54907D929602161C8FA3B0A8A5BE4E34BB30FC07D8FB8FB4
FB4A371D98ACEB8B447CAE116364CA7D99620CD1AC2F23B23CE9FE064EE1001F
D12E10877FA7056B52CE094D5B7DBB3690AF5460CF135971EA46C1B52730FCE6
048D8F1F22536B9E84F893287260F26EC3F53E185CE0E8C81030868B94CCD51D
AC3B2E2E7DDD716D0A48436FA46385475162A287B6CF2B84C98D2D210BF63DA7
8AB78B2D167D4DC9D377B23E5341C85C86F5C4C179526E774831AFFA38562777
39A076FD7F19685881782ACBA6BCA69E1DEAFE58F20774B23EC9A08A0BAE8904
A5571242C80A621075F831D1DF4A6F9B55F49E0BE60881FB340631A41136A81D
C1D4DFF07ED82935F01DCD651908E6AC423D2E4D8F0772EC1A5D5EE659DB6F08
19B3B9C785DDB14B1E262651BA298DF1303E7BB1C4DCD73ABEEC698225F52BB7
2DE2D9DCE9EEF96F30FFBB66AA05736C0E5EF74A8363F457EEDD9332A002D896
BB6545F84C860751AD22A9D2D4E93D92E074EB9D4ED6831DDF22D65AAAB1278B
CA10C52E35ED4BD779900A41569307205624DF74D532BBC6FE1077624D94A6B8
8C30383DB1FCBEAAB136A0999622D5DBE8473260C17D62BDC798C06F27D67A5E
4FCF8A4CDFA9BFB131946B032E18EC7899BAB6570FE78428A59166457C029D5E
16C51D098FAD44F5D6C204FBD50ECA1800A014D28B95A07EE245D0574945D58C
DB65ABB94A8D5FDF29913F71CE00AABF37F34316C368C840549B6676041DB65C
36127A9C01436F8AC24DB8F3751E4F3353CCE2EF17AAC04460AB78D130022F43
1C912881AB483701A83E89175C5D371D717777D25FD02F38109C392A8D45CB5E
6348ED4EE23B0EA943747A9CB3C0919B0169964DFCD771D098F0DC66D0F211D1
49011F5918CC7BFBE7CD883FF82805C4C322679D3E624B153C615CA11E91353D
AFD236FDD824E7C7B85A87A421B3E8CF09D97BF19C3C8F76F0C6D33E69E9123E
379A3C83127D54B22D5EC8918072EC9CF07CCF79A9479ABD3593F7B30DA62B40
88606230770301D34B0E0C286ACA142BFA834280E8DACBC007AA81F49472798A
51AFBC39C4D452262E95C031F2AF87135B8536EAD7EFF11244C89EF87FC084F6
8DDE5EBD3AD21884C84EAC477C6E5F786DF30E07BF91C69F30DF95AEBED83CBE
EB2C4F7396DBABE56FDAD4E17ECF1ED5E7F5CF91513FFC1BE3CCC2D50CE204A0
37E058272F2F4C8C8AA3AB7F9AC9A7D95899D162A70D0F9660BEB092F589B6D9
25B82EFA77871E4D1CB30435B79E38E899CA6473F24491F4D4F851A3560973AD
EC51A35990299D13923F255A23E86A87AF6899D8E865D4CC7A5C1B867C126EE7
EC83B12066B6EB7B8B8C0DC0454D1FE0D6A5E9066441A78580A1A9E68EA69FCB
2F0B6088263F3F2315C4D16861A8A8097BBDF33BFFAFB026E56D9FCAE59EB804
53748CCBC35F70AFF78DC4A67EDFA10C2BBF5722D076983638408C5D99793836
60BA8D55971C6CFA193F6F8D6CA99E571587A34D317E614F2BB18FA8D92437E4
2892EA11A03F7EBCF7C2C0A08EC62E353CA1905F7D00E39706A9C96CDCCB9937
23AB025E25474A9F8C78282AE6BBD2849285B3ADA06D51B44B071BC7567B8BC3
0213466037A96C95AC701F83114ACBE38B359B90EB61F02A8A721268A285D916
EF85DB6346E34F04E54F86AD4A09926FC0801378CC151C6520958567789093BB
4310165A42CBE3FA535B834657C2AE1A34F0B37851F0FD958F33A94DA4D33234
7B4CC997E31F1B1D17D7B63DEE627B0E575DAC7A03243CD3ED8CB028092E7C97
0A8537EE62F512CFC1D56CFC5917348976BC74C8B6A3C2CF0DF11BBF252484D1
BA9B16595ECC2907831B03F93C6B8320362C10E5B2E98EA8C7056D865C821BD1
F98B3A5BD7AD7C8F3A67151EF9CCDCAC28D748132B017DAC43E629A23EA7ECF5
19E88A719EFD1166A7505FC86D02EFD2CADCF9D5E5CEC60E2F2F13888853571A
1D75CE38C470F53FE9E88B18DB260FCD45D4885785D4D1F07D7AD12C6C177863
EC3050C17662B90F5C8BAE76E17E096837315E957A22999908ED7AB0302ABA4E
BD701C731A48A9E54B0DE4654480DDA48633D9677E345008673D8EF6938DE416
8B82CCD652CC5F65425814C549C15ABA09362A9444397A9554A8AFDAC003F9FF
7BB3786648A72CAA801A5E69D9EA95D826382013083BF4758ACB46BF37C84D25
9D2A32BF38A4697CF984580243FB14531364A832EF3202E191F74037F9615288
AC3BDAE21A21DB898AC42BD44EB9A29830E409564D9F470EA66A64B12E83AB81
8EFA495DD7323A47B923E30A01BB9C03B7051C71F69A4DC8B7FEE9F453D61335
657988FCD013F5293A654C6A36A3EE140D1825470B1904AC143694ED76CB741C
141BBC1650F07C0F0542F4EFF6AE6CDE35948890750A033711AB74D550EAC385
3FEAF9B6989D1D51E2322426B1FF1EC66D7374098CDF2328EDAD632F12DA5C49
B7CC8E40D05221B69C3F6569B1F5B68A2DE3ED8DB4DB0BB89DF5C0C636EAB366
FED8EA1865C482A6D4CAC700923FB7B1B8715E8366F32BBC26CF278B55E076E6
4D3ACBFC6F785D852911EE185D7A5ECA12264E02F7A7F40806ABD6DE95D563B1
EBF90BBB7DEA2AF9D54FBDBB0A036612181F169A92CAA527F6DB097DE76D6BE4
53F6481427D98F1B9684B26650060DB811D13B9083E05E6411AEB1A239BEE67E
CE824322682A451079E7CCC4357F926235A6EAAAB99859B3E55F3DDBF51F1C5C
2DD242BA508CEE0A7B06137D8898E6F6E6440CAAD73A4033B15021052F679BE7
4A28AD62EA9ED4FADC723E15B1787E326EDE1B4836E9731C0CB30BF7DA13E3F2
6F463B34942C857E11CD23036EFE8124C23923B15320BE40706548933D934740
B25A00560C38F245FC1A3BA57080AE5C40688D54E5B0F5F58347C0F6CD594C25
656EBD0C51C170B4E591798AC369924A51EE2AD9AB3AFEC3749818A48DCFD5AA
33F7047D57797887D6EA5042D66CE7A04A7013162FE59E6920F73AF2F673E214
F7F27627E50765AFA48EFC03D4ADC4CC83469AC3A7F4FF2EE5C9B5EB44A9AF23
65903D35CA469FA368DC9D768958A7C040F58F9BF515BCE95180E11604B44787
DAF7CE1976760F89DFAF4C48F1AC14A17327555956AED64326F53528B2185A5F
7B1D1E523D98C680C3B4297D91A6B7EF9CFB5A6C26A55563F176B9D735E8FFAF
0322927E635AB29AD7FC4B27868C98E4D5D784CDBB54E7B894F5516480090A70
537BB69F97CC540578D80FED65E83AE22E2214FFDE2B6B3C7C42E9C775D6B55D
8D7A6D9A983DD88B99FC493655262BB239CA3161176B45CCE8A2A1734DA0B817
6CCF90F7636523B358A2BCD58CF148B3AF71B9D1AC5F259F240FB8BDCD4426B1
32703B7F62CDC36FCAA3F8E5A1D93E58A193AB262AB16A59567BFD8B48CE786A
4A4E8152700745DCBCBDA639ED5E352B2EBC82E21697C4DAF0EADA892D6A6216
C4CA99E62890B9D9707B08B59C9B068404DF51684676990CE530B7C618F33791
10
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(E:/Mes-cours-2nde-mis-a-jour/Cours/Chapitre-vecteurs/Exercices/Exercices-vecteurs-niveau-1/vecteurs)
@start /Fa 205[470 470 49[{}2 885.568 /CMR8 rf /Fb 236[892
892 18[{}2 1212.12 /CMEX10 rf /Fc 207[255 48[{}1 885.568
/CMSY8 rf /Fd 138[694 18[520 641 12[708 743 920 958 778
925 974 1176 825 1029 672 533 1008 953 779 895 1004 866
919 909 5[337 337 58[{}25 1212.12 /CMMI10 rf /Fe 185[871
36[1212 27[606 3[337 943{}5 1212.12 /CMSY10 rf /Ff 134[640
640 1[640 673 471 478 475 640 673 606 673 1010 337 2[337
673 606 370 539 673 539 673 606 2[606 337 1[337 6[875
673 1[943 825 943 909 1[758 1[623 438 2[791 825 926 875
859 909 1[572 1[943 1[337 337 1[606 606 606 606 606 606
606 606 606 1[337 404 337 943 1[471 471 337 19[606 606
3[1010 1[673 707 11[{}65 1212.12 /CMR10 rf /Fg 135[736
1[736 774 542 550 574 736 774 697 774 1162 387 2[387
774 697 1[639 774 620 774 678 2[697 24[916 1[1007 8[387
697 697 697 697 697 697 697 697 697 697 1[387 465 387
2[542 542 387 19[697 2[387 16[{}42 1212.12 /CMBX10 rf
/Fh 135[824 1[824 867 607 616 607 3[867 1[434 2[434 3[694
867 694 1[780 10[1170 15[1019 20[780 3[520 5[434 39[{}18
1594.02 /CMR12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black -3276 -6425
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -3276 -6425 a -3276 -6425 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -3276 -6425 a -3276 -6425
a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -3276 -6425 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
12154 -2785 a Fh(V)-130 b(ecteurs)519 b(-)h(F)-130 b(euille)518
b(d'exercices)f(niv)-43 b(eau)520 b(1)p 11777 -4224 26588
45 v 11777 -2431 45 1816 v 38320 -2431 V 11777 -2409
26588 45 v -3276 3042 a Fg(Exercice)464 b(1)g(:)436 b(\023)-668
b(egalit)-29 b(\023)-668 b(e)465 b(de)g(deux)g(v)-39
b(ecteurs.)p -3276 3472 22729 49 v 403 w Ff(P)-34 b(our)405
b(c)-34 b(hacune)405 b(des)f(\014gures,)g(l')-34 b(\023)-572
b(egalit)-34 b(\023)-572 b(e)38211 2214 y Fe(\000)-605
b(\000)h(!)38211 3042 y Fd(AB)398 b Ff(=)41716 2214 y
Fe(\000)-554 b(\000)h(!)41716 3042 y Fd(C)87 b(D)438
b Ff(est-elle)403 b(vraie)201 b(?)-3276 17886 y @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 139.41777 119.50095 0.0 0.0 19.91682 abs
19.91682 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end
 
@endspecial -3276 17886 a
tx@Dict begin { 53.77536 13.94171 } PutCoor PutBegin  end
 -3276 17886 a
-3766 18301 a Fd(B)-3276 17886 y
tx@Dict begin  PutEnd  end
 -3276 17886 a -3276
17886 a
tx@Dict begin { 83.65059 13.94171 } PutCoor PutBegin  end
 -3276 17886 a -3795 18301 a Fd(D)-3276 17886
y
tx@Dict begin  PutEnd  end
 -3276 17886 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 59.75047 19.91682
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 79.6673 19.91682
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -3276 17886 a
tx@Dict begin { 9.9584 109.54253 } PutCoor PutBegin  end

-3276 17886 a -3731 18301 a Fd(A)-3276 17886 y
tx@Dict begin  PutEnd  end
 -3276
17886 a -3276 17886 a
tx@Dict begin { 129.45935 109.54253 } PutCoor PutBegin  end
 -3276 17886 a -3753 18301 a Fd(C)-3276
17886 y
tx@Dict begin  PutEnd  end
 -3276 17886 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 19.91682 99.58412
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 119.50095 99.58412
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 19167 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 139.41777 119.50095 0.0 0.0 19.91682 abs
19.91682 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end
 
@endspecial 15891 17886 a
tx@Dict begin { 9.9584 109.54253 } PutCoor PutBegin  end
 15891 17886 a
15436 18301 a Fd(A)15891 17886 y
tx@Dict begin  PutEnd  end
 15891 17886 a 15891
17886 a
tx@Dict begin { 129.45935 109.54253 } PutCoor PutBegin  end
 15891 17886 a 15401 18301 a Fd(B)15891 17886
y
tx@Dict begin  PutEnd  end
 15891 17886 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 19.91682 99.58412
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 119.50095 99.58412
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 15891 17886 a
tx@Dict begin { 9.9584 9.9584 } PutCoor PutBegin  end

15891 17886 a 15372 18301 a Fd(D)15891 17886 y
tx@Dict begin  PutEnd  end
 15891
17886 a 15891 17886 a
tx@Dict begin { 109.54253 9.9584 } PutCoor PutBegin  end
 15891 17886 a 15414 18301 a Fd(C)15891
17886 y
tx@Dict begin  PutEnd  end
 15891 17886 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 19.91682 19.91682
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 99.58412 19.91682
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 19167 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 139.41777 119.50095 0.0 0.0 19.91682 abs
19.91682 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end
 
@endspecial 35058 17886 a
tx@Dict begin { 9.9584 109.54253 } PutCoor PutBegin  end
 35058 17886 a
34603 18301 a Fd(A)35058 17886 y
tx@Dict begin  PutEnd  end
 35058 17886 a 35058
17886 a
tx@Dict begin { 49.79205 29.87523 } PutCoor PutBegin  end
 35058 17886 a 34568 18301 a Fd(B)35058 17886
y
tx@Dict begin  PutEnd  end
 35058 17886 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 19.91682 99.58412
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 59.75047 39.83365
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 35058 17886 a
tx@Dict begin { 129.45935 9.9584 } PutCoor PutBegin  end

35058 17886 a 34539 18301 a Fd(D)35058 17886 y
tx@Dict begin  PutEnd  end
 35058
17886 a 35058 17886 a
tx@Dict begin { 109.54253 89.6257 } PutCoor PutBegin  end
 35058 17886 a 34581 18301 a Fd(C)35058
17886 y
tx@Dict begin  PutEnd  end
 35058 17886 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 139.41777 19.91682
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 99.58412 79.6673
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -3276 21823 a
Fg(Exercice)464 b(2)g(:)h(repr)-29 b(\023)-668 b(esen)-39
b(tan)g(ts)466 b(d'un)g(v)-39 b(ecteur.)p -3276 22252
24292 49 v 404 w Ff(T)-101 b(racer)403 b(quatre)h(v)-34
b(ecteurs)371 b(\023)-572 b(egaux)403 b(au)i(v)-34 b(ecteur)43161
20995 y Fe(\000)-605 b(\000)h(!)43161 21823 y Fd(AB)61
b Ff(.)15622 33000 y @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 99.58455 85.35818 0.0 0.0 14.22636 abs
14.22636 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end
 
@endspecial
15622 33000 a
tx@Dict begin { 7.11317 64.01863 } PutCoor PutBegin  end
 15622 33000 a 15167 33414 a Fd(A)15622
33000 y
tx@Dict begin  PutEnd  end
 15622 33000 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 42.6791 28.45273 14.22636 56.90546   /Lineto
/lineto load def 0  setlinejoin false Line  gsave 1.0 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
15622 33000 a
tx@Dict begin { 49.79227 21.33954 } PutCoor PutBegin  end
 15622 33000 a 15132 33414 a Fd(B)15622
33000 y
tx@Dict begin  PutEnd  end
 15622 33000 a -3276 38905 a Fg(Exercice)464 b(3)g(:)436
b(\023)-668 b(egalit)-29 b(\023)-668 b(e)465 b(de)g(v)-39
b(ecteurs)p -3276 39335 18954 49 v 0 TeXcolorgray 88
41419 a Ff(1.)p 0 TeXcolorgray 606 w(Construire)644 b(\022)-606
b(a)645 b(partir)f(des)h(p)34 b(oin)-34 b(ts)645 b(A,)f(B)f(et)i(C)f
(les)1637 43038 y(p)34 b(oin)-34 b(ts)409 b(D,)g(E)f(et)h(F)g(tels)f
(que)15302 42210 y Fe(\000)-605 b(\000)h(!)15302 43038
y Fd(AB)405 b Ff(=)18823 42210 y Fe(\000)-555 b(\000)i(!)18823
43038 y Fd(C)87 b(D)33 b Ff(,)21558 42210 y Fe(\000)-281
b(!)21558 43038 y Fd(E)70 b(A)344 b Ff(=)25063 42210
y Fe(\000)-604 b(\000)g(!)25063 43038 y Fd(AB)1637 44658
y Ff(et)3051 43829 y Fe(\000)-599 b(\000)g(!)3051 44658
y Fd(C)87 b(F)505 b Ff(=)6568 43829 y Fe(\000)-605 b(\000)h(!)6568
44658 y Fd(B)61 b(A)p Ff(.)p 0 TeXcolorgray 88 46581
a(2.)p 0 TeXcolorgray 606 w(En)-34 b(um)g(\023)-572 b(erer)703
b(tous)h(les)e(parall)-34 b(\023)-572 b(elogrammes)702
b(que)h(l'on)1637 48086 y(p)34 b(eut)404 b(obtenir)h(a)-34
b(v)g(ec)404 b(ces)f(six)h(p)34 b(oin)-34 b(ts.)p 0 TeXcolorgray
88 50009 a(3.)p 0 TeXcolorgray 606 w(En)404 b(utilisan)-34
b(t)405 b(ces)f(six)f(p)34 b(oin)-34 b(ts,)405 b(compl)-34
b(\023)-572 b(eter)404 b(:)1637 50800 y Fe(\000)-541
b(\000)h(!)1637 51628 y Fd(B)61 b(D)370 b Ff(=)336 b
Fe(\001)202 b(\001)g(\001)336 b Ff(=)g Fd(:)202 b(:)g(:)1637
52305 y Fe(\000)-583 b(\000)h(!)1637 53134 y Fd(B)61
b(C)423 b Ff(=)337 b Fd(:)202 b(:)g(:)1637 53811 y Fe(\000)-577
b(\000)g(!)1637 54639 y Fd(B)61 b(E)406 b Ff(=)337 b
Fd(:)202 b(:)g(:)28569 54695 y @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 170.71637 128.03728 0.0 0.0 14.22636 abs
14.22636 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end


@endspecial 28569 54695 a
tx@Dict begin { 78.245 92.47136 } PutCoor PutBegin  end
 28569 54695 a 28079 55109
a Fd(B)28569 54695 y
tx@Dict begin  PutEnd  end
 28569 54695 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 85.35818 85.35818
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial 28569 54695 a
tx@Dict begin { 35.5659 64.01863 } PutCoor PutBegin  end
 28569 54695 a 28114 55109
a Fd(A)28569 54695 y
tx@Dict begin  PutEnd  end
 28569 54695 a 28569 54695 a
tx@Dict begin { 135.15045 35.5659 } PutCoor PutBegin  end
 28569
54695 a 28092 55109 a Fd(C)28569 54695 y
tx@Dict begin  PutEnd  end
 28569 54695
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 42.6791 56.90546
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 128.03728 42.6791
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -3276 57816 a Fg(Exercice)464
b(4)g(:)h(translation)p -3276 58010 14192 49 v -3276
59526 a Ff(On)405 b(consid)-34 b(\022)-572 b(ere)403
b(le)h(graphique)g(ci-con)-34 b(tre.)p 0 TeXcolorgray
-1794 61449 a(1.)p 0 TeXcolorgray 0 TeXcolorgray 587
w Fd(a:)p 0 TeXcolorgray 605 w Ff(Quelle)598 b(est)i(l'image)e(du)j
(triangle)e Fd(AB)61 b(C)687 b Ff(par)599 b(la)1319 62954
y(translation)405 b(qui)f(transforme)h Fd(M)536 b Ff(en)404
b Fd(N)334 b Ff(?)p 0 TeXcolorgray -144 64877 a Fd(b:)p
0 TeXcolorgray 606 w Ff(Quelle)c(est)g(l'image)g(du)h(p)34
b(oin)-34 b(t)332 b Fd(C)417 b Ff(par)331 b(cette)f(trans-)1319
66383 y(lation)202 b(?)p 0 TeXcolorgray -1794 68306 a(2.)p
0 TeXcolorgray 0 TeXcolorgray 587 w Fd(a:)p 0 TeXcolorgray
605 w Ff(P)-34 b(ar)548 b(quelle)g(translation)h(obtien)-34
b(t-on)550 b(le)e(triangle)1319 69811 y Fd(LK)87 b(G)404
b Ff(\022)-606 b(a)404 b(partir)g(du)h(triangle)f Fd(AB)61
b(C)289 b Ff(?)p 0 TeXcolorgray -144 71734 a Fd(b:)p
0 TeXcolorgray 606 w Ff(Placer)317 b(le)g(p)34 b(oin)-34
b(t)319 b Fd(P)10175 71294 y Fc(0)10804 71734 y Ff(image)f(de)g
Fd(P)486 b Ff(par)318 b(cette)g(trans-)1319 73240 y(lation.)p
0 TeXcolorgray -1794 75163 a(3.)p 0 TeXcolorgray 606
w(T)-101 b(racer)450 b(l'image)g(du)i(triangle)f Fd(AB)61
b(C)538 b Ff(par)452 b(la)e(transla-)-245 76668 y(tion)404
b(qui)g(transforme)h Fd(B)465 b Ff(en)404 b Fd(K)87 b
Ff(.)p 0 TeXcolorgray -1794 78591 a(4.)p 0 TeXcolorgray
606 w(Le)337 b(triangle)h Fd(GK)87 b(F)507 b Ff(est-il)338
b(l'image)f(du)i(triangle)e Fd(GE)70 b(F)-245 80097 y
Ff(par)404 b(une)h(translation)203 b(?)26418 80847 y
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 239.00531 204.8617 0.0 0.0 17.07181 abs
17.07181 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 34.14362 51.21542
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 26418 80847 a
tx@Dict begin { 29.02202 56.337 } PutCoor PutBegin  end
 26418 80847 a
25963 81261 a Fd(A)26418 80847 y
tx@Dict begin  PutEnd  end
 26418 80847 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 68.28723 85.35904
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 26418 80847 a
tx@Dict begin { 73.40881 90.48062 } PutCoor PutBegin  end
 26418 80847 a
25928 81261 a Fd(B)26418 80847 y
tx@Dict begin  PutEnd  end
 26418 80847 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 102.43085 34.14362
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 26418 80847 a
tx@Dict begin { 107.55243 29.02202 } PutCoor PutBegin  end
 26418 80847 a
25941 81261 a Fd(C)26418 80847 y
tx@Dict begin  PutEnd  end
 26418 80847 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 51.21542 119.50266
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 26418 80847 a
tx@Dict begin { 46.09383 124.62424 } PutCoor PutBegin  end
 26418 80847 a
25764 81261 a Fd(M)26418 80847 y
tx@Dict begin  PutEnd  end
 26418 80847 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 85.35904 119.50266
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 26418 80847 a
tx@Dict begin { 90.48062 124.62424 } PutCoor PutBegin  end
 26418 80847 a
25945 81261 a Fd(P)26418 80847 y
tx@Dict begin  PutEnd  end
 26418 80847 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 102.43085 68.28723
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 26418 80847 a
tx@Dict begin { 97.30925 73.40881 } PutCoor PutBegin  end
 26418 80847 a
26006 81261 a Fd(L)26418 80847 y
tx@Dict begin  PutEnd  end
 26418 80847 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 170.71808 51.21542
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 26418 80847 a
tx@Dict begin { 175.83966 46.09383 } PutCoor PutBegin  end
 26418 80847 a
25860 81261 a Fd(K)26418 80847 y
tx@Dict begin  PutEnd  end
 26418 80847 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 136.57446 102.43085
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 26418 80847 a
tx@Dict begin { 131.45287 107.55243 } PutCoor PutBegin  end
 26418 80847 a
25941 81261 a Fd(G)26418 80847 y
tx@Dict begin  PutEnd  end
 26418 80847 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 153.64627 170.71808
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 26418 80847 a
tx@Dict begin { 148.52467 175.83966 } PutCoor PutBegin  end
 26418 80847 a
25865 81261 a Fd(N)26418 80847 y
tx@Dict begin  PutEnd  end
 26418 80847 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 170.71808 136.57446
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 26418 80847 a
tx@Dict begin { 175.83966 141.69604 } PutCoor PutBegin  end
 26418 80847 a
25936 81261 a Fd(E)26418 80847 y
tx@Dict begin  PutEnd  end
 26418 80847 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 204.8617 85.35904
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 26418 80847 a
tx@Dict begin { 209.98328 80.23744 } PutCoor PutBegin  end
 26418 80847 a
25944 81261 a Fd(F)26418 80847 y
tx@Dict begin  PutEnd  end
 26418 80847 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  [ 102.43085 34.14362 68.28723 85.35904 34.14362
51.21542  /Lineto /lineto load def 0  setlinejoin false Polygon  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  [ 170.71808 51.21542 136.57446 102.43085 102.43085
68.28723  /Lineto /lineto load def 0  setlinejoin false Polygon  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  [ 204.8617 85.35904 170.71808 51.21542 136.57446
102.43085  /Lineto /lineto load def 0  setlinejoin false Polygon  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  [ 204.8617 85.35904 170.71808 136.57446 136.57446
102.43085  /Lineto /lineto load def 0  setlinejoin false Polygon  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 0 TeXcolorgray 24768 87289 a
Ff(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2304 -3177 a Fg(Exercice)463 b(5)h(:)h(translation)p
-2304 -2983 14192 49 v -730 -1672 a Ff(Construire)619
b(l'image)f(du)h(dessin)g(ci-dessous)g(par)f(la)-730
-166 y(translation)405 b(de)g(v)-34 b(ecteur)11270 -688
y Fe(\000)-943 b(!)11530 -166 y Fd(u)259 b Ff(.)3522
14391 y @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 153.64627 119.50266 0.0 0.0 17.07181 abs
17.07181 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  93.89494
51.21542 /y ED /x ED /r 25.60771 def /c 57.2957 r Div def /angleA 0.
0.0 c mul 2 div add def /angleB 180. 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 119.50266
51.21542 85.35904 17.07181 68.28723 51.21542   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 0.0 34.14362 51.21542 0.0   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 3522 14391 a
tx@Dict begin { 25.60771 30.7293 } PutCoor PutBegin  end
 3522
14391 a 2916 14352 a Fe(\000)-943 b(!)3175 14874 y Fd(u)3522
14391 y
tx@Dict begin  PutEnd  end
 3522 14391 a 25446 16797 45 23223 v 26155 -3345
a Fg(Exercice)463 b(6)i(:)f(repr)-29 b(\023)-668 b(esen)-39
b(tan)g(t)466 b(d'un)g(v)-39 b(ecteur.)p 26155 -2915
23742 49 v 26155 -1839 a Ff(Nommer)659 b(tous)h(les)f(repr)-34
b(\023)-572 b(esen)-34 b(tan)g(ts)661 b(du)f(v)-34 b(ecteur)50454
-2361 y Fe(\000)-943 b(!)50713 -1839 y Fd(u)26155 -334
y Ff(visibles)403 b(sur)h(la)g(\014gure)g(:)32296 12254
y @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 119.50095 99.58412 0.0 0.0 19.91682 abs
19.91682 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 19.91682 19.91682
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 19.91682 39.83365
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 39.83365 39.83365
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 59.75047 39.83365
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 59.75047 59.75047
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 59.75047 79.6673
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 79.6673 79.6673 
 false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 99.58412 79.6673
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
32296 12254 a
tx@Dict begin { 13.94171 13.94171 } PutCoor PutBegin  end
 32296 12254 a 31841 12668 a Fd(A)32296
12254 y
tx@Dict begin  PutEnd  end
 32296 12254 a 32296 12254 a
tx@Dict begin { 13.94171 33.85854 } PutCoor PutBegin  end
 32296 12254 a 31642
12668 a Fd(M)32296 12254 y
tx@Dict begin  PutEnd  end
 32296 12254 a 32296 12254
a
tx@Dict begin { 45.80875 33.85854 } PutCoor PutBegin  end
 32296 12254 a 31806 12668 a Fd(B)32296 12254 y
tx@Dict begin  PutEnd  end
 32296
12254 a 32296 12254 a
tx@Dict begin { 65.72557 33.85854 } PutCoor PutBegin  end
 32296 12254 a 31814 12668 a Fd(E)32296
12254 y
tx@Dict begin  PutEnd  end
 32296 12254 a 32296 12254 a
tx@Dict begin { 65.72557 53.77536 } PutCoor PutBegin  end
 32296 12254 a 31819
12668 a Fd(C)32296 12254 y
tx@Dict begin  PutEnd  end
 32296 12254 a 32296 12254
a
tx@Dict begin { 65.72557 85.6424 } PutCoor PutBegin  end
 32296 12254 a 31823 12668 a Fd(P)32296 12254 y
tx@Dict begin  PutEnd  end
 32296
12254 a 32296 12254 a
tx@Dict begin { 85.6424 85.6424 } PutCoor PutBegin  end
 32296 12254 a 31777 12668 a Fd(D)32296
12254 y
tx@Dict begin  PutEnd  end
 32296 12254 a 32296 12254 a
tx@Dict begin { 105.55922 85.6424 } PutCoor PutBegin  end
 32296 12254 a 31822
12668 a Fd(F)32296 12254 y
tx@Dict begin  PutEnd  end
 32296 12254 a 32296 12254
a
tx@Dict begin { 33.85854 65.72557 } PutCoor PutBegin  end
 32296 12254 a 31690 12215 a Fe(\000)-943 b(!)31949
12737 y Fd(u)32296 12254 y
tx@Dict begin  PutEnd  end
 32296 12254 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 79.6673
79.6673 19.91682 19.91682   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 99.58412
79.6673 59.75047 39.83365   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 59.75047 79.6673 19.91682 39.83365   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -3276 18413 a
Fg(Exercice)464 b(7)g(:)h(direction,)h(sens)e(et)h(norme)f(d'un)j(v)-39
b(ecteur)p -3276 18843 30448 49 v 0 TeXcolorgray -1794
20905 a Ff(1.)p 0 TeXcolorgray 606 w(Citer)495 b(les)h(v)-34
b(ecteurs)495 b(de)h(m)-34 b(^)-572 b(eme)495 b(norme)h(que)21060
20077 y Fe(\000)-605 b(\000)h(!)21060 20905 y Fd(AB)557
b Ff(sur)-245 22410 y(la)404 b(\014gure)g(ci-con)-34
b(tre.)p 0 TeXcolorgray -1794 24447 a(2.)p 0 TeXcolorgray
606 w(Citer)558 b(les)g(v)-34 b(ecteurs)558 b(de)h(m)-34
b(^)-572 b(eme)558 b(direction)g(que)22845 23619 y Fe(\000)-605
b(\000)h(!)22845 24447 y Fd(AB)61 b Ff(.)-245 25953 y(P)-34
b(armi)446 b(ces)h(v)-34 b(ecteurs,)447 b(quels)f(son)-34
b(t)448 b(ceux)f(qui)g(son)-34 b(t)448 b(de)-245 27572
y(m)-34 b(^)-572 b(eme)403 b(sens)i(que)8085 26744 y
Fe(\000)-605 b(\000)h(!)8085 27572 y Fd(AB)263 b Ff(?)p
0 TeXcolorgray -1794 29609 a(3.)p 0 TeXcolorgray 606
w(Quels)403 b(son)-34 b(t)406 b(les)d(v)-34 b(ecteurs)371
b(\023)-572 b(egaux)403 b(\022)-606 b(a)16687 28781 y
Fe(\000)i(\000)g(!)16687 29609 y Fd(AB)264 b Ff(?)p 0
TeXcolorgray -1794 31646 a(4.)p 0 TeXcolorgray 606 w(A-t-on)3627
30818 y Fe(\000)-549 b(\000)i(!)3627 31646 y Fd(D)34
b(E)405 b Ff(=)7245 30818 y Fe(\000)-554 b(\000)g(!)7245
31646 y Fd(D)34 b(C)288 b Ff(?)p 0 TeXcolorgray -1794
33569 a(5.)p 0 TeXcolorgray 606 w(A-t-on)405 b Fd(D)34
b(E)405 b Ff(=)337 b Fd(D)34 b(C)288 b Ff(?)26418 33215
y @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 159.3346 119.50095 0.0 0.0 19.91682 abs
19.91682 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 19.91682 79.6673
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 59.75047 99.58412
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 59.75047 39.83365
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 99.58412 59.75047
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 139.41777 79.6673
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 99.58412 19.91682
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 139.41777 39.83365
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 26418 33215 a
tx@Dict begin { 13.94171 85.6424 } PutCoor PutBegin  end
 26418 33215 a
25963 33629 a Fd(A)26418 33215 y
tx@Dict begin  PutEnd  end
 26418 33215 a 26418
33215 a
tx@Dict begin { 53.77536 105.55922 } PutCoor PutBegin  end
 26418 33215 a 25928 33629 a Fd(B)26418 33215
y
tx@Dict begin  PutEnd  end
 26418 33215 a 26418 33215 a
tx@Dict begin { 53.77536 33.85854 } PutCoor PutBegin  end
 26418 33215 a 25941 33629
a Fd(C)26418 33215 y
tx@Dict begin  PutEnd  end
 26418 33215 a 26418 33215 a
tx@Dict begin { 93.60901 65.72557 } PutCoor PutBegin  end
 26418
33215 a 25899 33629 a Fd(D)26418 33215 y
tx@Dict begin  PutEnd  end
 26418 33215
a 26418 33215 a
tx@Dict begin { 133.44266 85.6424 } PutCoor PutBegin  end
 26418 33215 a 25936 33629 a Fd(E)26418
33215 y
tx@Dict begin  PutEnd  end
 26418 33215 a 26418 33215 a
tx@Dict begin { 105.55922 13.94171 } PutCoor PutBegin  end
 26418 33215 a 25944
33629 a Fd(F)26418 33215 y
tx@Dict begin  PutEnd  end
 26418 33215 a 26418 33215
a
tx@Dict begin { 145.39287 33.85854 } PutCoor PutBegin  end
 26418 33215 a 25941 33629 a Fd(G)26418 33215 y
tx@Dict begin  PutEnd  end
 26418
33215 a -3276 38196 a Fg(Exercice)464 b(8)g(:)h(repr)-29
b(\023)-668 b(esen)-39 b(tan)g(t)466 b(d'un)g(v)-39 b(ecteur)464
b(d'origine)i(donn)-29 b(\023)-668 b(ee)p -3276 38626
33899 49 v -3276 40331 a Ff(Soien)-34 b(t)405 b Fd(A)g
Ff(et)f Fd(B)465 b Ff(deux)404 b(p)34 b(oin)-34 b(ts)405
b(distincts)g(donn)-34 b(\023)-572 b(es.)p 0 TeXcolorgray
-1794 42368 a(1.)p 0 TeXcolorgray 606 w(On)404 b(consid)-34
b(\022)-572 b(ere)404 b(le)f(p)34 b(oin)-34 b(t)405 b
Fd(M)536 b Ff(tel)404 b(que)17201 41540 y Fe(\000)-441
b(\000)h(!)17201 42368 y Fd(AM)469 b Ff(=)21034 41540
y Fe(\000)-605 b(\000)h(!)21034 42368 y Fd(AB)61 b Ff(.)404
b(O)34 b(\022)-640 b(u)404 b(se)g(trouv)-34 b(e)405 b(le)e(p)34
b(oin)-34 b(t)405 b Fd(M)334 b Ff(?)p 0 TeXcolorgray
-1794 44405 a(2.)p 0 TeXcolorgray 606 w(On)404 b(consid)-34
b(\022)-572 b(ere)404 b(le)f(p)34 b(oin)-34 b(t)405 b
Fd(P)573 b Ff(tel)403 b(que)16839 43577 y Fe(\000)-299
b(!)16839 44405 y Fd(P)168 b(A)338 b Ff(=)20311 43577
y Fe(\000)-605 b(\000)h(!)20311 44405 y Fd(AB)61 b Ff(.)404
b(O)34 b(\022)-640 b(u)404 b(se)g(trouv)-34 b(e)405 b(le)e(p)34
b(oin)-34 b(t)405 b Fd(P)371 b Ff(?)p 0 TeXcolorgray
-1794 46442 a(3.)p 0 TeXcolorgray 606 w(Existe-t-il)403
b(un)i(p)34 b(oin)-34 b(t)405 b Fd(R)414 b Ff(tel)404
b(que)15658 45614 y Fe(\000)-317 b(!)15658 46442 y Fd(R)9
b(A)337 b Ff(=)19112 45614 y Fe(\000)-594 b(\000)g(!)19112
46442 y Fd(R)9 b(B)264 b Ff(?)p 0 TeXcolorgray -1794
48479 a(4.)p 0 TeXcolorgray 606 w(On)404 b(consid)-34
b(\022)-572 b(ere)404 b(le)f(p)34 b(oin)-34 b(t)405 b
Fd(Q)f Ff(tel)g(que)16851 47651 y Fe(\000)-288 b(!)16851
48479 y Fd(QA)337 b Ff(=)20335 47651 y Fe(\000)-581 b(\000)i(!)20335
48479 y Fd(B)61 b(Q)p Ff(.)404 b(O)34 b(\022)-640 b(u)404
b(se)g(trouv)-34 b(e)404 b(le)g(p)34 b(oin)-34 b(t)405
b Fd(Q)202 b Ff(?)-3276 51838 y Fg(Exercice)464 b(9)g(:)436
b(\023)-668 b(egalit)-29 b(\023)-668 b(e)465 b(de)g(deux)g(v)-39
b(ecteurs)464 b(et)g(parall)-29 b(\023)-668 b(elogramme)p
-3276 52268 34564 49 v -3276 53973 a Ff(Soit)405 b Fd(AB)61
b(C)87 b(D)438 b Ff(un)404 b(parall)-34 b(\023)-572 b(elogramme.)p
0 TeXcolorgray -1794 55896 a(1.)p 0 TeXcolorgray 606
w(Dire)403 b(si)h(c)-34 b(hacune)405 b(des)f(a\016rmations)h(suiv)-67
b(an)-34 b(tes)404 b(est)g(vraie)f(:)p 0 TeXcolorgray
1573 57280 a Fe(\005)p 0 TeXcolorgray 2785 56452 a(\000)-605
b(\000)h(!)2785 57280 y Fd(B)61 b(A)270 b Ff(+)6156 56452
y Fe(\000)-583 b(\000)h(!)6156 57280 y Fd(B)61 b(C)424
b Ff(=)9705 56452 y Fe(\000)-540 b(\000)g(!)9705 57280
y Fd(B)61 b(D)236 b Ff(;)p 0 TeXcolorgray 1573 59317
a Fe(\005)p 0 TeXcolorgray 2785 58489 a(\000)-605 b(\000)h(!)2785
59317 y Fd(AB)331 b Ff(+)6156 58489 y Fe(\000)-576 b(\000)g(!)6156
59317 y Fd(AD)370 b Ff(=)9718 58489 y Fe(\000)-293 b(!)9718
59317 y Fd(C)87 b(A)202 b Ff(;)p 0 TeXcolorgray 28674
57347 a Fe(\005)p 0 TeXcolorgray 29886 56519 a(\000)-583
b(\000)h(!)29886 57347 y Fd(B)61 b(C)356 b Ff(+)33300
56519 y Fe(\000)-604 b(\000)g(!)33300 57347 y Fd(B)61
b(A)337 b Ff(=)36806 56519 y Fe(\000)-576 b(\000)g(!)36806
57347 y Fd(AD)303 b Ff(+)40234 56519 y Fe(\000)-555 b(\000)i(!)40234
57347 y Fd(C)87 b(D)235 b Ff(;)p 0 TeXcolorgray 28674
59384 a Fe(\005)p 0 TeXcolorgray 29886 58556 a(\000)-577
b(\000)i(!)29886 59384 y Fd(AD)302 b Ff(+)33313 58556
y Fe(\000)-293 b(!)33313 59384 y Fd(AC)424 b Ff(=)36792
58556 y Fe(\000)-555 b(\000)i(!)36792 59384 y Fd(D)34
b(C)86 b Ff(.)p 0 TeXcolorgray -1794 60922 a(2.)p 0 TeXcolorgray
606 w(Soit)404 b Fd(C)87 b(D)34 b(E)70 b(F)572 b Ff(un)405
b(second)f(parall)-34 b(\023)-572 b(elogramme)403 b(tel)h(que)g(les)g
(p)34 b(oin)-34 b(ts)405 b Fd(A)p Ff(,)f Fd(D)437 b Ff(et)404
b Fd(E)474 b Ff(ne)404 b(soien)-34 b(t)405 b(pas)f(align)-34
b(\023)-572 b(es.)p 0 TeXcolorgray -264 62845 a Fd(a:)p
0 TeXcolorgray 605 w Ff(Ecrire)403 b(toutes)i(les)370
b(\023)-572 b(egalit)-34 b(\023)-572 b(es)403 b(v)-34
b(ectorielles)402 b(p)34 b(ossibles)404 b(en)g(utilisan)-34
b(t)406 b(les)d(p)34 b(oin)-34 b(ts)405 b(de)g(la)e(\014gure.)p
0 TeXcolorgray -144 64768 a Fd(b:)p 0 TeXcolorgray 606
w Ff(En)h(d)-34 b(\023)-572 b(eduire)405 b(que)e Fd(AB)61
b(F)168 b(E)475 b Ff(est)405 b(un)f(parall)-34 b(\023)-572
b(elogramme.)-3276 68127 y Fg(Exercice)464 b(10)g(:)h(milieu)g(d'un)h
(segmen)-39 b(t)p -3276 68557 20645 49 v -3276 70263
a Ff(Soit)415 b Fd(M)132 b(N)g(P)583 b Ff(un)414 b(triangle)g(et)g
(soit)g Fd(I)509 b Ff(le)414 b(milieu)f(de)h([)p Fd(N)132
b(P)168 b Ff(].)414 b(On)g(note)h Fd(Q)f Ff(le)f(sym)-34
b(\023)-572 b(etrique)414 b(de)g Fd(M)546 b Ff(par)414
b(rapp)34 b(ort)414 b(au)h(p)34 b(oin)-34 b(t)415 b Fd(I)95
b Ff(.)-3276 71768 y(Quelles)370 b(\023)-572 b(egalit)-34
b(\023)-572 b(es)403 b(v)-34 b(ectorielles)402 b(p)34
b(eut-on)372 b(\023)-572 b(ecrire)402 b(en)i(utilisan)-34
b(t)405 b(les)f(p)34 b(oin)-34 b(ts)405 b(de)f(la)g(\014gure)202
b(?)405 b(Justi\014er.)-3276 74779 y Fg(Exercice)464
b(11)g(:)h(milieu)g(d'un)h(segmen)-39 b(t)p -3276 75209
V -3276 76915 a Ff(Soien)-34 b(t)530 b(trois)f(p)34 b(oin)-34
b(ts)529 b Fd(A)p Ff(,)g Fd(B)590 b Ff(et)529 b Fd(C)615
b Ff(tels)529 b(que)f Fd(C)616 b Ff(soit)529 b(le)f(sym)-34
b(\023)-572 b(etrique)528 b(de)h Fd(A)f Ff(par)h(rapp)34
b(ort)529 b(\022)-606 b(a)529 b Fd(B)61 b Ff(.)529 b(Dire)f(si)h(c)-34
b(hacune)529 b(des)-3276 78420 y(a\016rmations)405 b(suiv)-67
b(an)-34 b(tes)405 b(est)f(vraie)f(:)9798 80315 y Fe(\000)-605
b(\000)h(!)9798 81143 y Fd(AB)398 b Ff(=)13304 80315
y Fe(\000)-583 b(\000)h(!)13304 81143 y Fd(B)61 b(C)1299
b Ff(;)18200 80315 y Fe(\000)-293 b(!)18200 81143 y Fd(AC)424
b Ff(=)21678 80315 y Fe(\000)-605 b(\000)h(!)21678 81143
y Fd(AB)1274 b Ff(;)26530 80315 y Fe(\000)-582 b(\000)f(!)26530
81143 y Fd(C)87 b(B)398 b Ff(=)30080 80315 y Fe(\000)-293
b(!)30080 81143 y Fd(AC)1299 b Ff(;)34905 80315 y Fe(\000)-583
b(\000)h(!)34905 81143 y Fd(C)87 b(B)398 b Ff(=)38454
80315 y Fe(\000)-604 b(\000)f(!)38454 81143 y Fd(AB)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -3276 -5208 a Fg(Exercice)464 b(12)g(:)h(co)39
b(ordonn)-29 b(\023)-668 b(ees)465 b(d'un)h(v)-39 b(ecteur)464
b(\(lecture)h(graphique)g(et)g(calcul\))p -3276 -4711
41702 49 v -2611 -2750 a Ff(Lecture)403 b(graphique)p
-2611 -2320 9620 49 v -2611 -1244 a(On)i(consid)-34 b(\022)-572
b(ere)405 b(la)f(\014gure)i(ci-dessous.)f(Lire)f(graphiquemen)-34
b(t)-2611 261 y(les)403 b(co)34 b(ordonn)-34 b(\023)-572
b(ees)404 b(des)h(v)-34 b(ecteurs)403 b(:)2183 2156 y
Fe(\000)-605 b(\000)h(!)2183 2984 y Fd(AB)466 b Ff(;)5419
2156 y Fe(\000)-554 b(\000)g(!)5419 2984 y Fd(C)87 b(D)438
b Ff(;)8756 2156 y Fe(\000)-593 b(\000)h(!)8756 2984
y Fd(E)70 b(F)573 b Ff(;)12016 2156 y Fe(\000)-520 b(\000)h(!)12016
2984 y Fd(GH)502 b Ff(;)15421 2156 y Fe(\000)-395 b(!)15421
2984 y Fd(P)168 b(S)475 b Ff(et)18999 2156 y Fe(\000)-578
b(\000)f(!)18999 2984 y Fd(K)87 b(L)538 24391 y @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 199.16824 179.25142 0.0 0.0 19.91682 abs
19.91682 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 199.16824
79.6673 0.0 79.6673   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 99.58412
179.25142 99.58412 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 538 24391 a
tx@Dict begin { 53.77536 125.47604 } PutCoor PutBegin  end
 538
24391 a 83 24805 a Fd(A)538 24391 y
tx@Dict begin  PutEnd  end
 538 24391 a 538 24391
a
tx@Dict begin { 125.47604 145.39287 } PutCoor PutBegin  end
 538 24391 a 48 24805 a Fd(B)538 24391 y
tx@Dict begin  PutEnd  end
 538 24391 a
538 24391 a
tx@Dict begin { 125.47604 125.47604 } PutCoor PutBegin  end
 538 24391 a 61 24805 a Fd(C)538 24391 y
tx@Dict begin  PutEnd  end
 538
24391 a 538 24391 a
tx@Dict begin { 145.39287 93.60901 } PutCoor PutBegin  end
 538 24391 a 19 24805 a Fd(D)538 24391
y
tx@Dict begin  PutEnd  end
 538 24391 a 538 24391 a
tx@Dict begin { 185.22652 125.47604 } PutCoor PutBegin  end
 538 24391 a 56 24805 a Fd(E)538
24391 y
tx@Dict begin  PutEnd  end
 538 24391 a 538 24391 a
tx@Dict begin { 165.3097 73.69218 } PutCoor PutBegin  end
 538 24391 a 64 24805
a Fd(F)538 24391 y
tx@Dict begin  PutEnd  end
 538 24391 a 538 24391 a
tx@Dict begin { 53.77536 65.72557 } PutCoor PutBegin  end
 538 24391
a 61 24805 a Fd(G)538 24391 y
tx@Dict begin  PutEnd  end
 538 24391 a 538 24391 a
tx@Dict begin { 105.55922 53.77536 } PutCoor PutBegin  end

538 24391 a -15 24805 a Fd(H)538 24391 y
tx@Dict begin  PutEnd  end
 538 24391 a
538 24391 a
tx@Dict begin { 113.52583 73.69218 } PutCoor PutBegin  end
 538 24391 a 224 24805 a Fd(I)538 24391 y
tx@Dict begin  PutEnd  end

538 24391 a 538 24391 a
tx@Dict begin { 93.60901 93.60901 } PutCoor PutBegin  end
 538 24391 a 144 24805 a Fd(J)538
24391 y
tx@Dict begin  PutEnd  end
 538 24391 a 538 24391 a
tx@Dict begin { 13.94171 105.55922 } PutCoor PutBegin  end
 538 24391 a -20 24805
a Fd(K)538 24391 y
tx@Dict begin  PutEnd  end
 538 24391 a 538 24391 a
tx@Dict begin { 53.77536 33.85854 } PutCoor PutBegin  end
 538 24391
a 126 24805 a Fd(L)538 24391 y
tx@Dict begin  PutEnd  end
 538 24391 a 538 24391
a
tx@Dict begin { 93.60901 73.69218 } PutCoor PutBegin  end
 538 24391 a 59 24805 a Fd(O)538 24391 y
tx@Dict begin  PutEnd  end
 538 24391 a
538 24391 a
tx@Dict begin { 165.3097 33.85854 } PutCoor PutBegin  end
 538 24391 a 65 24805 a Fd(P)538 24391 y
tx@Dict begin  PutEnd  end
 538
24391 a 538 24391 a
tx@Dict begin { 93.60901 33.85854 } PutCoor PutBegin  end
 538 24391 a 131 24805 a Fd(S)538
24391 y
tx@Dict begin  PutEnd  end
 538 24391 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 99.58412 79.6673
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 119.50095 79.6673
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 99.58412 99.58412
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 59.75047 39.83365 19.91682 99.58412   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 119.50095 139.41777 59.75047 119.50095   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 99.58412 59.75047 59.75047 59.75047   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 139.41777 99.58412 119.50095 119.50095   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 99.58412 39.83365 159.3346 39.83365   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 159.3346 79.6673 179.25142 119.50095   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 26399 24391 45 27983 v 27108
-2589 a Ff(Calcul)p 27108 -2395 3368 49 v 27108 -963
a(Calculer)470 b(les)h(co)34 b(ordonn)-34 b(\023)-572
b(ees)471 b(du)h(v)-34 b(ecteur)46827 -1791 y Fe(\000)-349
b(!)46827 -963 y Fd(R)9 b(T)640 b Ff(dans)473 b(les)d(cas)27108
542 y(suiv)-67 b(an)-34 b(ts)405 b(:)p 0 TeXcolorgray
27089 2465 a Fd(a:)p 0 TeXcolorgray 605 w(R)9 b Ff(\()p
Fe(\000)p Ff(5)405 b(;)606 b(8\))404 b(et)g Fd(T)168
b Ff(\()p Fe(\000)p Ff(12)405 b(;)606 b Fe(\000)p Ff(17\))202
b(;)p 0 TeXcolorgray 27209 5054 a Fd(b:)p 0 TeXcolorgray
606 w(R)29804 3345 y Fb(\022)30829 4234 y Ff(1)p 30829
4775 607 49 v 30829 5886 a(2)31972 5054 y(;)33047 4234
y(3)p 33047 4775 V 33047 5886 a(4)33786 3345 y Fb(\023)35083
5054 y Ff(et)404 b Fd(T)37575 3345 y Fb(\022)38468 5054
y Fe(\000)p Ff(2)g(;)41496 4234 y(1)p 41496 4775 V 41496
5886 a(4)42235 3345 y Fb(\023)-3276 27513 y Fg(Exercice)464
b(13)g(:)h(co)39 b(ordonn)-29 b(\023)-668 b(ees)p -3276
27707 15779 49 v -3276 29648 a Ff(Placer)403 b(dans)i(un)g(rep)-34
b(\022)-572 b(ere)403 b(orthonorm)-34 b(\023)-572 b(e)405
b(\()p Fd(O)34 b Ff(;)202 b Fd(I)95 b(;)202 b(J)117 b
Ff(\))403 b(le)h(p)34 b(oin)-34 b(t)405 b Fd(A)p Ff(\(2)f(;)606
b Fe(\000)p Ff(3\),)404 b(puis)h(:)p 0 TeXcolorgray -1829
31752 a Fd(a:)p 0 TeXcolorgray 606 w Ff(Le)e(p)34 b(oin)-34
b(t)405 b Fd(M)536 b Ff(tel)404 b(que)10339 30924 y Fe(\000)-441
b(\000)h(!)10339 31752 y Fd(AM)132 b Ff(\(2)405 b(;)605
b Fe(\000)p Ff(3\))203 b(;)p 0 TeXcolorgray -1708 33856
a Fd(b:)p 0 TeXcolorgray 606 w Ff(Le)403 b(p)34 b(oin)-34
b(t)405 b Fd(P)573 b Ff(tel)403 b(que)9977 33028 y Fe(\000)-299
b(!)9977 33856 y Fd(AP)169 b Ff(\()p Fe(\000)p Ff(2)404
b(;)202 b(3\).)-3276 37215 y Fg(Exercice)464 b(14)g(:)h(co)39
b(ordonn)-29 b(\023)-668 b(ees)p -3276 37409 V -3276
39351 a Ff(Soit)405 b(\()p Fd(O)34 b Ff(;)202 b Fd(I)95
b(;)202 b(J)117 b Ff(\))403 b(un)i(rep)-34 b(\022)-572
b(ere)403 b(orthonorm)-34 b(\023)-572 b(e.)405 b(Soien)-34
b(t)405 b Fd(A)p Ff(\()p Fe(\000)p Ff(2)f(;)606 b(5\))404
b(et)g Fd(C)87 b Ff(\(4)405 b(;)606 b(6\).)p 0 TeXcolorgray
-1794 41274 a(1.)p 0 TeXcolorgray 606 w(F)-101 b(aire)403
b(une)i(\014gure.)p 0 TeXcolorgray -1794 43311 a(2.)p
0 TeXcolorgray 606 w(Calculer)e(les)h(co)34 b(ordonn)-34
b(\023)-572 b(ees)404 b(du)h(v)-34 b(ecteur)19139 42482
y Fe(\000)-293 b(!)19139 43311 y Fd(AC)87 b Ff(.)p 0
TeXcolorgray -1794 45234 a(3.)p 0 TeXcolorgray 606 w(Calculer)328
b(les)h(co)34 b(ordonn)-34 b(\023)-572 b(ees)329 b(du)h(p)34
b(oin)-34 b(t)330 b Fd(M)461 b Ff(tel)329 b(que)23177
44405 y Fe(\000)-417 b(\000)i(!)23177 45234 y Fd(O)34
b(M)468 b Ff(=)27059 44405 y Fe(\000)-293 b(!)27059 45234
y Fd(AC)87 b Ff(.)329 b(Quelle)f(est)i(la)e(nature)i(du)g(quadrilat)-34
b(\022)-572 b(ere)328 b Fd(O)34 b(M)132 b(C)87 b(A)202
b Ff(?)p 0 TeXcolorgray -1794 47157 a(4.)p 0 TeXcolorgray
606 w(Con)-34 b(tr^)-606 b(oler)404 b(les)g(r)-34 b(\023)-572
b(esultats)405 b(sur)f(la)g(\014gure.)-3276 50516 y Fg(Exercice)464
b(15)g(:)h(co)39 b(ordonn)-29 b(\023)-668 b(ees)p -3276
50710 V -3276 52651 a Ff(Soit)405 b(\()p Fd(O)34 b Ff(;)202
b Fd(I)95 b(;)202 b(J)117 b Ff(\))403 b(un)i(rep)-34
b(\022)-572 b(ere)403 b(orthonorm)-34 b(\023)-572 b(e.)405
b(Soien)-34 b(t)405 b Fd(A)p Ff(\()p Fe(\000)p Ff(2)f(;)606
b(4\),)404 b Fd(B)61 b Ff(\(3)405 b(;)605 b(4\))405 b(et)f
Fd(C)87 b Ff(\(0)404 b(;)606 b Fe(\000)p Ff(3\).)p 0
TeXcolorgray -1794 54755 a(1.)p 0 TeXcolorgray 606 w(Calculer)403
b(les)h(co)34 b(ordonn)-34 b(\023)-572 b(ees)404 b(du)h(p)34
b(oin)-34 b(t)405 b Fd(E)473 b Ff(tel)404 b(que)23433
53927 y Fe(\000)-281 b(!)23433 54755 y Fd(AE)407 b Ff(=)26923
53927 y Fe(\000)-583 b(\000)h(!)26923 54755 y Fd(B)61
b(C)87 b Ff(.)p 0 TeXcolorgray -1794 56792 a(2.)p 0 TeXcolorgray
606 w(Calculer)403 b(les)h(co)34 b(ordonn)-34 b(\023)-572
b(ees)404 b(du)h(p)34 b(oin)-34 b(t)405 b Fd(F)573 b
Ff(tel)403 b(que)23416 55964 y Fe(\000)-298 b(!)23416
56792 y Fd(AF)506 b Ff(=)26889 55964 y Fe(\000)-582 b(\000)g(!)26889
56792 y Fd(C)87 b(B)62 b Ff(.)p 0 TeXcolorgray -1794
58715 a(3.)p 0 TeXcolorgray 606 w(Quelle)403 b(p)34 b(osition)404
b(o)34 b(ccup)g(e)404 b(le)f(p)34 b(oin)-34 b(t)405 b
Fd(A)f Ff(par)h(rapp)34 b(ort)404 b(aux)g(p)34 b(oin)-34
b(ts)405 b Fd(E)474 b Ff(et)404 b Fd(F)371 b Ff(?)-3276
62074 y Fg(Exercice)464 b(16)g(:)h(relation)g(de)g(Chasles)p
-3276 62268 19911 49 v -3276 63580 a Ff(Compl)-34 b(\023)-572
b(eter)405 b(les)370 b(\023)-572 b(egalit)-34 b(\023)-572
b(es)403 b(suiv)-67 b(an)-34 b(tes)404 b(sans)h(faire)f(de)g(\014gure.)
p 0 TeXcolorgray -3276 66144 a Fe(\005)p 0 TeXcolorgray
-2063 65316 a(\000)-605 b(\000)h(!)-2063 66144 y Fd(AB)330
b Ff(+)1307 65316 y Fe(\000)-540 b(\000)g(!)1307 66144
y Fd(B)61 b(D)370 b Ff(=)4941 65316 y Fe(\000)-590 b(\000)-269
b(\000)-590 b(!)4941 66144 y Fd(A:::::)201 b Ff(;)p 0
TeXcolorgray -3276 68181 a Fe(\005)p 0 TeXcolorgray -2063
67352 a(\000)-293 b(!)-2063 68181 y Fd(AC)356 b Ff(+)1280
67352 y Fe(\000)-605 b(\000)h(!)1280 68181 y Fd(B)61
b(A)337 b Ff(=)g Fd(::::::::)199 b Ff(;)p 0 TeXcolorgray
-3276 70218 a Fe(\005)p 0 TeXcolorgray 607 w Fd(::::::::)266
b Ff(+)2112 69389 y Fe(\000)-441 b(\000)h(!)2112 70218
y Fd(AM)468 b Ff(=)5945 69389 y Fe(\000)-342 b(\000)g(!)5945
70218 y Fd(N)132 b(M)334 b Ff(;)p 0 TeXcolorgray -3276
72254 a Fe(\005)p 0 TeXcolorgray -2063 71426 a(\000)-605
b(\000)h(!)-2063 72254 y Fd(AB)330 b Ff(+)269 b Fd(::::::::)335
b Ff(=)5617 71473 y Fe(\000)-943 b(!)5920 72254 y Ff(0)303
b(.)p 0 TeXcolorgray 25340 67162 a Fe(\005)p 0 TeXcolorgray
26552 66334 a(\000)-547 b(!)26552 67162 y Fd(B)61 b(I)365
b Ff(+)29642 66334 y Fe(\000)-421 b(!)29642 67162 y Fd(I)95
b(N)469 b Ff(=)336 b Fd(::::::::)200 b Ff(;)p 0 TeXcolorgray
25340 69199 a Fe(\005)p 0 TeXcolorgray 26552 68371 a(\000)-418
b(\000)f(!)26552 69199 y Fd(M)132 b(C)357 b Ff(+)269
b Fd(::::::::)334 b Ff(=)34605 68371 y Fe(\000)-343 b(\000)i(!)34605
69199 y Fd(M)132 b(N)334 b Ff(;)p 0 TeXcolorgray 25340
71236 a Fe(\005)p 0 TeXcolorgray 26552 70408 a(\000)-589
b(\000)-270 b(\000)-589 b(!)26552 71236 y Fd(A:::::)268
b Ff(+)30626 70408 y Fe(\000)-350 b(!)30626 71236 y Fd(B)61
b(L)337 b Ff(=)34048 70408 y Fe(\000)-421 b(!)34048 71236
y Fd(AL)p Ff(.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -3276 -5208 a Fg(Exercice)464 b(17)g(:)h(enc)-39
b(ha)-155 b(^)-542 b(\020nemen)-39 b(t)466 b(de)f(deux)g(translations)f
(-)h(construction)g(du)g(v)-39 b(ecteur)465 b(somme)p
-3276 -5014 50076 49 v -3276 10736 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 199.16824 99.58412 0.0 0.0 19.91682 abs
19.91682 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end


@endspecial -3276 10736 a
tx@Dict begin { 13.94171 53.77536 } PutCoor PutBegin  end
 -3276 10736 a -3731 11150
a Fd(A)-3276 10736 y
tx@Dict begin  PutEnd  end
 -3276 10736 a -3276 10736 a
tx@Dict begin { 33.85854 85.6424 } PutCoor PutBegin  end
 -3276
10736 a -3766 11150 a Fd(B)-3276 10736 y
tx@Dict begin  PutEnd  end
 -3276 10736
a -3276 10736 a
tx@Dict begin { 53.77536 85.6424 } PutCoor PutBegin  end
 -3276 10736 a -3753 11150 a Fd(C)-3276
10736 y
tx@Dict begin  PutEnd  end
 -3276 10736 a -3276 10736 a
tx@Dict begin { 85.6424 85.6424 } PutCoor PutBegin  end
 -3276 10736 a -3795
11150 a Fd(D)-3276 10736 y
tx@Dict begin  PutEnd  end
 -3276 10736 a -3276 10736
a
tx@Dict begin { 33.85854 33.85854 } PutCoor PutBegin  end
 -3276 10736 a -3758 11150 a Fd(E)-3276 10736 y
tx@Dict begin  PutEnd  end
 -3276
10736 a -3276 10736 a
tx@Dict begin { 73.69218 13.94171 } PutCoor PutBegin  end
 -3276 10736 a -3750 11150 a Fd(F)-3276
10736 y
tx@Dict begin  PutEnd  end
 -3276 10736 a -3276 10736 a
tx@Dict begin { 145.39287 45.80875 } PutCoor PutBegin  end
 -3276 10736 a -3753
11150 a Fd(G)-3276 10736 y
tx@Dict begin  PutEnd  end
 -3276 10736 a -3276 10736
a
tx@Dict begin { 185.22652 45.80875 } PutCoor PutBegin  end
 -3276 10736 a -3829 11150 a Fd(H)-3276 10736 y
tx@Dict begin  PutEnd  end
 -3276
10736 a -3276 10736 a
tx@Dict begin { 133.44266 13.94171 } PutCoor PutBegin  end
 -3276 10736 a -3834 11150 a Fd(K)-3276
10736 y
tx@Dict begin  PutEnd  end
 -3276 10736 a -3276 10736 a
tx@Dict begin { 113.52583 53.77536 } PutCoor PutBegin  end
 -3276 10736 a -3590
11150 a Fd(I)-3276 10736 y
tx@Dict begin  PutEnd  end
 -3276 10736 a -3276 10736
a
tx@Dict begin { 185.22652 85.6424 } PutCoor PutBegin  end
 -3276 10736 a -3670 11150 a Fd(J)-3276 10736 y
tx@Dict begin  PutEnd  end
 -3276
10736 a -3276 10736 a
tx@Dict begin { 93.60901 13.94171 } PutCoor PutBegin  end
 -3276 10736 a -3755 11150 a Fd(O)-3276
10736 y
tx@Dict begin  PutEnd  end
 -3276 10736 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 39.83365 79.6673 19.91682 59.75047   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 79.6673 79.6673 59.75047 79.6673   /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 79.6673 19.91682 39.83365 39.83365   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 139.41777 39.83365 99.58412 19.91682   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 139.41777 19.91682 179.25142 39.83365   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 179.25142 79.6673 119.50095 59.75047   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -3276 10736 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 -3276 10736 a
-3276 10736 a
tx@Dict begin { 99.58412 -29.87523 } PutCoor PutBegin  end
 -3276 10736 a -6141 9947 a Ff(Question)405
b(1)-3276 10736 y
tx@Dict begin  PutEnd  end
 -3276 10736 a 26418 14043 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 239.00189 159.3346 0.0 0.0 19.91682 abs
19.91682 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end
 
@endspecial 26418 14043 a
tx@Dict begin { 73.69218 133.44266 } PutCoor PutBegin  end
 26418 14043 a
25963 14457 a Fd(A)26418 14043 y
tx@Dict begin  PutEnd  end
 26418 14043 a 26418
14043 a
tx@Dict begin { 205.14334 105.55922 } PutCoor PutBegin  end
 26418 14043 a 25928 14457 a Fd(B)26418 14043
y
tx@Dict begin  PutEnd  end
 26418 14043 a 26418 14043 a
tx@Dict begin { 53.77536 13.94171 } PutCoor PutBegin  end
 26418 14043 a 25941 14457
a Fd(C)26418 14043 y
tx@Dict begin  PutEnd  end
 26418 14043 a 26418 14043 a
tx@Dict begin { 145.39287 13.94171 } PutCoor PutBegin  end
 26418
14043 a 25899 14457 a Fd(D)26418 14043 y
tx@Dict begin  PutEnd  end
 26418 14043
a 26418 14043 a
tx@Dict begin { 145.39287 33.85854 } PutCoor PutBegin  end
 26418 14043 a 25936 14457 a Fd(E)26418
14043 y
tx@Dict begin  PutEnd  end
 26418 14043 a 26418 14043 a
tx@Dict begin { 93.60901 65.72557 } PutCoor PutBegin  end
 26418 14043 a 25944
14457 a Fd(F)26418 14043 y
tx@Dict begin  PutEnd  end
 26418 14043 a 26418 14043
a
tx@Dict begin { 145.39287 65.72557 } PutCoor PutBegin  end
 26418 14043 a 25939 14457 a Fd(O)26418 14043 y
tx@Dict begin  PutEnd  end
 26418
14043 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 79.6673 139.41777
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 139.41777 59.75047
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 199.16824 99.58412
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 59.75047
19.91682 99.58412 59.75047 139.41777 39.83365 139.41777 19.91682 59.75047
19.91682   /Lineto /lineto load def 0  setlinejoin false Line  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 26418 14043 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end

26418 14043 a 26418 14043 a
tx@Dict begin { 119.50095 -29.87523 } PutCoor PutBegin  end
 26418 14043 a 23552 13254
a Ff(Question)g(2)26418 14043 y
tx@Dict begin  PutEnd  end
 26418 14043 a 0 TeXcolorgray
-1794 17577 a Ff(1.)p 0 TeXcolorgray 606 w(Indiquer)f(le)f(v)-34
b(ecteur)370 b(\023)-572 b(egal)403 b(\022)-606 b(a)13634
16749 y Fe(\000)h(\000)h(!)13634 17577 y Fd(AB)330 b
Ff(+)17004 16749 y Fe(\000)-554 b(\000)g(!)17004 17577
y Fd(C)87 b(D)34 b Ff(.)p 0 TeXcolorgray -1794 19496
a(2.)p 0 TeXcolorgray 606 w(On)404 b(consid)-34 b(\022)-572
b(ere)404 b(la)f(\014gure)i(2)f(ci-a)-34 b(v)-67 b(an)-34
b(t.)-245 21115 y(On)437 b(note)h Fe(F)5406 21297 y Fa(1)6369
21115 y Ff(l'image)e(du)i(quadrilat)-34 b(\022)-572 b(ere)437
b Fd(C)87 b(D)34 b(E)70 b(F)605 b Ff(par)437 b(la)g(translation)h(de)f
(v)-34 b(ecteur)39179 20287 y Fe(\000)-288 b(!)39179
21115 y Fd(O)34 b(A)p Ff(,)436 b(et)i Fe(F)44139 21297
y Fa(2)45102 21115 y Ff(l'image)e(du)i(qua-)-245 22734
y(drilat)-34 b(\022)-572 b(ere)403 b Fe(F)5481 22916
y Fa(1)6411 22734 y Ff(par)h(la)g(translation)h(de)f(v)-34
b(ecteur)21916 21906 y Fe(\000)-605 b(\000)h(!)21916
22734 y Fd(AB)61 b Ff(.)-245 24240 y(Construire)404 b
Fe(F)6632 24422 y Fa(2)7563 24240 y Ff(sans)g(e\013ectuer)g(de)g(trac)
-34 b(\023)-572 b(e)404 b(en)g(dehors)g(de)g(la)g(\014gure.)p
0 TeXcolorgray -1794 26272 a(3.)p 0 TeXcolorgray 606
w(On)g(consid)-34 b(\022)-572 b(ere)404 b(la)f(\014gure)i(ci-dessous.)f
(Construire)h(le)e(p)34 b(oin)-34 b(t)405 b Fd(M)536
b Ff(d)-34 b(\023)-572 b(e\014ni)405 b(par)35322 25444
y Fe(\000)-441 b(\000)h(!)35322 26272 y Fd(AM)469 b Ff(=)39155
25444 y Fe(\000)-604 b(\000)g(!)39155 26272 y Fd(AB)331
b Ff(+)42526 25444 y Fe(\000)-576 b(\000)g(!)42526 26272
y Fd(AD)33 b Ff(.)16665 38912 y @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 179.25142 99.58412 0.0 0.0 19.91682 abs
19.91682 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end


@endspecial 16665 38912 a
tx@Dict begin { 13.94171 33.85854 } PutCoor PutBegin  end
 16665 38912 a 16210 39326
a Fd(A)16665 38912 y
tx@Dict begin  PutEnd  end
 16665 38912 a 16665 38912 a
tx@Dict begin { 125.47604 33.85854 } PutCoor PutBegin  end
 16665
38912 a 16175 39326 a Fd(B)16665 38912 y
tx@Dict begin  PutEnd  end
 16665 38912
a 16665 38912 a
tx@Dict begin { 65.72557 65.72557 } PutCoor PutBegin  end
 16665 38912 a 16146 39326 a Fd(D)16665
38912 y
tx@Dict begin  PutEnd  end
 16665 38912 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 19.91682 39.83365
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 119.50095 39.83365
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 59.75047 59.75047
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -3276 42772 a Fg(Exercice)464
b(18)g(:)h(exercice-bilan)p -3276 42966 16623 49 v -3276
44277 a Ff(On)405 b(consid)-34 b(\022)-572 b(ere)403
b(la)h(\014gure)g(ci-dessous)h(:)8693 62271 y @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0  setgray 0.0 0.0 295.90552 147.95276 0.0 0.0 18.4941 abs
18.4941 abs 1 10 { 0  setgray } 0.0 /Helvetica findfont 0.0 scalefont
setfont Grid grestore  end
 
@endspecial 8693 62271 a
tx@Dict begin { 12.9458 135.00694 } PutCoor PutBegin  end
 8693 62271 a 8039
62685 a Fd(M)8693 62271 y
tx@Dict begin  PutEnd  end
 8693 62271 a 8693 62271 a
tx@Dict begin { 123.91037 135.00694 } PutCoor PutBegin  end
 8693
62271 a 8140 62685 a Fd(N)8693 62271 y
tx@Dict begin  PutEnd  end
 8693 62271 a 8693
62271 a
tx@Dict begin { 234.87494 135.00694 } PutCoor PutBegin  end
 8693 62271 a 8220 62685 a Fd(P)8693 62271 y
tx@Dict begin  PutEnd  end
 8693
62271 a 8693 62271 a
tx@Dict begin { 160.89856 68.42809 } PutCoor PutBegin  end
 8693 62271 a 8214 62567 a Fd(Q)8693
62271 y
tx@Dict begin  PutEnd  end
 8693 62271 a 8693 62271 a
tx@Dict begin { 271.86313 68.42809 } PutCoor PutBegin  end
 8693 62271 a 8228 62685
a Fd(R)8693 62271 y
tx@Dict begin  PutEnd  end
 8693 62271 a 8693 62271 a
tx@Dict begin { 86.92218 12.9458 } PutCoor PutBegin  end
 8693 62271
a 8286 62685 a Fd(S)8693 62271 y
tx@Dict begin  PutEnd  end
 8693 62271 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 18.4941 129.45866
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 129.45866 129.45866
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 240.42323 129.45866
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 166.44685 73.97638
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 277.41142 73.97638
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 92.47047 18.4941
  false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 0 TeXcolorgray
-1794 64488 a Ff(1.)p 0 TeXcolorgray 606 w(Compl)-34
b(\023)-572 b(eter)404 b(les)370 b(\023)-572 b(egalit)-34
b(\023)-572 b(es)403 b(suiv)-67 b(an)-34 b(tes)405 b(en)f(utilisan)-34
b(t)405 b(des)f(p)34 b(oin)-34 b(ts)406 b(de)e(la)f(\014gure)i(:)p
0 TeXcolorgray 1573 67378 a Fe(\005)p 0 TeXcolorgray
2785 66549 a(\000)-342 b(\000)g(!)2785 67378 y Fd(M)132
b(N)469 b Ff(=)6815 66549 y Fe(\000)-525 b(\000)-269
b(\000)-525 b(!)6815 67378 y Fd(N)65 b(:::::)201 b Ff(;)p
0 TeXcolorgray 1573 69414 a Fe(\005)p 0 TeXcolorgray
2785 68586 a(\000)-597 b(\000)h(!)2785 69414 y Fd(QP)438
b Ff(+)6171 68586 y Fe(\000)-383 b(!)6171 69414 y Fd(QS)407
b Ff(=)337 b Fd(::::::::)199 b Ff(;)p 0 TeXcolorgray
1573 71451 a Fe(\005)p 0 TeXcolorgray 2785 70623 a(\000)-342
b(\000)g(!)2785 71451 y Fd(N)132 b(M)402 b Ff(+)6681
70623 y Fe(\000)-343 b(\000)i(!)6681 71451 y Fd(N)132
b(M)468 b Ff(=)337 b Fd(::::::::)200 b Ff(;)p 0 TeXcolorgray
28674 67378 a Fe(\005)p 0 TeXcolorgray 29886 66549 a(\000)-343
b(\000)i(!)29886 67378 y Fd(N)132 b(M)401 b Ff(+)33781
66549 y Fe(\000)-523 b(\000)h(!)33781 67378 y Fd(P)168
b(N)470 b Ff(=)336 b Fd(::::::::)200 b Ff(;)p 0 TeXcolorgray
28674 69414 a Fe(\005)p 0 TeXcolorgray 29886 68586 a(\000)-518
b(\000)i(!)29886 69414 y Fd(QN)401 b Ff(+)33431 68586
y Fe(\000)-597 b(\000)h(!)33431 69414 y Fd(QP)506 b Ff(=)36952
68586 y Fe(\000)-323 b(\000)h(!)36952 69414 y Fd(::::N)333
b Ff(;)p 0 TeXcolorgray 28674 71451 a Fe(\005)p 0 TeXcolorgray
606 w(\000)30829 70623 y(\000)-518 b(\000)i(!)30829 71451
y Fd(QN)468 b Ff(=)34509 70623 y Fe(\000)-411 b(\000)g(!)34509
71451 y Fd(::::R)8 b Ff(.)p 0 TeXcolorgray -1794 75221
a(2.)p 0 TeXcolorgray 606 w(P)-34 b(our)343 b(c)-34 b(hacune)343
b(des)309 b(\023)-572 b(egalit)-34 b(\023)-572 b(es)341
b(ci-dessous,)i(dire)f(si)g(elle)f(est)i(vraie)f(ou)g(fausse.)i(Si)e
(elle)f(est)i(fausse,)g(corriger)e(le)h(second)-245 76727
y(mem)-34 b(bre)404 b(p)34 b(our)404 b(qu'elle)f(devienne)h(correcte.)
11653 78720 y Fe(\000)-416 b(\000)h(!)11653 79549 y Fd(M)132
b(Q)338 b Ff(=)15536 78720 y Fe(\000)-532 b(\000)i(!)15536
79549 y Fd(R)9 b(N)1345 b Ff(;)20535 78720 y Fe(\000)-518
b(\000)i(!)20535 79549 y Fd(QN)401 b Ff(+)24080 78720
y Fe(\000)-605 b(\000)g(!)24080 79549 y Fd(QR)347 b Ff(=)27585
78720 y Fe(\000)-384 b(!)27585 79549 y Fd(S)70 b(Q)1212
b Ff(;)32319 78720 y Fe(\000)-517 b(\000)g(!)32319 79549
y Fd(QN)402 b Ff(+)35865 78720 y Fe(\000)-384 b(!)35865
79549 y Fd(QS)407 b Ff(=)39252 78720 y Fe(\000)-416 b(\000)g(!)39252
79549 y Fd(QM)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
